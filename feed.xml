<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://t-mao.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://t-mao.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-26T21:26:40+00:00</updated><id>https://t-mao.github.io/feed.xml</id><title type="html">blank</title><subtitle>Tongze Mao&apos;s personal folio website for academics. </subtitle><entry><title type="html">Harnessing Google Maps for Real-Time Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Google-Maps/" rel="alternate" type="text/html" title="Harnessing Google Maps for Real-Time Mobile Apps"/><published>2025-02-20T09:30:00+00:00</published><updated>2025-02-20T09:30:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Google-Maps</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Google-Maps/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-480.webp 480w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-800.webp 800w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Google Maps" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building modern mobile applications, integrating location-based features can be a powerful differentiator. Whether you’re matching users to geographically nearby services, providing turn-by-turn directions, or displaying on-demand tasks in real time, there’s no shortage of use cases for <strong>Google Maps</strong>. As an app developer, I’ve personally designed production-level integrations around Google Maps—covering everything from real-time location updates to geospatial queries and push notifications.</p> <p>Below, I’ll share an overview of how I structure these systems, including the geolocation logic, the custom markers for side-by-side listings, and how these tie into serverless backends. While I can’t show you every bit of private production code, I can highlight key patterns and share pseudocode that I’ve refined in real projects.</p> <hr/> <h2 id="why-use-google-maps">Why Use Google Maps?</h2> <ol> <li><strong>Rich Features</strong>: Google Maps provides built-in map layers, traffic data, Street View, and more.</li> <li><strong>Developer Ecosystem</strong>: The <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Places API</a>, auto-complete, geocoding, distance matrix, and many auxiliary endpoints let you expand beyond simple maps.</li> <li><strong>Global Reach</strong>: Support for dozens of locales and robust handling of edge cases around lat/lng formats.</li> <li><strong>Flutter &amp; Native SDKs</strong>: Whether you’re using Flutter, React Native, or native iOS/Android, Google Maps tends to have well-tested integrations.</li> <li><strong>Extensive Documentation</strong>: Tutorials, forums, and example code abound, reducing friction for advanced customizations.</li> </ol> <hr/> <h2 id="architectural-overview">Architectural Overview</h2> <p>In my production apps, the Google Maps piece is part of a broader architecture:</p> <ol> <li> <p><strong>Backend</strong> (Firebase Functions or Node.js microservices)</p> <ul> <li>Manages user data and location data.</li> <li>Performs geospatial queries (e.g., “find tasks within X miles of the user”).</li> <li>Schedules push notifications or watchers if certain distances or thresholds are crossed.</li> </ul> </li> <li> <p><strong>Mobile App</strong> (Flutter in my case)</p> <ul> <li>Displays interactive maps to the user.</li> <li>Subscribes to the device’s real-time location and streams it to the backend if needed.</li> <li>Renders dynamic markers, sometimes with custom icons or labels indicating cost/availability.</li> </ul> </li> <li> <p><strong>Location Services</strong></p> <ul> <li>Often uses the phone’s native geolocation.</li> <li>Optionally stores latitude and longitude to Firestore for real-time updates.</li> <li>In certain workflows, a background service (like a geofencing service) posts location updates to the server at intervals or upon significant movement.</li> </ul> </li> </ol> <hr/> <h2 id="implementation-flutter-map-integration">Implementation: Flutter Map Integration</h2> <p>Below is a simplified snippet—reflecting the approach I personally coded in Flutter. I rely on the <a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a> plugin for map rendering, combining it with location or geolocator plugins for device position. Then, I orchestrate Firestore reads to show relevant tasks or data points.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:google_maps_flutter/google_maps_flutter.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:geolocator/geolocator.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">NearbyJobsMap</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">NearbyJobsMap</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_NearbyJobsMapState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_NearbyJobsMapState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">late</span> <span class="n">GoogleMapController</span> <span class="n">_mapController</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">Set</span><span class="p">&lt;</span><span class="n">Marker</span><span class="p">&gt;</span> <span class="n">_markers</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="n">Position</span><span class="o">?</span> <span class="n">_currentPosition</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="n">_fetchCurrentLocation</span><span class="p">();</span>
    <span class="n">_loadMarkersFromServer</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_fetchCurrentLocation</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">isServiceEnabled</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">isLocationServiceEnabled</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isServiceEnabled</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Prompt user to enable GPS</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">LocationPermission</span> <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">checkPermission</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">denied</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">requestPermission</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">deniedForever</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Properly handle the case when user denies location forever</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">final</span> <span class="n">position</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="p">(</span>
      <span class="nl">desiredAccuracy:</span> <span class="n">LocationAccuracy</span><span class="o">.</span><span class="na">high</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_currentPosition</span> <span class="o">=</span> <span class="n">position</span><span class="p">);</span>
    <span class="c1">// Optionally, update server with the user's current position</span>
    <span class="c1">// e.g. MyServerAPI.updatePosition(position.latitude, position.longitude);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_loadMarkersFromServer</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// In practice, you'd call your own API or read from Firestore:</span>
    <span class="c1">// final tasks = await MyServerAPI.fetchNearbyTasks();</span>
    <span class="c1">// tasks.forEach((task) {</span>
    <span class="c1">//   _markers.add(_createMarker(task.lat, task.lng, task.id));</span>
    <span class="c1">// });</span>
    <span class="c1">// setState(() {});</span>

    <span class="c1">// For demonstration, just add a dummy marker:</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_markers</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">Marker</span><span class="p">(</span>
        <span class="nl">markerId:</span> <span class="kd">const</span> <span class="n">MarkerId</span><span class="p">(</span><span class="s">"testMarker"</span><span class="p">),</span>
        <span class="nl">position:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">),</span> <span class="c1">// SF</span>
        <span class="nl">infoWindow:</span> <span class="kd">const</span> <span class="n">InfoWindow</span><span class="p">(</span><span class="nl">title:</span> <span class="s">"Dummy Task"</span><span class="p">,</span> <span class="nl">snippet:</span> <span class="s">"Tap for details"</span><span class="p">),</span>
        <span class="nl">onTap:</span> <span class="p">()</span> <span class="p">{</span>
          <span class="c1">// Possibly navigate to details</span>
        <span class="p">},</span>
      <span class="p">));</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">startLatLng</span> <span class="o">=</span> <span class="n">_currentPosition</span> <span class="o">!=</span> <span class="kc">null</span>
        <span class="o">?</span> <span class="n">LatLng</span><span class="p">(</span><span class="n">_currentPosition</span><span class="o">!.</span><span class="na">latitude</span><span class="p">,</span> <span class="n">_currentPosition</span><span class="o">!.</span><span class="na">longitude</span><span class="p">)</span>
        <span class="o">:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Nearby Jobs Map"</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">GoogleMap</span><span class="p">(</span>
        <span class="nl">onMapCreated:</span> <span class="p">(</span><span class="n">controller</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_mapController</span> <span class="o">=</span> <span class="n">controller</span><span class="p">,</span>
        <span class="nl">initialCameraPosition:</span> <span class="n">CameraPosition</span><span class="p">(</span>
          <span class="nl">target:</span> <span class="n">startLatLng</span><span class="p">,</span>
          <span class="nl">zoom:</span> <span class="mf">13.0</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="nl">markers:</span> <span class="n">_markers</span><span class="p">,</span>
        <span class="nl">myLocationEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">myLocationButtonEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">zoomControlsEnabled:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="points-to-note">Points to Note</h3> <ul> <li><strong>User Permissions</strong>: On iOS, you need to handle <code class="language-plaintext highlighter-rouge">Info.plist</code> usage descriptions. On Android, ensure you ask for runtime permissions on versions &gt; 6.0.</li> <li><strong>Custom Marker Icons</strong>: For advanced UI, I sometimes generate dynamic bitmaps (e.g., showing a price) and convert them to <code class="language-plaintext highlighter-rouge">BitmapDescriptor</code>.</li> <li><strong>Handling Real-time Updates</strong>: <code class="language-plaintext highlighter-rouge">StreamBuilder</code> on Firestore or a custom WebSocket can automatically push new markers or remove them if tasks are completed.</li> <li><strong>Performance</strong>: Watch out for re-rendering too many markers. Consider clustering strategies if you have hundreds or thousands of data points.</li> </ul> <hr/> <h2 id="real-time-location-and-firestore-sync">Real-Time Location and Firestore Sync</h2> <p>In one of my apps, technicians needed to see newly posted tasks within a certain radius in near real time. My flow:</p> <ol> <li><strong>Technician Streams Position</strong>: The phone’s location updates are periodically posted to the backend.</li> <li><strong>Backend Recomputes</strong>: A cloud function or Node service looks up tasks within the distance threshold, then updates a “nearby_orders” array in Firestore for that technician.</li> <li><strong>Frontend Receives Snapshot</strong>: The phone uses a Firestore snapshot listener on that “nearby_orders” array. The map is updated accordingly.</li> </ol> <p>This approach has proven robust in production, though it means you must carefully handle updates: too-frequent location streaming can be costly on battery and data usage.</p> <hr/> <h2 id="auto-complete-and-geocoding">Auto-Complete and Geocoding</h2> <p>For location searching, I often use the <a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete">Places API Autocomplete</a>. My typical pattern:</p> <ul> <li><strong>User types</strong> an address or search query.</li> <li><strong>Call Autocomplete</strong> endpoint to fetch suggestions, then build a small dropdown.</li> <li>On selection, <strong>Geocode</strong> the place to get lat/lng, update the map camera, and optionally store that as the user’s desired location.</li> </ul> <p>Most map SDKs or the Flutter plugin community has direct solutions for this, but you can also manually integrate the REST endpoints or an official iOS/Android library if you need finer control.</p> <hr/> <h2 id="error-handling-and-edge-cases">Error Handling and Edge Cases</h2> <ol> <li><strong>GPS Disabled</strong>: Prompt the user to enable location services.</li> <li><strong>Permissions Denied</strong>: Provide a helpful flow. Possibly degrade gracefully with a default location or “map not available.”</li> <li><strong>Low Accuracy</strong>: If you need turn-by-turn precision, watch for accuracy disclaimers or calibrate the best accuracy level.</li> <li><strong>Scaling</strong>: Don’t attempt to place thousands of markers naively. Implement clustering or server-side bounding queries.</li> </ol> <hr/> <h2 id="personal-experience--key-takeaways">Personal Experience &amp; Key Takeaways</h2> <ul> <li><strong>Production Hardening</strong>: In real apps, user location can occasionally fail or come through with stale data. Build robust fallback logic.</li> <li><strong>Platform Nuances</strong>: On Android, background location requires extra permission logic. On iOS, partial or “approximate” location can hamper your radius queries.</li> <li><strong>Tight Coupling with Firestore</strong>: If you store lat/lng directly in Firestore for real-time sync, plan your reads so you don’t spam the user’s bandwidth with constant snapshot updates.</li> <li><strong>Push Notifications</strong>: Tying push notifications to location events (e.g., “a new job posted near you”) requires a server or cloud function approach. I’ve personally coded a system that runs every few minutes, checks for new tasks within X miles of each available tech, and sends an FCM notification.</li> </ul> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Integrating Google Maps into a mobile app opens up an entire class of location-centric features—whether you’re listing available jobs, searching for services near a user, or simply displaying a user’s current route. In my own production code, I rely on a combination of:</p> <ul> <li><strong>Flutter</strong> for a clean cross-platform map UI.</li> <li><strong>Geolocator</strong> for advanced permissions and real-time location streams.</li> <li><strong>Firestore</strong> or custom server logic for tasks, push notifications, and geospatial queries.</li> </ul> <p>The result is a responsive, real-time solution that seamlessly updates as new tasks appear or user positions change. If you’re building (or planning to build) an app that depends on map functionality, Google Maps is an excellent place to start—and with the right architecture, you can deliver an experience that feels almost magically relevant and immediate to your users.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="google-maps"/><category term="location"/><category term="geolocation"/><category term="flutter"/><category term="firebase"/><summary type="html"><![CDATA[An inside look at how I built location-based features in my production apps using Google Maps]]></summary></entry><entry><title type="html">Integrating Stripe Payments in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Stripe-Payments/" rel="alternate" type="text/html" title="Integrating Stripe Payments in Mobile Apps"/><published>2025-02-16T12:00:00+00:00</published><updated>2025-02-16T12:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Stripe-Payments</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Stripe-Payments/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-480.webp 480w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-800.webp 800w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Stripe Payments" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Handling secure payments and payouts is a critical component of many modern apps, especially those offering paid services or marketplaces. One robust solution for this domain is <a href="https://stripe.com/">Stripe</a>. Below I’ll walk through advanced use cases such as setting up PaymentIntents, ephemeral keys, connected accounts, and some behind-the-scenes tasks with Firebase Cloud Functions—all of which I have personally coded in production for my projects.</p> <h2 id="why-use-stripe">Why Use Stripe?</h2> <ol> <li><strong>Security:</strong> Stripe offers top-tier PCI compliance and thorough documentation.</li> <li><strong>Global Support:</strong> It handles multiple currencies and languages, simplifying worldwide deployment.</li> <li><strong>Feature Breadth:</strong> Beyond simple charges, it supports advanced flows—like PaymentIntents, subscription management, Apple/Google Pay, connected accounts for payouts, etc.</li> <li><strong>Developer-friendly:</strong> Clean REST APIs, webhooks, and official SDKs for popular platforms.</li> </ol> <h2 id="high-level-architecture">High-Level Architecture</h2> <p>My production systems typically revolve around these elements:</p> <ol> <li> <p><strong>Backend (e.g., Node.js, Firebase Functions, or custom server)</strong></p> <ul> <li>Securely stores Stripe API keys.</li> <li>Creates ephemeral keys, PaymentIntents, and handles card confirmations or verification flows.</li> <li>Manages connected accounts for multi-sided marketplaces (if your business includes payouts to external sellers).</li> <li>Often includes scheduling modules to handle delayed transfers or refunds.</li> </ul> </li> <li> <p><strong>Client-Side (Mobile App)</strong></p> <ul> <li>Initiates payment flows using ephemeral keys from the backend.</li> <li>Displays payment sheets or minimal UI for card input.</li> <li>Optionally integrates Google Pay or Apple Pay for frictionless checkout.</li> <li>Subscribes to real-time push notifications for status updates.</li> </ul> </li> </ol> <h3 id="a-note-on-push-notifications">A Note on Push Notifications</h3> <p>In my case, I also integrated FCM tokens and push-notification logic so that users and technicians receive timely payment or order updates. A specialized scheduling function scans Firestore for scheduled notifications, then sends them at the correct time. While this may not be strictly related to Stripe, it’s an essential part of delivering a cohesive mobile commerce experience.</p> <h2 id="payment-flow-in-a-nutshell">Payment Flow in a Nutshell</h2> <p>A typical in-app payment flow might look like this:</p> <ol> <li><strong>User Chooses Product</strong>: The user selects a product or a service in your app.</li> <li><strong>Backend Request</strong>: The mobile client calls your backend with product details (price, currency, etc.).</li> <li><strong>Server Creates PaymentIntent</strong>: The server uses the Stripe API to create a PaymentIntent with the desired amount and currency.</li> <li><strong>Ephemeral Key Generation</strong>: The server also retrieves or creates a Stripe <code class="language-plaintext highlighter-rouge">Customer</code> and returns an <a href="https://stripe.com/docs/api/ephemeral_keys">EphemeralKey</a> for the client’s current session.</li> <li><strong>Display Payment UI</strong>: Your app either uses Stripe’s native Payment Sheet or a custom card entry form.</li> <li><strong>Confirm Payment</strong>: The user enters payment details, Stripe processes them, and you receive a callback or webhook confirming success.</li> </ol> <h3 id="example-pseudocode-for-payment-creation">Example Pseudocode for Payment Creation</h3> <p>Below is a small snippet that reflects the approach I coded. On my backend, I store secrets as environment variables and then set up ephemeral keys accordingly:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">stripe</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">stripe</span><span class="dl">"</span><span class="p">)(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">STRIPE_SECRET_KEY</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">createPaymentIntent</span><span class="p">({</span> <span class="nx">amount</span><span class="p">,</span> <span class="nx">currency</span><span class="p">,</span> <span class="nx">customerId</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// Validate amounts and currency server-side</span>
  <span class="kd">const</span> <span class="nx">paymentIntent</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">paymentIntents</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
    <span class="na">amount</span><span class="p">:</span> <span class="nx">amount</span><span class="p">,</span> <span class="c1">// e.g., 999 for $9.99</span>
    <span class="na">currency</span><span class="p">:</span> <span class="nx">currency</span><span class="p">,</span> <span class="c1">// e.g., 'usd'</span>
    <span class="na">customer</span><span class="p">:</span> <span class="nx">customerId</span><span class="p">,</span> <span class="c1">// existing or newly created customer</span>
    <span class="na">payment_method_types</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="p">],</span>
    <span class="c1">// Additional configuration if needed</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">paymentIntent</span><span class="p">.</span><span class="nx">client_secret</span><span class="p">;</span> <span class="c1">// pass to the mobile app</span>
<span class="p">}</span>
</code></pre></div></div> <p>I typically wrap this in a Firebase Function or similar cloud function to securely interface with the mobile client. My real implementation also incorporates ephemeral key generation to allow dynamic updates to PaymentIntents from the client side, plus a few checks to ensure consistent currency and correct environment usage (test vs. production).</p> <h2 id="payouts-with-connected-accounts">Payouts with Connected Accounts</h2> <p>One advanced scenario is paying out to third parties—common in multi-vendor marketplaces or gig-economy apps. Stripe’s <a href="https://stripe.com/connect">Connect</a> flow allows you to:</p> <ol> <li>Create a <strong>connected account</strong> for each seller/technician.</li> <li>Collect payments from end customers.</li> <li>Programmatically distribute earnings to connected accounts.</li> </ol> <h3 id="example-flow">Example Flow</h3> <ul> <li><strong>User Orders a Service</strong>: Payment goes into your platform’s Stripe account.</li> <li><strong>Service Completed</strong>: The code calls <code class="language-plaintext highlighter-rouge">stripe.transfers.create()</code> or schedules future transfers to the connected account.</li> <li><strong>Notification</strong>: The user and service provider receive updates on transaction statuses.</li> </ul> <p>I wrote a back-end routine that:</p> <ol> <li>Confirms a PaymentIntent is successful.</li> <li>Looks up the relevant connected account.</li> <li>Schedules or processes a transfer to that connected account—sometimes with a short delay, giving me time for validation.</li> </ol> <p>A <em>simplified</em> version:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">transfers</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
  <span class="na">amount</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span> <span class="c1">// e.g., 2000 = $20.00</span>
  <span class="na">currency</span><span class="p">:</span> <span class="dl">"</span><span class="s2">usd</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">destination</span><span class="p">:</span> <span class="dl">"</span><span class="s2">acct_12345XYZ</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// The connected account ID</span>
<span class="p">});</span>
</code></pre></div></div> <p>Behind the scenes, it’s crucial to handle potential transfer failures, partial refunds, and edge cases like insufficient platform balance or incomplete KYC for the connected account. In my own code, I sometimes store these transfers in Firestore and run a scheduled function (Pub/Sub trigger) to finalize them once the funds fully settle.</p> <h2 id="implementation-nuances">Implementation Nuances</h2> <ol> <li><strong>Sensitive API Keys</strong>: Keep them strictly on the server side. Do not embed secret keys in mobile code.</li> <li><strong>Ephemeral Keys</strong>: They are short-lived. Renew them if a user session is extended or re-authenticated.</li> <li><strong>Webhooks</strong>: Stripe can push real-time event notifications (e.g., <code class="language-plaintext highlighter-rouge">payment_intent.succeeded</code>, <code class="language-plaintext highlighter-rouge">payment_intent.payment_failed</code>). Make sure to securely handle these events in your backend for accurate status updates.</li> <li><strong>Testing</strong>: Stripe’s sandbox environment with test card numbers is extremely helpful. Properly integrate test keys first, then pivot to live keys when you’re ready.</li> <li><strong>Multi-Environment Strategy</strong>: I maintain separate function entry points for test vs. production flows, ensuring that test transactions never pollute the real environment.</li> </ol> <h3 id="interfacing-with-firebase-and-flutter">Interfacing with Firebase and Flutter</h3> <p>On the Flutter side, I rely on the <code class="language-plaintext highlighter-rouge">flutter_stripe</code> plugin to present the payment sheet or a custom card field. Meanwhile, my Firebase Functions handle ephemeral key creation, PaymentIntent creation, and additional push logic. This pattern ensures the app remains lightweight, with all critical secrets and logic secured in the cloud.</p> <h2 id="conclusion">Conclusion</h2> <p>Stripe offers a powerful suite of payment APIs for mobile apps. Through PaymentIntents and ephemeral keys, you can securely accept one-time card payments, manage recurring billing, or even orchestrate multi-party payouts with Connect. The code I wrote for my own applications carefully orchestrates these building blocks—ensuring a frictionless user experience, robust error handling, and a secure payment pipeline.</p> <p>Whether you need a quick “pay now” button or a sophisticated marketplace system, Stripe remains a reliable choice for in-app transactions. By focusing on well-structured backend endpoints, ephemeral key generation, and thoughtful error handling, you can confidently deploy production-grade payment solutions. My own additions—like scheduling push notifications and building advanced logic for delayed payouts—further showcase how integrating Stripe can be extended to meet real-world business complexities. If you’re building a mobile commerce or gig-economy platform, Stripe is definitely worth a serious look.</p>]]></content><author><name></name></author><category term="mobile-commerce"/><category term="payments"/><category term="stripe"/><category term="in-app"/><summary type="html"><![CDATA[A practical look at adding secure in-app payments and payouts with Stripe]]></summary></entry><entry><title type="html">Streamlining Network Calls with a Custom DioInstance</title><link href="https://t-mao.github.io/blog/2025/Network-Calls/" rel="alternate" type="text/html" title="Streamlining Network Calls with a Custom DioInstance"/><published>2025-02-12T10:00:00+00:00</published><updated>2025-02-12T10:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Network-Calls</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Network-Calls/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-480.webp 480w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-800.webp 800w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Network Calls" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building mobile apps, reliable HTTP networking is paramount. In the Dart/Flutter ecosystem, <a href="https://pub.dev/packages/dio">Dio</a> stands out as a robust library for HTTP requests. While you can quickly fire off GETs and POSTs with default configs, more complex applications benefit from a unified, reusable Dio instance (commonly referred to as <code class="language-plaintext highlighter-rouge">DioInstance</code>).</p> <p>I’ve personally coded and refined a custom <code class="language-plaintext highlighter-rouge">DioInstance</code> solution to handle everything from request logging and dynamic headers to file uploads. Below is an overview of the architectural choices that have proven invaluable for large-scale apps.</p> <hr/> <h2 id="why-a-single-dioinstance">Why a Single DioInstance?</h2> <p>Most production apps rely on consistent request configurations (headers, timeouts, interceptors, etc.). Creating a single shared <code class="language-plaintext highlighter-rouge">DioInstance</code> with these policies ensures:</p> <ol> <li><strong>Centralized Configuration:</strong> Modify base URL, timeouts, or content types in one place.</li> <li><strong>Global Interceptors:</strong> Cleanly integrate logic for logging, authentication tokens, or custom error handling.</li> <li><strong>Maintainability:</strong> Extending or changing behavior is straightforward—no need to replicate logic across multiple files.</li> </ol> <hr/> <h2 id="core-features">Core Features</h2> <p>In my own work, I structured the code to tackle several real-world concerns:</p> <ol> <li> <p><strong>Initialization &amp; Safety Checks</strong></p> <ul> <li>Enforce a single initialization step, so any subsequent method calls can rely on guaranteed defaults (like timeouts or base URLs).</li> <li>Throw meaningful exceptions if someone forgets to initialize.</li> </ul> </li> <li> <p><strong>HTTP Methods</strong></p> <ul> <li>Provide a set of convenience functions, e.g., <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">post()</code>, and <code class="language-plaintext highlighter-rouge">upload()</code>, each using custom options and interceptors under the hood.</li> <li>Support query parameters, form data, JSON bodies, or multipart uploads with minimal friction.</li> </ul> </li> <li> <p><strong>Interceptors</strong></p> <ul> <li><strong>Header/Token Interceptor</strong>: Attaches custom headers like tokens, language codes, or other user-specific fields.</li> <li><strong>Logging Interceptor</strong>: Prints requests/responses or sends them to a dedicated logger. This drastically simplifies debugging network issues.</li> <li><strong>Response Interceptor</strong>: Allows for uniform success/error handling. For instance, you can parse a known <code class="language-plaintext highlighter-rouge">code</code> field in the response JSON and throw an exception if it isn’t <code class="language-plaintext highlighter-rouge">200</code>.</li> </ul> </li> <li> <p><strong>File Upload</strong></p> <ul> <li>Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> with the local file path.</li> <li>Allows a universal code path for multi-file or single-file uploads.</li> </ul> </li> <li> <p><strong>Base URL Switching</strong></p> <ul> <li>Handy for toggling between dev, staging, and production servers without rewriting code.</li> </ul> </li> </ol> <hr/> <h2 id="a-condensed-example">A Condensed Example</h2> <p>Here’s an abbreviated version of my approach, demonstrating the main ideas:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:io'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:dio/dio.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">DioInstance</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="n">DioInstance</span><span class="o">?</span> <span class="n">_instance</span><span class="p">;</span>
  <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span> <span class="c1">// Private constructor</span>

  <span class="c1">// Public accessor for the singleton</span>
  <span class="kd">static</span> <span class="n">DioInstance</span> <span class="n">getInstance</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">_instance</span> <span class="o">??=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_instance</span><span class="o">!</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">late</span> <span class="n">Dio</span> <span class="n">_dio</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">initDio</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">baseUrl</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">connectTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">receiveTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">sendTimeout</span><span class="p">,</span>
    <span class="n">ResponseType</span> <span class="n">responseType</span> <span class="o">=</span> <span class="n">ResponseType</span><span class="o">.</span><span class="na">json</span><span class="p">,</span>
  <span class="p">})</span> <span class="p">{</span>
    <span class="n">_dio</span> <span class="o">=</span> <span class="n">Dio</span><span class="p">(</span><span class="n">BaseOptions</span><span class="p">(</span>
      <span class="nl">baseUrl:</span> <span class="n">baseUrl</span><span class="p">,</span>
      <span class="nl">connectTimeout:</span> <span class="n">connectTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">receiveTimeout:</span> <span class="n">receiveTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">sendTimeout:</span> <span class="n">sendTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">responseType:</span> <span class="n">responseType</span><span class="p">,</span>
    <span class="p">));</span>

    <span class="c1">// Custom interceptors (header, logging, response shaping)</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">interceptors</span><span class="o">.</span><span class="na">addAll</span><span class="p">([</span>
      <span class="n">_buildTokenInterceptor</span><span class="p">(),</span>
      <span class="n">_buildLogInterceptor</span><span class="p">(),</span>
      <span class="n">_buildResponseInterceptor</span><span class="p">(),</span>
    <span class="p">]);</span>

    <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// GET method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="kd">get</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">get</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// POST method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">post</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">dynamic</span> <span class="n">data</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">data</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// File upload</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">upload</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">required</span> <span class="n">File</span> <span class="n">file</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>

    <span class="kd">final</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span><span class="o">.</span><span class="na">last</span><span class="p">;</span>
    <span class="kd">final</span> <span class="n">formData</span> <span class="o">=</span> <span class="n">FormData</span><span class="o">.</span><span class="na">fromMap</span><span class="p">({</span>
      <span class="s">'file'</span><span class="o">:</span> <span class="k">await</span> <span class="n">MultipartFile</span><span class="o">.</span><span class="na">fromFile</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="p">,</span> <span class="nl">filename:</span> <span class="n">fileName</span><span class="p">),</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">formData</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span> <span class="o">??</span>
          <span class="n">Options</span><span class="p">(</span><span class="nl">contentType:</span> <span class="n">Headers</span><span class="o">.</span><span class="na">formUrlEncodedContentType</span><span class="p">),</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Example: change base URL on the fly</span>
  <span class="kt">void</span> <span class="n">changeBaseUrl</span><span class="p">(</span><span class="kt">String</span> <span class="n">newBaseUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">options</span><span class="o">.</span><span class="na">baseUrl</span> <span class="o">=</span> <span class="n">newBaseUrl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// --- Interceptors below ---</span>
  <span class="n">Interceptor</span> <span class="n">_buildTokenInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Insert token or language header here</span>
        <span class="c1">// options.headers["Authorization"] = "Bearer &lt;token&gt;";</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildLogInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&gt;&gt; [Dio] Request: </span><span class="si">${options.method}</span><span class="s"> </span><span class="si">${options.uri}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&lt;&lt; [Dio] Response [</span><span class="si">${response.statusCode}</span><span class="s">]: </span><span class="si">${response.data}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onError:</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"!! [Dio] Error: </span><span class="si">${err.error}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildResponseInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Example logic: parse for known "code" field</span>
        <span class="kd">final</span> <span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">data</span><span class="o">?</span><span class="p">[</span><span class="s">'code'</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">reject</span><span class="p">(</span>
            <span class="n">DioException</span><span class="p">(</span>
              <span class="nl">requestOptions:</span> <span class="n">response</span><span class="o">.</span><span class="na">requestOptions</span><span class="p">,</span>
              <span class="nl">message:</span> <span class="s">"Response error code: </span><span class="si">$code</span><span class="s">"</span><span class="p">,</span>
            <span class="p">),</span>
          <span class="p">);</span>
        <span class="p">}</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">_checkInitialized</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_initialized</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="n">StateError</span><span class="p">(</span><span class="s">"DioInstance not initialized. Call initDio() first."</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="highlights">Highlights</h3> <ul> <li><strong>Singleton Pattern</strong>: Prevents accidental creation of multiple <code class="language-plaintext highlighter-rouge">Dio</code> objects with mismatched settings.</li> <li><strong>Interceptors</strong>: A chain-based approach that injects tokens, logs, and interprets responses.</li> <li><strong>Structured File Upload</strong>: Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> so you don’t need to repeat this logic in every feature module.</li> </ul> <hr/> <h2 id="real-world-usage">Real-World Usage</h2> <p>Once initialized, the same object can handle any number of requests:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Step 1: One-time init</span>
<span class="kd">final</span> <span class="n">dioManager</span> <span class="o">=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">getInstance</span><span class="p">();</span>
<span class="n">dioManager</span><span class="o">.</span><span class="na">initDio</span><span class="p">(</span><span class="nl">baseUrl:</span> <span class="s">"https://api.myapp.com"</span><span class="p">);</span>

<span class="c1">// Step 2: GET example</span>
<span class="kd">final</span> <span class="n">listResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">get</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/items"</span><span class="p">,</span> <span class="nl">queryParams:</span> <span class="p">{</span><span class="s">"page"</span><span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
<span class="n">print</span><span class="p">(</span><span class="s">"Item list: </span><span class="si">${listResponse.data}</span><span class="s">"</span><span class="p">);</span>

<span class="c1">// Step 3: POST example</span>
<span class="kd">final</span> <span class="n">loginResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
  <span class="nl">path:</span> <span class="s">"/login"</span><span class="p">,</span>
  <span class="nl">data:</span> <span class="p">{</span><span class="s">"username"</span><span class="o">:</span> <span class="s">"jane"</span><span class="p">,</span> <span class="s">"password"</span><span class="o">:</span> <span class="s">"123456"</span><span class="p">},</span>
<span class="p">);</span>

<span class="c1">// Step 4: Upload example</span>
<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="s">"/some/path/to/image.jpg"</span><span class="p">);</span>
<span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">upload</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/upload/avatar"</span><span class="p">,</span> <span class="nl">file:</span> <span class="n">file</span><span class="p">);</span>
</code></pre></div></div> <p>No matter the HTTP method, everything goes through the same interceptors, ensuring consistent logs, header injection, and error handling.</p> <hr/> <h2 id="common-pitfalls">Common Pitfalls</h2> <ol> <li><strong>Omitting <code class="language-plaintext highlighter-rouge">initDio()</code></strong>: Always ensure your app calls it at startup, or you’ll risk exceptions from uninitialized objects.</li> <li><strong>Forgetting to Add Interceptors</strong>: Missed interceptors means losing global logging or token logic—your logs become silent, and your server might not get correct authentication headers.</li> <li><strong>Excessive Per-Call Options</strong>: Overriding too many fields each time (like <code class="language-plaintext highlighter-rouge">baseUrl</code>, timeouts, or contentType) leads to confusion. Keep them in the main initialization if possible.</li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>A well-structured <code class="language-plaintext highlighter-rouge">DioInstance</code> is a force multiplier in any serious mobile project. By centralizing initialization, interceptors, and request methods, you gain more consistent code, simpler debugging, and a clear separation of concerns. The snippet above is pulled directly from code I’ve developed and iterated on for real-world apps, demonstrating how a single network class can handle everything from JSON-based requests to file transfers.</p> <p>Whether you’re building a small personal app or a large-scale production system, customizing your own <code class="language-plaintext highlighter-rouge">DioInstance</code> ensures your network layer remains cohesive, maintainable, and easy to extend.</p>]]></content><author><name></name></author><category term="backend-integration"/><category term="http"/><category term="networking"/><category term="dio"/><category term="flutter"/><summary type="html"><![CDATA[A deep dive into building a refined Dio setup for mobile apps]]></summary></entry><entry><title type="html">Harnessing RSA Encryption in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/RSA-Encryption/" rel="alternate" type="text/html" title="Harnessing RSA Encryption in Mobile Apps"/><published>2025-02-05T09:00:00+00:00</published><updated>2025-02-05T09:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/RSA-Encryption</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/RSA-Encryption/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-480.webp 480w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-800.webp 800w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="RSA" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As modern applications handle increasingly sensitive data, robust security measures become paramount. One common, time-tested approach to safeguarding data is RSA encryption. Within the context of mobile app development, RSA proves invaluable for securing user credentials, passwords, or any piece of confidential data that traverses potentially insecure networks.</p> <h2 id="rsa-overview">RSA Overview</h2> <p>RSA (Rivest–Shamir–Adleman) is an asymmetric cryptographic algorithm. Instead of relying on one shared key (as in symmetric encryption), it uses a pair of keys:</p> <ul> <li><strong>Public Key:</strong> Used for encryption. Typically shared with anyone who needs to send encrypted data.</li> <li><strong>Private Key:</strong> Used for decryption. Kept absolutely secure and never shared.</li> </ul> <p>The essential advantage in app development is that you can freely distribute your public key in your mobile application to encrypt user-submitted data (e.g., password fields during registration), while the private key (on your server or a secure service) safely decrypts incoming messages.</p> <h2 id="key-points-for-mobile-developers">Key Points for Mobile Developers</h2> <ol> <li><strong>Key Storage:</strong> The public key can be embedded into the app or fetched from a secure endpoint. The private key must remain on a secure server or hardware security module (HSM).</li> <li><strong>Performance Considerations:</strong> RSA encryption is computationally heavier than symmetric algorithms (like AES). Typically, developers use RSA to transmit session keys or sensitive short strings (like credentials), then switch to faster symmetric encryption for ongoing data exchange.</li> <li><strong>Security Best Practices:</strong> Always validate certificate chains, use well-maintained cryptographic libraries, keep libraries up-to-date, and follow platform security guidelines (e.g., Android Keystore, iOS Keychain).</li> </ol> <h2 id="practical-implementation">Practical Implementation</h2> <p>Below is a Dart-based example I developed focusing on an RSA-based encryption utility (<code class="language-plaintext highlighter-rouge">RsaEncrypt</code>). This snippet demonstrates encrypting plaintext (a password, for instance) using a public key. Once encrypted, the resulting ciphertext can safely traverse the network to the backend, where only the corresponding private key can decrypt it.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:developer'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:app_utils/utils/environments.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:encrypt/encrypt.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:pointycastle/asymmetric/api.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">RsaEncrypt</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kt">String</span> <span class="n">encryptString</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">plainText</span><span class="p">})</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔐 Starting RSA encryption...'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">publicKey</span> <span class="o">=</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="n">Environments</span><span class="o">.</span><span class="na">getPublicKeyString</span><span class="p">());</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔑 Public key parsed successfully'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">encryptedText</span> <span class="o">=</span> <span class="n">Encrypter</span><span class="p">(</span><span class="n">RSA</span><span class="p">(</span><span class="nl">publicKey:</span> <span class="n">publicKey</span><span class="p">))</span><span class="o">.</span><span class="na">encrypt</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔒 Encryption complete'</span><span class="p">);</span>

    <span class="c1">// Debug prints</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext End_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext End_________________"</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">/// Parse a public key from PEM format</span>
  <span class="kd">static</span> <span class="n">RSAPublicKey</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="kt">String</span> <span class="n">pemString</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">RSAKeyParser</span><span class="p">();</span>
    <span class="kd">final</span> <span class="n">key</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="n">pemString</span><span class="o">.</span><span class="na">trim</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">key</span> <span class="k">as</span> <span class="n">RSAPublicKey</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="example-flow-in-a-registration-screen">Example Flow in a Registration Screen</h3> <p>In one of my mobile apps, I integrated RSA into the user registration form. During the final “Create Account” step:</p> <ol> <li><strong>Extract User Input</strong>: Collect the email, password, and other sensitive fields from text controllers.</li> <li><strong>Encrypt with RSA</strong>: Call the <code class="language-plaintext highlighter-rouge">encryptString()</code> method before sending them out to the API.</li> <li><strong>Transmit</strong>: Post the encrypted ciphertext to the server via HTTPS.</li> <li><strong>Server Decryption</strong>: The server (holding the private key) decrypts the data and proceeds with user creation.</li> </ol> <p>Below is a simplified excerpt of a Flutter widget illustrating how RSA encryption might slot into a password-handling flow:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Simplified snippet from CreateAccountPageWidget</span>
<span class="kt">String</span> <span class="n">encryptedPassword</span> <span class="o">=</span> <span class="n">RsaEncrypt</span><span class="o">.</span><span class="na">encryptString</span><span class="p">(</span>
  <span class="nl">plainText:</span> <span class="n">_model</span><span class="o">.</span><span class="na">passwordTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
<span class="p">);</span>

<span class="c1">// Send to server using an authenticated endpoint</span>
<span class="kd">final</span> <span class="n">userRegisterData</span> <span class="o">=</span> <span class="k">await</span> <span class="n">ApiAuth</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">userRegister</span><span class="p">(</span>
  <span class="nl">email:</span> <span class="n">_model</span><span class="o">.</span><span class="na">emailTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
  <span class="nl">password:</span> <span class="n">encryptedPassword</span><span class="p">,</span>
  <span class="c1">// ...</span>
<span class="p">);</span>
</code></pre></div></div> <p>Using RSA for this crucial step helps ensure that a user’s password or other sensitive information is never sent as raw plaintext. While HTTPS adds transport-layer security, layering RSA can add an additional control or help meet certain compliance scenarios where end-to-end encryption is mandated.</p> <h2 id="additional-tips">Additional Tips</h2> <ol> <li><strong>Use Trusted Libraries</strong>: Handling cryptography manually is risky. Established libraries such as <code class="language-plaintext highlighter-rouge">encrypt</code> (Dart), OpenSSL (C/C++), or platform-specific APIs (Android’s <code class="language-plaintext highlighter-rouge">Cipher</code>, iOS’s <code class="language-plaintext highlighter-rouge">SecKey</code>) reduce risk and handle behind-the-scenes complexities.</li> <li><strong>Size Limitations</strong>: RSA encrypts data in chunks. Keep the plaintext size relatively small or implement a hybrid approach (RSA to protect an AES key, then AES for bulk encryption).</li> <li><strong>Logging</strong>: Notice the debug logs above—though useful for development, they must be removed or redacted in production environments to avoid leaking sensitive info.</li> </ol> <h2 id="conclusion">Conclusion</h2> <p>Implementing RSA in your mobile application can raise the security bar significantly, especially for user onboarding flows, login credentials, and other delicate transactions. My approach involves carefully parsing a PEM-encoded public key, encrypting short strings client-side, and ensuring the corresponding decryption is handled by a protected private key on the backend.</p> <p>In app development contexts, adopting robust cryptographic primitives like RSA indicates a refined understanding of security—something potential employers and clients appreciate. Coupled with efficient coding patterns and best-practice key management, this method protects user information against prying eyes throughout the data’s journey.</p>]]></content><author><name></name></author><category term="mobile-encryption"/><category term="security"/><category term="cryptography"/><category term="rsa"/><summary type="html"><![CDATA[A closer look at RSA cryptography and its practical implementation in app development]]></summary></entry></feed>