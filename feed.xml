<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://t-mao.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://t-mao.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-27T08:16:15+00:00</updated><id>https://t-mao.github.io/feed.xml</id><title type="html">blank</title><subtitle>Tongze Mao&apos;s personal folio website for academics. </subtitle><entry><title type="html">Building a Real-Time Chat Feature</title><link href="https://t-mao.github.io/blog/2025/Chat/" rel="alternate" type="text/html" title="Building a Real-Time Chat Feature"/><published>2025-02-25T22:15:00+00:00</published><updated>2025-02-25T22:15:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Chat</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Chat/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://media.istockphoto.com/id/1300739733/vector/message-bubbles-text-balloon-on-phone-dispaly-vector-design-template-for-messenger-chat.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=5XaPB5sDo9f_hNm1Lg3SjIqockS-Pc94XRVWzVVBnco=" sizes="95vw"/> <img src="https://media.istockphoto.com/id/1300739733/vector/message-bubbles-text-balloon-on-phone-dispaly-vector-design-template-for-messenger-chat.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=5XaPB5sDo9f_hNm1Lg3SjIqockS-Pc94XRVWzVVBnco=" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Chat" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Building a robust, real-time chat system is crucial for many mobile apps, from on-demand service platforms to social communities. In this post, I’ll outline the architecture and code considerations involved in creating a Flutter-based chat feature with message synchronization, backend triggers, and advanced user-interface design.</p> <hr/> <h2 id="high-level-approach">High-Level Approach</h2> <ol> <li><strong>Backend Integration</strong>: I rely on REST APIs or serverless functions (Firebase Functions, AWS Lambdas, etc.) for sending/receiving messages, updating read statuses, and broadcasting system events (like a user leaving, or the system acknowledging a payment).</li> <li><strong>Local State &amp; UI</strong>: On the client side, Flutter apps use <code class="language-plaintext highlighter-rouge">StreamBuilder</code>, <code class="language-plaintext highlighter-rouge">ListView</code>, or custom polling to keep a local record of conversation history. When new messages arrive, they’re appended to the local list, and the view updates in real time.</li> <li><strong>Permissions &amp; Validation</strong>: Ensure each user only accesses messages relevant to their order or context. Some apps also rely on role-based or ID-based verification to handle certain logic (e.g., “technicians” vs. “customers”).</li> </ol> <hr/> <h2 id="basic-architecture">Basic Architecture</h2> <p>The chat data model typically includes:</p> <ul> <li><strong>Message</strong>: Contains <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">senderId</code>, <code class="language-plaintext highlighter-rouge">text</code>, <code class="language-plaintext highlighter-rouge">imageUrl</code> (if any), <code class="language-plaintext highlighter-rouge">timestamp</code>, <code class="language-plaintext highlighter-rouge">messageType</code> (e.g., normal vs. system).</li> <li><strong>Conversation</strong> (optional): Tracks participants, unread counts, etc.</li> <li><strong>Server</strong>: Receives new messages through an HTTP endpoint or direct Firestore writes, then broadcasts them to all relevant participants.</li> </ul> <p>For real-time notification, you can use push notifications or background fetch logic. However, many situations also employ short polling if the user is already in the chat screen—this can sometimes simplify concurrency or offline cases.</p> <hr/> <h2 id="flutter-ui-example">Flutter UI Example</h2> <p>Below is a condensed snippet illustrating how I might manage message state, handle text+image inputs, and display messages in conversation bubbles.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'dart:typed_data'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">id</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">senderId</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">text</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span><span class="o">?</span> <span class="n">imageUrl</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">timestamp</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">bool</span> <span class="n">isSystemMessage</span><span class="p">;</span>

  <span class="n">ChatMessage</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">senderId</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
    <span class="k">this</span><span class="o">.</span><span class="na">imageUrl</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">timestamp</span><span class="p">,</span>
    <span class="k">this</span><span class="o">.</span><span class="na">isSystemMessage</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">ChatPage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">conversationId</span><span class="p">;</span>
  <span class="kd">const</span> <span class="n">ChatPage</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">conversationId</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">ChatPage</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_ChatPageState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_ChatPageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">ChatPage</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">_messageController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
  <span class="kt">List</span><span class="p">&lt;</span><span class="n">ChatMessage</span><span class="p">&gt;</span> <span class="n">_messages</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kt">bool</span> <span class="n">_isUploading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="n">Uint8List</span><span class="o">?</span> <span class="n">_pendingImageBytes</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="n">_fetchMessages</span><span class="p">();</span> <span class="c1">// initial fetch</span>
    <span class="c1">// Optionally set up a periodic polling or streaming subscription</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">_fetchMessages</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Call backend or DB to load existing messages</span>
    <span class="kd">final</span> <span class="n">fetchedMessages</span> <span class="o">=</span> <span class="k">await</span> <span class="n">_mockFetchMessagesFromServer</span><span class="p">();</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_messages</span> <span class="o">=</span> <span class="n">fetchedMessages</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">List</span><span class="p">&lt;</span><span class="n">ChatMessage</span><span class="p">&gt;&gt;</span> <span class="n">_mockFetchMessagesFromServer</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Replace with your actual logic, e.g.:</span>
    <span class="k">await</span> <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="p">(</span><span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="mi">500</span><span class="p">));</span>
    <span class="k">return</span> <span class="p">[</span>
      <span class="n">ChatMessage</span><span class="p">(</span>
        <span class="nl">id:</span> <span class="s">'m1'</span><span class="p">,</span>
        <span class="nl">senderId:</span> <span class="s">'customer123'</span><span class="p">,</span>
        <span class="nl">text:</span> <span class="s">'Hi, I have a question about my order.'</span><span class="p">,</span>
        <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span> <span class="o">-</span> <span class="mi">60000</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="n">ChatMessage</span><span class="p">(</span>
        <span class="nl">id:</span> <span class="s">'m2'</span><span class="p">,</span>
        <span class="nl">senderId:</span> <span class="s">'system'</span><span class="p">,</span>
        <span class="nl">text:</span> <span class="s">'System event: The technician is en route.'</span><span class="p">,</span>
        <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span> <span class="o">-</span> <span class="mi">30000</span><span class="p">,</span>
        <span class="nl">isSystemMessage:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">];</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_sendMessage</span><span class="p">({</span><span class="kt">String</span><span class="o">?</span> <span class="n">text</span><span class="p">,</span> <span class="kt">String</span><span class="o">?</span> <span class="n">imageUrl</span><span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Make sure we have content</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">text</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">imageUrl</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">imageUrl</span><span class="o">.</span><span class="na">isEmpty</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Construct a local message</span>
    <span class="kd">final</span> <span class="n">newMsg</span> <span class="o">=</span> <span class="n">ChatMessage</span><span class="p">(</span>
      <span class="nl">id:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span>
      <span class="nl">senderId:</span> <span class="s">'technician456'</span><span class="p">,</span>
      <span class="nl">text:</span> <span class="n">text</span> <span class="o">??</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">imageUrl:</span> <span class="n">imageUrl</span><span class="p">,</span>
      <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Update local UI</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_messages</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">newMsg</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Optionally call backend to persist</span>
    <span class="c1">// e.g., await MyAPI.sendChatMessage(widget.conversationId, newMsg);</span>
  <span class="p">}</span>

  <span class="n">Widget</span> <span class="n">_buildMessageBubble</span><span class="p">(</span><span class="n">ChatMessage</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">isSystemMessage</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// system bubble</span>
      <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
        <span class="nl">margin:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">symmetric</span><span class="p">(</span><span class="nl">vertical:</span> <span class="mi">8</span><span class="p">),</span>
        <span class="nl">alignment:</span> <span class="n">Alignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
        <span class="nl">child:</span> <span class="n">Container</span><span class="p">(</span>
          <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
          <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">grey</span><span class="o">.</span><span class="na">shade200</span><span class="p">,</span>
            <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
          <span class="p">),</span>
          <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span>
            <span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
            <span class="nl">textAlign:</span> <span class="n">TextAlign</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">style:</span> <span class="kd">const</span> <span class="n">TextStyle</span><span class="p">(</span><span class="nl">fontStyle:</span> <span class="n">FontStyle</span><span class="o">.</span><span class="na">italic</span><span class="p">),</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">final</span> <span class="kt">bool</span> <span class="n">isMine</span> <span class="o">=</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">senderId</span> <span class="o">==</span> <span class="s">'technician456'</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">margin:</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">fromLTRB</span><span class="p">(</span><span class="n">isMine</span> <span class="o">?</span> <span class="mi">60</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">isMine</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
      <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
      <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
        <span class="nl">color:</span> <span class="n">isMine</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">shade100</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="o">.</span><span class="na">shade100</span><span class="p">,</span>
        <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
        <span class="nl">crossAxisAlignment:</span>
            <span class="n">isMine</span> <span class="o">?</span> <span class="n">CrossAxisAlignment</span><span class="o">.</span><span class="na">end</span> <span class="o">:</span> <span class="n">CrossAxisAlignment</span><span class="o">.</span><span class="na">start</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="p">)</span>
            <span class="n">Text</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="p">),</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span><span class="o">!.</span><span class="na">isNotEmpty</span><span class="p">)</span>
            <span class="n">Padding</span><span class="p">(</span>
              <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">only</span><span class="p">(</span><span class="nl">top:</span> <span class="mi">8</span><span class="p">),</span>
              <span class="nl">child:</span> <span class="n">Image</span><span class="o">.</span><span class="na">network</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span><span class="o">!</span><span class="p">),</span>
            <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
        <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Conversation #</span><span class="si">${widget.conversationId}</span><span class="s">'</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Expanded</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">ListView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
              <span class="nl">itemCount:</span> <span class="n">_messages</span><span class="o">.</span><span class="na">length</span><span class="p">,</span>
              <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_buildMessageBubble</span><span class="p">(</span><span class="n">_messages</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span>
            <span class="p">),</span>
          <span class="p">),</span>
          <span class="n">_buildTextComposer</span><span class="p">(),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Widget</span> <span class="n">_buildTextComposer</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">SafeArea</span><span class="p">(</span>
      <span class="nl">child:</span> <span class="n">Row</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">IconButton</span><span class="p">(</span>
            <span class="nl">icon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">add_photo_alternate</span><span class="p">),</span>
            <span class="nl">onPressed:</span> <span class="n">_onSelectImage</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Expanded</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">TextField</span><span class="p">(</span>
              <span class="nl">controller:</span> <span class="n">_messageController</span><span class="p">,</span>
              <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
                <span class="nl">hintText:</span> <span class="s">'Type your message...'</span><span class="p">,</span>
              <span class="p">),</span>
            <span class="p">),</span>
          <span class="p">),</span>
          <span class="n">IconButton</span><span class="p">(</span>
            <span class="nl">icon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">send</span><span class="p">),</span>
            <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
              <span class="kd">final</span> <span class="n">text</span> <span class="o">=</span> <span class="n">_messageController</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">trim</span><span class="p">();</span>
              <span class="n">_messageController</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
              <span class="n">_sendMessage</span><span class="p">(</span><span class="nl">text:</span> <span class="n">text</span><span class="p">);</span>
            <span class="p">},</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Pseudocode for image picking</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_onSelectImage</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// final selectedFile = await pickImage(); // implement picking</span>
    <span class="c1">// _isUploading = true; setState(() {});</span>
    <span class="c1">// final uploadedUrl = await MyAPI.uploadFile(selectedFile);</span>
    <span class="c1">// _isUploading = false; setState(() {});</span>
    <span class="c1">// _sendMessage(imageUrl: uploadedUrl);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="key-observations">Key Observations</h3> <ul> <li>The code uses a local <code class="language-plaintext highlighter-rouge">_messages</code> list for immediate UI updates.</li> <li>Actual network calls (e.g., to a REST endpoint or Firestore) happen in an async function. This ensures the UI remains responsive.</li> <li>System messages (like “technician is on the way”) are displayed differently than normal user messages.</li> </ul> <hr/> <h2 id="handling-advanced-scenarios">Handling Advanced Scenarios</h2> <ul> <li><strong>Unread Indicators</strong>: If multiple screens or partial user sessions are involved, track <code class="language-plaintext highlighter-rouge">lastSeenMessageTime</code> on the server. In my apps, I typically store each user’s last-read timestamp in a database and then highlight any newer messages.</li> <li><strong>Delivery Receipts</strong>: If you need full reliability (like “delivered” or “read” confirmations), design a small queue to push read acknowledgements back to the server.</li> <li><strong>Push Notifications</strong>: Typically used if a user is outside the app. On new messages, a backend function triggers a push, and the mobile OS (Android/iOS) displays it. Tapping the notification deep-links into the chat screen.</li> </ul> <hr/> <h2 id="concluding-thoughts">Concluding Thoughts</h2> <p>Building a chat feature requires careful orchestration between the frontend, backend, and push notification system. By focusing on clarity of message structures, implementing robust synchronization (pull or push), and differentiating user/system flows in the UI, you’ll create a messaging experience that feels immediate and stable. Whether you’re working on a simple 1-on-1 chat or a large multi-participant system, these core principles remain the same.</p> <p>If done right, a real-time chat not only boosts user engagement but also enables advanced features—such as in-chat payments, scheduling, and shared media—making your mobile app far more valuable in the eyes of both users.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="chat"/><category term="messaging"/><summary type="html"><![CDATA[An in-depth look at real-time chat implementation for mobile apps]]></summary></entry><entry><title type="html">Harnessing Google Maps for Real-Time Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Google-Maps/" rel="alternate" type="text/html" title="Harnessing Google Maps for Real-Time Mobile Apps"/><published>2025-02-20T09:30:00+00:00</published><updated>2025-02-20T09:30:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Google-Maps</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Google-Maps/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-480.webp 480w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-800.webp 800w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Google Maps" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building modern mobile applications, integrating location-based features can be a powerful differentiator. Whether you’re matching users to geographically nearby services, providing turn-by-turn directions, or displaying on-demand tasks in real time, there’s no shortage of use cases for <strong>Google Maps</strong>. As an app developer, I’ve personally designed production-level integrations around Google Maps—covering everything from real-time location updates to geospatial queries and push notifications.</p> <p>Below, I’ll share an overview of how I structure these systems, including the geolocation logic, the custom markers for side-by-side listings, and how these tie into serverless backends. While I can’t show you every bit of private production code, I can highlight key patterns and share pseudocode that I’ve refined in real projects.</p> <hr/> <h2 id="why-use-google-maps">Why Use Google Maps?</h2> <ol> <li><strong>Rich Features</strong>: Google Maps provides built-in map layers, traffic data, Street View, and more.</li> <li><strong>Developer Ecosystem</strong>: The <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Places API</a>, auto-complete, geocoding, distance matrix, and many auxiliary endpoints let you expand beyond simple maps.</li> <li><strong>Global Reach</strong>: Support for dozens of locales and robust handling of edge cases around lat/lng formats.</li> <li><strong>Flutter &amp; Native SDKs</strong>: Whether you’re using Flutter, React Native, or native iOS/Android, Google Maps tends to have well-tested integrations.</li> <li><strong>Extensive Documentation</strong>: Tutorials, forums, and example code abound, reducing friction for advanced customizations.</li> </ol> <hr/> <h2 id="architectural-overview">Architectural Overview</h2> <p>In my production apps, the Google Maps piece is part of a broader architecture:</p> <ol> <li> <p><strong>Backend</strong> (Firebase Functions or Node.js microservices)</p> <ul> <li>Manages user data and location data.</li> <li>Performs geospatial queries (e.g., “find tasks within X miles of the user”).</li> <li>Schedules push notifications or watchers if certain distances or thresholds are crossed.</li> </ul> </li> <li> <p><strong>Mobile App</strong> (Flutter in my case)</p> <ul> <li>Displays interactive maps to the user.</li> <li>Subscribes to the device’s real-time location and streams it to the backend if needed.</li> <li>Renders dynamic markers, sometimes with custom icons or labels indicating cost/availability.</li> </ul> </li> <li> <p><strong>Location Services</strong></p> <ul> <li>Often uses the phone’s native geolocation.</li> <li>Optionally stores latitude and longitude to Firestore for real-time updates.</li> <li>In certain workflows, a background service (like a geofencing service) posts location updates to the server at intervals or upon significant movement.</li> </ul> </li> </ol> <hr/> <h2 id="implementation-flutter-map-integration">Implementation: Flutter Map Integration</h2> <p>Below is a simplified snippet—reflecting the approach I personally coded in Flutter. I rely on the <a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a> plugin for map rendering, combining it with location or geolocator plugins for device position. Then, I orchestrate Firestore reads to show relevant tasks or data points.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:google_maps_flutter/google_maps_flutter.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:geolocator/geolocator.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">NearbyJobsMap</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">NearbyJobsMap</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_NearbyJobsMapState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_NearbyJobsMapState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">late</span> <span class="n">GoogleMapController</span> <span class="n">_mapController</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">Set</span><span class="p">&lt;</span><span class="n">Marker</span><span class="p">&gt;</span> <span class="n">_markers</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="n">Position</span><span class="o">?</span> <span class="n">_currentPosition</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="n">_fetchCurrentLocation</span><span class="p">();</span>
    <span class="n">_loadMarkersFromServer</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_fetchCurrentLocation</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">isServiceEnabled</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">isLocationServiceEnabled</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isServiceEnabled</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Prompt user to enable GPS</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">LocationPermission</span> <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">checkPermission</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">denied</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">requestPermission</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">deniedForever</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Properly handle the case when user denies location forever</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">final</span> <span class="n">position</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="p">(</span>
      <span class="nl">desiredAccuracy:</span> <span class="n">LocationAccuracy</span><span class="o">.</span><span class="na">high</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_currentPosition</span> <span class="o">=</span> <span class="n">position</span><span class="p">);</span>
    <span class="c1">// Optionally, update server with the user's current position</span>
    <span class="c1">// e.g. MyServerAPI.updatePosition(position.latitude, position.longitude);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_loadMarkersFromServer</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// In practice, you'd call your own API or read from Firestore:</span>
    <span class="c1">// final tasks = await MyServerAPI.fetchNearbyTasks();</span>
    <span class="c1">// tasks.forEach((task) {</span>
    <span class="c1">//   _markers.add(_createMarker(task.lat, task.lng, task.id));</span>
    <span class="c1">// });</span>
    <span class="c1">// setState(() {});</span>

    <span class="c1">// For demonstration, just add a dummy marker:</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_markers</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">Marker</span><span class="p">(</span>
        <span class="nl">markerId:</span> <span class="kd">const</span> <span class="n">MarkerId</span><span class="p">(</span><span class="s">"testMarker"</span><span class="p">),</span>
        <span class="nl">position:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">),</span> <span class="c1">// SF</span>
        <span class="nl">infoWindow:</span> <span class="kd">const</span> <span class="n">InfoWindow</span><span class="p">(</span><span class="nl">title:</span> <span class="s">"Dummy Task"</span><span class="p">,</span> <span class="nl">snippet:</span> <span class="s">"Tap for details"</span><span class="p">),</span>
        <span class="nl">onTap:</span> <span class="p">()</span> <span class="p">{</span>
          <span class="c1">// Possibly navigate to details</span>
        <span class="p">},</span>
      <span class="p">));</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">startLatLng</span> <span class="o">=</span> <span class="n">_currentPosition</span> <span class="o">!=</span> <span class="kc">null</span>
        <span class="o">?</span> <span class="n">LatLng</span><span class="p">(</span><span class="n">_currentPosition</span><span class="o">!.</span><span class="na">latitude</span><span class="p">,</span> <span class="n">_currentPosition</span><span class="o">!.</span><span class="na">longitude</span><span class="p">)</span>
        <span class="o">:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Nearby Jobs Map"</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">GoogleMap</span><span class="p">(</span>
        <span class="nl">onMapCreated:</span> <span class="p">(</span><span class="n">controller</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_mapController</span> <span class="o">=</span> <span class="n">controller</span><span class="p">,</span>
        <span class="nl">initialCameraPosition:</span> <span class="n">CameraPosition</span><span class="p">(</span>
          <span class="nl">target:</span> <span class="n">startLatLng</span><span class="p">,</span>
          <span class="nl">zoom:</span> <span class="mf">13.0</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="nl">markers:</span> <span class="n">_markers</span><span class="p">,</span>
        <span class="nl">myLocationEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">myLocationButtonEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">zoomControlsEnabled:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="points-to-note">Points to Note</h3> <ul> <li><strong>User Permissions</strong>: On iOS, you need to handle <code class="language-plaintext highlighter-rouge">Info.plist</code> usage descriptions. On Android, ensure you ask for runtime permissions on versions &gt; 6.0.</li> <li><strong>Custom Marker Icons</strong>: For advanced UI, I sometimes generate dynamic bitmaps (e.g., showing a price) and convert them to <code class="language-plaintext highlighter-rouge">BitmapDescriptor</code>.</li> <li><strong>Handling Real-time Updates</strong>: <code class="language-plaintext highlighter-rouge">StreamBuilder</code> on Firestore or a custom WebSocket can automatically push new markers or remove them if tasks are completed.</li> <li><strong>Performance</strong>: Watch out for re-rendering too many markers. Consider clustering strategies if you have hundreds or thousands of data points.</li> </ul> <hr/> <h2 id="real-time-location-and-firestore-sync">Real-Time Location and Firestore Sync</h2> <p>In one of my apps, technicians needed to see newly posted tasks within a certain radius in near real time. My flow:</p> <ol> <li><strong>Technician Streams Position</strong>: The phone’s location updates are periodically posted to the backend.</li> <li><strong>Backend Recomputes</strong>: A cloud function or Node service looks up tasks within the distance threshold, then updates a “nearby_orders” array in Firestore for that technician.</li> <li><strong>Frontend Receives Snapshot</strong>: The phone uses a Firestore snapshot listener on that “nearby_orders” array. The map is updated accordingly.</li> </ol> <p>This approach has proven robust in production, though it means you must carefully handle updates: too-frequent location streaming can be costly on battery and data usage.</p> <hr/> <h2 id="auto-complete-and-geocoding">Auto-Complete and Geocoding</h2> <p>For location searching, I often use the <a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete">Places API Autocomplete</a>. My typical pattern:</p> <ul> <li><strong>User types</strong> an address or search query.</li> <li><strong>Call Autocomplete</strong> endpoint to fetch suggestions, then build a small dropdown.</li> <li>On selection, <strong>Geocode</strong> the place to get lat/lng, update the map camera, and optionally store that as the user’s desired location.</li> </ul> <p>Most map SDKs or the Flutter plugin community has direct solutions for this, but you can also manually integrate the REST endpoints or an official iOS/Android library if you need finer control.</p> <hr/> <h2 id="error-handling-and-edge-cases">Error Handling and Edge Cases</h2> <ol> <li><strong>GPS Disabled</strong>: Prompt the user to enable location services.</li> <li><strong>Permissions Denied</strong>: Provide a helpful flow. Possibly degrade gracefully with a default location or “map not available.”</li> <li><strong>Low Accuracy</strong>: If you need turn-by-turn precision, watch for accuracy disclaimers or calibrate the best accuracy level.</li> <li><strong>Scaling</strong>: Don’t attempt to place thousands of markers naively. Implement clustering or server-side bounding queries.</li> </ol> <hr/> <h2 id="personal-experience--key-takeaways">Personal Experience &amp; Key Takeaways</h2> <ul> <li><strong>Production Hardening</strong>: In real apps, user location can occasionally fail or come through with stale data. Build robust fallback logic.</li> <li><strong>Platform Nuances</strong>: On Android, background location requires extra permission logic. On iOS, partial or “approximate” location can hamper your radius queries.</li> <li><strong>Tight Coupling with Firestore</strong>: If you store lat/lng directly in Firestore for real-time sync, plan your reads so you don’t spam the user’s bandwidth with constant snapshot updates.</li> <li><strong>Push Notifications</strong>: Tying push notifications to location events (e.g., “a new job posted near you”) requires a server or cloud function approach. I’ve personally coded a system that runs every few minutes, checks for new tasks within X miles of each available tech, and sends an FCM notification.</li> </ul> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Integrating Google Maps into a mobile app opens up an entire class of location-centric features—whether you’re listing available jobs, searching for services near a user, or simply displaying a user’s current route. In my own production code, I rely on a combination of:</p> <ul> <li><strong>Flutter</strong> for a clean cross-platform map UI.</li> <li><strong>Geolocator</strong> for advanced permissions and real-time location streams.</li> <li><strong>Firestore</strong> or custom server logic for tasks, push notifications, and geospatial queries.</li> </ul> <p>The result is a responsive, real-time solution that seamlessly updates as new tasks appear or user positions change. If you’re building (or planning to build) an app that depends on map functionality, Google Maps is an excellent place to start—and with the right architecture, you can deliver an experience that feels almost magically relevant and immediate to your users.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="location"/><category term="google-maps"/><summary type="html"><![CDATA[An inside look at how I built location-based features in my production apps using Google Maps]]></summary></entry><entry><title type="html">Integrating Stripe Payments in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Stripe-Payments/" rel="alternate" type="text/html" title="Integrating Stripe Payments in Mobile Apps"/><published>2025-02-16T12:00:00+00:00</published><updated>2025-02-16T12:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Stripe-Payments</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Stripe-Payments/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-480.webp 480w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-800.webp 800w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Stripe Payments" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Handling secure payments and payouts is a critical component of many modern apps, especially those offering paid services or marketplaces. One robust solution for this domain is <a href="https://stripe.com/">Stripe</a>. Below I’ll walk through advanced use cases such as setting up PaymentIntents, ephemeral keys, connected accounts, and some behind-the-scenes tasks with Firebase Cloud Functions—all of which I have personally coded in production for my projects.</p> <h2 id="why-use-stripe">Why Use Stripe?</h2> <ol> <li><strong>Security:</strong> Stripe offers top-tier PCI compliance and thorough documentation.</li> <li><strong>Global Support:</strong> It handles multiple currencies and languages, simplifying worldwide deployment.</li> <li><strong>Feature Breadth:</strong> Beyond simple charges, it supports advanced flows—like PaymentIntents, subscription management, Apple/Google Pay, connected accounts for payouts, etc.</li> <li><strong>Developer-friendly:</strong> Clean REST APIs, webhooks, and official SDKs for popular platforms.</li> </ol> <h2 id="high-level-architecture">High-Level Architecture</h2> <p>My production systems typically revolve around these elements:</p> <ol> <li> <p><strong>Backend (e.g., Node.js, Firebase Functions, or custom server)</strong></p> <ul> <li>Securely stores Stripe API keys.</li> <li>Creates ephemeral keys, PaymentIntents, and handles card confirmations or verification flows.</li> <li>Manages connected accounts for multi-sided marketplaces (if your business includes payouts to external sellers).</li> <li>Often includes scheduling modules to handle delayed transfers or refunds.</li> </ul> </li> <li> <p><strong>Client-Side (Mobile App)</strong></p> <ul> <li>Initiates payment flows using ephemeral keys from the backend.</li> <li>Displays payment sheets or minimal UI for card input.</li> <li>Optionally integrates Google Pay or Apple Pay for frictionless checkout.</li> <li>Subscribes to real-time push notifications for status updates.</li> </ul> </li> </ol> <h3 id="a-note-on-push-notifications">A Note on Push Notifications</h3> <p>In my case, I also integrated FCM tokens and push-notification logic so that users and technicians receive timely payment or order updates. A specialized scheduling function scans Firestore for scheduled notifications, then sends them at the correct time. While this may not be strictly related to Stripe, it’s an essential part of delivering a cohesive mobile commerce experience.</p> <h2 id="payment-flow-in-a-nutshell">Payment Flow in a Nutshell</h2> <p>A typical in-app payment flow might look like this:</p> <ol> <li><strong>User Chooses Product</strong>: The user selects a product or a service in your app.</li> <li><strong>Backend Request</strong>: The mobile client calls your backend with product details (price, currency, etc.).</li> <li><strong>Server Creates PaymentIntent</strong>: The server uses the Stripe API to create a PaymentIntent with the desired amount and currency.</li> <li><strong>Ephemeral Key Generation</strong>: The server also retrieves or creates a Stripe <code class="language-plaintext highlighter-rouge">Customer</code> and returns an <a href="https://stripe.com/docs/api/ephemeral_keys">EphemeralKey</a> for the client’s current session.</li> <li><strong>Display Payment UI</strong>: Your app either uses Stripe’s native Payment Sheet or a custom card entry form.</li> <li><strong>Confirm Payment</strong>: The user enters payment details, Stripe processes them, and you receive a callback or webhook confirming success.</li> </ol> <h3 id="example-pseudocode-for-payment-creation">Example Pseudocode for Payment Creation</h3> <p>Below is a small snippet that reflects the approach I coded. On my backend, I store secrets as environment variables and then set up ephemeral keys accordingly:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">stripe</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">stripe</span><span class="dl">"</span><span class="p">)(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">STRIPE_SECRET_KEY</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">createPaymentIntent</span><span class="p">({</span> <span class="nx">amount</span><span class="p">,</span> <span class="nx">currency</span><span class="p">,</span> <span class="nx">customerId</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// Validate amounts and currency server-side</span>
  <span class="kd">const</span> <span class="nx">paymentIntent</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">paymentIntents</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
    <span class="na">amount</span><span class="p">:</span> <span class="nx">amount</span><span class="p">,</span> <span class="c1">// e.g., 999 for $9.99</span>
    <span class="na">currency</span><span class="p">:</span> <span class="nx">currency</span><span class="p">,</span> <span class="c1">// e.g., 'usd'</span>
    <span class="na">customer</span><span class="p">:</span> <span class="nx">customerId</span><span class="p">,</span> <span class="c1">// existing or newly created customer</span>
    <span class="na">payment_method_types</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="p">],</span>
    <span class="c1">// Additional configuration if needed</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">paymentIntent</span><span class="p">.</span><span class="nx">client_secret</span><span class="p">;</span> <span class="c1">// pass to the mobile app</span>
<span class="p">}</span>
</code></pre></div></div> <p>I typically wrap this in a Firebase Function or similar cloud function to securely interface with the mobile client. My real implementation also incorporates ephemeral key generation to allow dynamic updates to PaymentIntents from the client side, plus a few checks to ensure consistent currency and correct environment usage (test vs. production).</p> <h2 id="payouts-with-connected-accounts">Payouts with Connected Accounts</h2> <p>One advanced scenario is paying out to third parties—common in multi-vendor marketplaces or gig-economy apps. Stripe’s <a href="https://stripe.com/connect">Connect</a> flow allows you to:</p> <ol> <li>Create a <strong>connected account</strong> for each seller/technician.</li> <li>Collect payments from end customers.</li> <li>Programmatically distribute earnings to connected accounts.</li> </ol> <h3 id="example-flow">Example Flow</h3> <ul> <li><strong>User Orders a Service</strong>: Payment goes into your platform’s Stripe account.</li> <li><strong>Service Completed</strong>: The code calls <code class="language-plaintext highlighter-rouge">stripe.transfers.create()</code> or schedules future transfers to the connected account.</li> <li><strong>Notification</strong>: The user and service provider receive updates on transaction statuses.</li> </ul> <p>I wrote a back-end routine that:</p> <ol> <li>Confirms a PaymentIntent is successful.</li> <li>Looks up the relevant connected account.</li> <li>Schedules or processes a transfer to that connected account—sometimes with a short delay, giving me time for validation.</li> </ol> <p>A <em>simplified</em> version:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">transfers</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
  <span class="na">amount</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span> <span class="c1">// e.g., 2000 = $20.00</span>
  <span class="na">currency</span><span class="p">:</span> <span class="dl">"</span><span class="s2">usd</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">destination</span><span class="p">:</span> <span class="dl">"</span><span class="s2">acct_12345XYZ</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// The connected account ID</span>
<span class="p">});</span>
</code></pre></div></div> <p>Behind the scenes, it’s crucial to handle potential transfer failures, partial refunds, and edge cases like insufficient platform balance or incomplete KYC for the connected account. In my own code, I sometimes store these transfers in Firestore and run a scheduled function (Pub/Sub trigger) to finalize them once the funds fully settle.</p> <h2 id="implementation-nuances">Implementation Nuances</h2> <ol> <li><strong>Sensitive API Keys</strong>: Keep them strictly on the server side. Do not embed secret keys in mobile code.</li> <li><strong>Ephemeral Keys</strong>: They are short-lived. Renew them if a user session is extended or re-authenticated.</li> <li><strong>Webhooks</strong>: Stripe can push real-time event notifications (e.g., <code class="language-plaintext highlighter-rouge">payment_intent.succeeded</code>, <code class="language-plaintext highlighter-rouge">payment_intent.payment_failed</code>). Make sure to securely handle these events in your backend for accurate status updates.</li> <li><strong>Testing</strong>: Stripe’s sandbox environment with test card numbers is extremely helpful. Properly integrate test keys first, then pivot to live keys when you’re ready.</li> <li><strong>Multi-Environment Strategy</strong>: I maintain separate function entry points for test vs. production flows, ensuring that test transactions never pollute the real environment.</li> </ol> <h3 id="interfacing-with-firebase-and-flutter">Interfacing with Firebase and Flutter</h3> <p>On the Flutter side, I rely on the <code class="language-plaintext highlighter-rouge">flutter_stripe</code> plugin to present the payment sheet or a custom card field. Meanwhile, my Firebase Functions handle ephemeral key creation, PaymentIntent creation, and additional push logic. This pattern ensures the app remains lightweight, with all critical secrets and logic secured in the cloud.</p> <h2 id="conclusion">Conclusion</h2> <p>Stripe offers a powerful suite of payment APIs for mobile apps. Through PaymentIntents and ephemeral keys, you can securely accept one-time card payments, manage recurring billing, or even orchestrate multi-party payouts with Connect. The code I wrote for my own applications carefully orchestrates these building blocks—ensuring a frictionless user experience, robust error handling, and a secure payment pipeline.</p> <p>Whether you need a quick “pay now” button or a sophisticated marketplace system, Stripe remains a reliable choice for in-app transactions. By focusing on well-structured backend endpoints, ephemeral key generation, and thoughtful error handling, you can confidently deploy production-grade payment solutions. My own additions—like scheduling push notifications and building advanced logic for delayed payouts—further showcase how integrating Stripe can be extended to meet real-world business complexities. If you’re building a mobile commerce or gig-economy platform, Stripe is definitely worth a serious look.</p>]]></content><author><name></name></author><category term="mobile-commerce"/><category term="mobile"/><category term="flutter"/><category term="payments"/><category term="stripe"/><summary type="html"><![CDATA[A practical look at adding secure in-app payments and payouts with Stripe]]></summary></entry><entry><title type="html">Streamlining Network Calls with a Custom DioInstance</title><link href="https://t-mao.github.io/blog/2025/Network-Calls/" rel="alternate" type="text/html" title="Streamlining Network Calls with a Custom DioInstance"/><published>2025-02-12T10:00:00+00:00</published><updated>2025-02-12T10:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Network-Calls</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Network-Calls/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-480.webp 480w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-800.webp 800w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Network Calls" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building mobile apps, reliable HTTP networking is paramount. In the Dart/Flutter ecosystem, <a href="https://pub.dev/packages/dio">Dio</a> stands out as a robust library for HTTP requests. While you can quickly fire off GETs and POSTs with default configs, more complex applications benefit from a unified, reusable Dio instance (commonly referred to as <code class="language-plaintext highlighter-rouge">DioInstance</code>).</p> <p>I’ve personally coded and refined a custom <code class="language-plaintext highlighter-rouge">DioInstance</code> solution to handle everything from request logging and dynamic headers to file uploads. Below is an overview of the architectural choices that have proven invaluable for large-scale apps.</p> <hr/> <h2 id="why-a-single-dioinstance">Why a Single DioInstance?</h2> <p>Most production apps rely on consistent request configurations (headers, timeouts, interceptors, etc.). Creating a single shared <code class="language-plaintext highlighter-rouge">DioInstance</code> with these policies ensures:</p> <ol> <li><strong>Centralized Configuration:</strong> Modify base URL, timeouts, or content types in one place.</li> <li><strong>Global Interceptors:</strong> Cleanly integrate logic for logging, authentication tokens, or custom error handling.</li> <li><strong>Maintainability:</strong> Extending or changing behavior is straightforward—no need to replicate logic across multiple files.</li> </ol> <hr/> <h2 id="core-features">Core Features</h2> <p>In my own work, I structured the code to tackle several real-world concerns:</p> <ol> <li> <p><strong>Initialization &amp; Safety Checks</strong></p> <ul> <li>Enforce a single initialization step, so any subsequent method calls can rely on guaranteed defaults (like timeouts or base URLs).</li> <li>Throw meaningful exceptions if someone forgets to initialize.</li> </ul> </li> <li> <p><strong>HTTP Methods</strong></p> <ul> <li>Provide a set of convenience functions, e.g., <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">post()</code>, and <code class="language-plaintext highlighter-rouge">upload()</code>, each using custom options and interceptors under the hood.</li> <li>Support query parameters, form data, JSON bodies, or multipart uploads with minimal friction.</li> </ul> </li> <li> <p><strong>Interceptors</strong></p> <ul> <li><strong>Header/Token Interceptor</strong>: Attaches custom headers like tokens, language codes, or other user-specific fields.</li> <li><strong>Logging Interceptor</strong>: Prints requests/responses or sends them to a dedicated logger. This drastically simplifies debugging network issues.</li> <li><strong>Response Interceptor</strong>: Allows for uniform success/error handling. For instance, you can parse a known <code class="language-plaintext highlighter-rouge">code</code> field in the response JSON and throw an exception if it isn’t <code class="language-plaintext highlighter-rouge">200</code>.</li> </ul> </li> <li> <p><strong>File Upload</strong></p> <ul> <li>Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> with the local file path.</li> <li>Allows a universal code path for multi-file or single-file uploads.</li> </ul> </li> <li> <p><strong>Base URL Switching</strong></p> <ul> <li>Handy for toggling between dev, staging, and production servers without rewriting code.</li> </ul> </li> </ol> <hr/> <h2 id="a-condensed-example">A Condensed Example</h2> <p>Here’s an abbreviated version of my approach, demonstrating the main ideas:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:io'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:dio/dio.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">DioInstance</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="n">DioInstance</span><span class="o">?</span> <span class="n">_instance</span><span class="p">;</span>
  <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span> <span class="c1">// Private constructor</span>

  <span class="c1">// Public accessor for the singleton</span>
  <span class="kd">static</span> <span class="n">DioInstance</span> <span class="n">getInstance</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">_instance</span> <span class="o">??=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_instance</span><span class="o">!</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">late</span> <span class="n">Dio</span> <span class="n">_dio</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">initDio</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">baseUrl</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">connectTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">receiveTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">sendTimeout</span><span class="p">,</span>
    <span class="n">ResponseType</span> <span class="n">responseType</span> <span class="o">=</span> <span class="n">ResponseType</span><span class="o">.</span><span class="na">json</span><span class="p">,</span>
  <span class="p">})</span> <span class="p">{</span>
    <span class="n">_dio</span> <span class="o">=</span> <span class="n">Dio</span><span class="p">(</span><span class="n">BaseOptions</span><span class="p">(</span>
      <span class="nl">baseUrl:</span> <span class="n">baseUrl</span><span class="p">,</span>
      <span class="nl">connectTimeout:</span> <span class="n">connectTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">receiveTimeout:</span> <span class="n">receiveTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">sendTimeout:</span> <span class="n">sendTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">responseType:</span> <span class="n">responseType</span><span class="p">,</span>
    <span class="p">));</span>

    <span class="c1">// Custom interceptors (header, logging, response shaping)</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">interceptors</span><span class="o">.</span><span class="na">addAll</span><span class="p">([</span>
      <span class="n">_buildTokenInterceptor</span><span class="p">(),</span>
      <span class="n">_buildLogInterceptor</span><span class="p">(),</span>
      <span class="n">_buildResponseInterceptor</span><span class="p">(),</span>
    <span class="p">]);</span>

    <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// GET method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="kd">get</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">get</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// POST method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">post</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">dynamic</span> <span class="n">data</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">data</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// File upload</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">upload</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">required</span> <span class="n">File</span> <span class="n">file</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>

    <span class="kd">final</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span><span class="o">.</span><span class="na">last</span><span class="p">;</span>
    <span class="kd">final</span> <span class="n">formData</span> <span class="o">=</span> <span class="n">FormData</span><span class="o">.</span><span class="na">fromMap</span><span class="p">({</span>
      <span class="s">'file'</span><span class="o">:</span> <span class="k">await</span> <span class="n">MultipartFile</span><span class="o">.</span><span class="na">fromFile</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="p">,</span> <span class="nl">filename:</span> <span class="n">fileName</span><span class="p">),</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">formData</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span> <span class="o">??</span>
          <span class="n">Options</span><span class="p">(</span><span class="nl">contentType:</span> <span class="n">Headers</span><span class="o">.</span><span class="na">formUrlEncodedContentType</span><span class="p">),</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Example: change base URL on the fly</span>
  <span class="kt">void</span> <span class="n">changeBaseUrl</span><span class="p">(</span><span class="kt">String</span> <span class="n">newBaseUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">options</span><span class="o">.</span><span class="na">baseUrl</span> <span class="o">=</span> <span class="n">newBaseUrl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// --- Interceptors below ---</span>
  <span class="n">Interceptor</span> <span class="n">_buildTokenInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Insert token or language header here</span>
        <span class="c1">// options.headers["Authorization"] = "Bearer &lt;token&gt;";</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildLogInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&gt;&gt; [Dio] Request: </span><span class="si">${options.method}</span><span class="s"> </span><span class="si">${options.uri}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&lt;&lt; [Dio] Response [</span><span class="si">${response.statusCode}</span><span class="s">]: </span><span class="si">${response.data}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onError:</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"!! [Dio] Error: </span><span class="si">${err.error}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildResponseInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Example logic: parse for known "code" field</span>
        <span class="kd">final</span> <span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">data</span><span class="o">?</span><span class="p">[</span><span class="s">'code'</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">reject</span><span class="p">(</span>
            <span class="n">DioException</span><span class="p">(</span>
              <span class="nl">requestOptions:</span> <span class="n">response</span><span class="o">.</span><span class="na">requestOptions</span><span class="p">,</span>
              <span class="nl">message:</span> <span class="s">"Response error code: </span><span class="si">$code</span><span class="s">"</span><span class="p">,</span>
            <span class="p">),</span>
          <span class="p">);</span>
        <span class="p">}</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">_checkInitialized</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_initialized</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="n">StateError</span><span class="p">(</span><span class="s">"DioInstance not initialized. Call initDio() first."</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="highlights">Highlights</h3> <ul> <li><strong>Singleton Pattern</strong>: Prevents accidental creation of multiple <code class="language-plaintext highlighter-rouge">Dio</code> objects with mismatched settings.</li> <li><strong>Interceptors</strong>: A chain-based approach that injects tokens, logs, and interprets responses.</li> <li><strong>Structured File Upload</strong>: Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> so you don’t need to repeat this logic in every feature module.</li> </ul> <hr/> <h2 id="real-world-usage">Real-World Usage</h2> <p>Once initialized, the same object can handle any number of requests:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Step 1: One-time init</span>
<span class="kd">final</span> <span class="n">dioManager</span> <span class="o">=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">getInstance</span><span class="p">();</span>
<span class="n">dioManager</span><span class="o">.</span><span class="na">initDio</span><span class="p">(</span><span class="nl">baseUrl:</span> <span class="s">"https://api.myapp.com"</span><span class="p">);</span>

<span class="c1">// Step 2: GET example</span>
<span class="kd">final</span> <span class="n">listResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">get</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/items"</span><span class="p">,</span> <span class="nl">queryParams:</span> <span class="p">{</span><span class="s">"page"</span><span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
<span class="n">print</span><span class="p">(</span><span class="s">"Item list: </span><span class="si">${listResponse.data}</span><span class="s">"</span><span class="p">);</span>

<span class="c1">// Step 3: POST example</span>
<span class="kd">final</span> <span class="n">loginResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
  <span class="nl">path:</span> <span class="s">"/login"</span><span class="p">,</span>
  <span class="nl">data:</span> <span class="p">{</span><span class="s">"username"</span><span class="o">:</span> <span class="s">"jane"</span><span class="p">,</span> <span class="s">"password"</span><span class="o">:</span> <span class="s">"123456"</span><span class="p">},</span>
<span class="p">);</span>

<span class="c1">// Step 4: Upload example</span>
<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="s">"/some/path/to/image.jpg"</span><span class="p">);</span>
<span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">upload</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/upload/avatar"</span><span class="p">,</span> <span class="nl">file:</span> <span class="n">file</span><span class="p">);</span>
</code></pre></div></div> <p>No matter the HTTP method, everything goes through the same interceptors, ensuring consistent logs, header injection, and error handling.</p> <hr/> <h2 id="common-pitfalls">Common Pitfalls</h2> <ol> <li><strong>Omitting <code class="language-plaintext highlighter-rouge">initDio()</code></strong>: Always ensure your app calls it at startup, or you’ll risk exceptions from uninitialized objects.</li> <li><strong>Forgetting to Add Interceptors</strong>: Missed interceptors means losing global logging or token logic—your logs become silent, and your server might not get correct authentication headers.</li> <li><strong>Excessive Per-Call Options</strong>: Overriding too many fields each time (like <code class="language-plaintext highlighter-rouge">baseUrl</code>, timeouts, or contentType) leads to confusion. Keep them in the main initialization if possible.</li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>A well-structured <code class="language-plaintext highlighter-rouge">DioInstance</code> is a force multiplier in any serious mobile project. By centralizing initialization, interceptors, and request methods, you gain more consistent code, simpler debugging, and a clear separation of concerns. The snippet above is pulled directly from code I’ve developed and iterated on for real-world apps, demonstrating how a single network class can handle everything from JSON-based requests to file transfers.</p> <p>Whether you’re building a small personal app or a large-scale production system, customizing your own <code class="language-plaintext highlighter-rouge">DioInstance</code> ensures your network layer remains cohesive, maintainable, and easy to extend.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="http"/><category term="networking"/><summary type="html"><![CDATA[A deep dive into building a refined Dio setup for mobile apps]]></summary></entry><entry><title type="html">Harnessing RSA Encryption in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/RSA-Encryption/" rel="alternate" type="text/html" title="Harnessing RSA Encryption in Mobile Apps"/><published>2025-02-05T09:00:00+00:00</published><updated>2025-02-05T09:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/RSA-Encryption</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/RSA-Encryption/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-480.webp 480w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-800.webp 800w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="RSA" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As modern applications handle increasingly sensitive data, robust security measures become paramount. One common, time-tested approach to safeguarding data is RSA encryption. Within the context of mobile app development, RSA proves invaluable for securing user credentials, passwords, or any piece of confidential data that traverses potentially insecure networks.</p> <h2 id="rsa-overview">RSA Overview</h2> <p>RSA (Rivest–Shamir–Adleman) is an asymmetric cryptographic algorithm. Instead of relying on one shared key (as in symmetric encryption), it uses a pair of keys:</p> <ul> <li><strong>Public Key:</strong> Used for encryption. Typically shared with anyone who needs to send encrypted data.</li> <li><strong>Private Key:</strong> Used for decryption. Kept absolutely secure and never shared.</li> </ul> <p>The essential advantage in app development is that you can freely distribute your public key in your mobile application to encrypt user-submitted data (e.g., password fields during registration), while the private key (on your server or a secure service) safely decrypts incoming messages.</p> <h2 id="key-points-for-mobile-developers">Key Points for Mobile Developers</h2> <ol> <li><strong>Key Storage:</strong> The public key can be embedded into the app or fetched from a secure endpoint. The private key must remain on a secure server or hardware security module (HSM).</li> <li><strong>Performance Considerations:</strong> RSA encryption is computationally heavier than symmetric algorithms (like AES). Typically, developers use RSA to transmit session keys or sensitive short strings (like credentials), then switch to faster symmetric encryption for ongoing data exchange.</li> <li><strong>Security Best Practices:</strong> Always validate certificate chains, use well-maintained cryptographic libraries, keep libraries up-to-date, and follow platform security guidelines (e.g., Android Keystore, iOS Keychain).</li> </ol> <h2 id="practical-implementation">Practical Implementation</h2> <p>Below is a Dart-based example I developed focusing on an RSA-based encryption utility (<code class="language-plaintext highlighter-rouge">RsaEncrypt</code>). This snippet demonstrates encrypting plaintext (a password, for instance) using a public key. Once encrypted, the resulting ciphertext can safely traverse the network to the backend, where only the corresponding private key can decrypt it.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:developer'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:app_utils/utils/environments.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:encrypt/encrypt.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:pointycastle/asymmetric/api.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">RsaEncrypt</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kt">String</span> <span class="n">encryptString</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">plainText</span><span class="p">})</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔐 Starting RSA encryption...'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">publicKey</span> <span class="o">=</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="n">Environments</span><span class="o">.</span><span class="na">getPublicKeyString</span><span class="p">());</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔑 Public key parsed successfully'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">encryptedText</span> <span class="o">=</span> <span class="n">Encrypter</span><span class="p">(</span><span class="n">RSA</span><span class="p">(</span><span class="nl">publicKey:</span> <span class="n">publicKey</span><span class="p">))</span><span class="o">.</span><span class="na">encrypt</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔒 Encryption complete'</span><span class="p">);</span>

    <span class="c1">// Debug prints</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext End_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext End_________________"</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">/// Parse a public key from PEM format</span>
  <span class="kd">static</span> <span class="n">RSAPublicKey</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="kt">String</span> <span class="n">pemString</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">RSAKeyParser</span><span class="p">();</span>
    <span class="kd">final</span> <span class="n">key</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="n">pemString</span><span class="o">.</span><span class="na">trim</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">key</span> <span class="k">as</span> <span class="n">RSAPublicKey</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="example-flow-in-a-registration-screen">Example Flow in a Registration Screen</h3> <p>In one of my mobile apps, I integrated RSA into the user registration form. During the final “Create Account” step:</p> <ol> <li><strong>Extract User Input</strong>: Collect the email, password, and other sensitive fields from text controllers.</li> <li><strong>Encrypt with RSA</strong>: Call the <code class="language-plaintext highlighter-rouge">encryptString()</code> method before sending them out to the API.</li> <li><strong>Transmit</strong>: Post the encrypted ciphertext to the server via HTTPS.</li> <li><strong>Server Decryption</strong>: The server (holding the private key) decrypts the data and proceeds with user creation.</li> </ol> <p>Below is a simplified excerpt of a Flutter widget illustrating how RSA encryption might slot into a password-handling flow:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Simplified snippet from CreateAccountPageWidget</span>
<span class="kt">String</span> <span class="n">encryptedPassword</span> <span class="o">=</span> <span class="n">RsaEncrypt</span><span class="o">.</span><span class="na">encryptString</span><span class="p">(</span>
  <span class="nl">plainText:</span> <span class="n">_model</span><span class="o">.</span><span class="na">passwordTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
<span class="p">);</span>

<span class="c1">// Send to server using an authenticated endpoint</span>
<span class="kd">final</span> <span class="n">userRegisterData</span> <span class="o">=</span> <span class="k">await</span> <span class="n">ApiAuth</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">userRegister</span><span class="p">(</span>
  <span class="nl">email:</span> <span class="n">_model</span><span class="o">.</span><span class="na">emailTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
  <span class="nl">password:</span> <span class="n">encryptedPassword</span><span class="p">,</span>
  <span class="c1">// ...</span>
<span class="p">);</span>
</code></pre></div></div> <p>Using RSA for this crucial step helps ensure that a user’s password or other sensitive information is never sent as raw plaintext. While HTTPS adds transport-layer security, layering RSA can add an additional control or help meet certain compliance scenarios where end-to-end encryption is mandated.</p> <h2 id="additional-tips">Additional Tips</h2> <ol> <li><strong>Use Trusted Libraries</strong>: Handling cryptography manually is risky. Established libraries such as <code class="language-plaintext highlighter-rouge">encrypt</code> (Dart), OpenSSL (C/C++), or platform-specific APIs (Android’s <code class="language-plaintext highlighter-rouge">Cipher</code>, iOS’s <code class="language-plaintext highlighter-rouge">SecKey</code>) reduce risk and handle behind-the-scenes complexities.</li> <li><strong>Size Limitations</strong>: RSA encrypts data in chunks. Keep the plaintext size relatively small or implement a hybrid approach (RSA to protect an AES key, then AES for bulk encryption).</li> <li><strong>Logging</strong>: Notice the debug logs above—though useful for development, they must be removed or redacted in production environments to avoid leaking sensitive info.</li> </ol> <h2 id="conclusion">Conclusion</h2> <p>Implementing RSA in your mobile application can raise the security bar significantly, especially for user onboarding flows, login credentials, and other delicate transactions. My approach involves carefully parsing a PEM-encoded public key, encrypting short strings client-side, and ensuring the corresponding decryption is handled by a protected private key on the backend.</p> <p>In app development contexts, adopting robust cryptographic primitives like RSA indicates a refined understanding of security—something potential employers and clients appreciate. Coupled with efficient coding patterns and best-practice key management, this method protects user information against prying eyes throughout the data’s journey.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="security"/><category term="cryptography"/><summary type="html"><![CDATA[A closer look at RSA cryptography and its practical implementation in app development]]></summary></entry><entry><title type="html">Leveraging Push Notifications in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Push-Notifications/" rel="alternate" type="text/html" title="Leveraging Push Notifications in Mobile Apps"/><published>2025-01-06T17:45:00+00:00</published><updated>2025-01-06T17:45:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Push-Notifications</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Push-Notifications/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-480.webp 480w,https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-800.webp 800w,https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Push Notifications" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Push notifications can make or break the user experience in a mobile application. They handle everything from real-time updates (such as incoming messages in a chat) to sophisticated scheduling (like nudging users to revisit an order that has gone idle). Over the years, I’ve built robust push notification features in multiple production applications, ensuring reliability and a seamless user experience.</p> <p>Below, I’ll outline the typical architectural pieces I consider when implementing push notifications in both iOS and Android environments—using a serverless backend, custom message channels, and at times advanced scheduling logic.</p> <hr/> <h2 id="why-push-notifications-matter">Why Push Notifications Matter</h2> <ul> <li><strong>Real-Time Engagement</strong>: If you run any form of commerce or on-demand service, push alerts keep users informed the moment a new request or status update hits.</li> <li><strong>Increased Conversion</strong>: Well-targeted notifications can drive users back to your app, boosting usage and retention.</li> <li><strong>Operational Efficiency</strong>: For internal apps (such as technician or driver apps), push notifications can inform staff of new tasks, ensuring minimal response time.</li> </ul> <hr/> <h2 id="backend-and-cloud-function-triggers">Backend and Cloud Function Triggers</h2> <p>My typical implementation uses a serverless architecture (e.g., Firebase Functions or AWS Lambda) to handle the following steps:</p> <ol> <li><strong>Message Creation</strong>: A new chat message or system event triggers a write to a database collection (e.g., Firestore).</li> <li><strong>Function Trigger</strong>: A function runs automatically on database updates. That function: <ul> <li>Parses the newly inserted data.</li> <li>Determines the correct recipients (e.g., user vs. admin vs. staff).</li> <li>Sends push messages only to relevant device tokens.</li> </ul> </li> <li><strong>Token Management</strong>: Each user may have multiple FCM tokens, one for each device. My code ensures tokens are stored and pruned if they become invalid.</li> </ol> <p>Below is a simplified version of a Node.js Cloud Function that sends out a message whenever a user submits a new chat message. This code pattern can be generalized for other events:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">functions</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">firebase-functions</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">firebase-admin</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">admin</span><span class="p">.</span><span class="nf">initializeApp</span><span class="p">();</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">notifyOnNewChatMessage</span> <span class="o">=</span> <span class="nx">functions</span><span class="p">.</span><span class="nx">firestore</span><span class="p">.</span><span class="nf">document</span><span class="p">(</span><span class="dl">"</span><span class="s2">chats/{chatId}/messages/{messageId}</span><span class="dl">"</span><span class="p">).</span><span class="nf">onCreate</span><span class="p">(</span><span class="k">async </span><span class="p">(</span><span class="nx">snapshot</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">messageData</span> <span class="o">=</span> <span class="nx">snapshot</span><span class="p">.</span><span class="nf">data</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">senderUid</span> <span class="o">=</span> <span class="nx">messageData</span><span class="p">.</span><span class="nx">senderUid</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">messageData</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>

    <span class="c1">// Retrieve the conversation details or intended recipient</span>
    <span class="c1">// For example, look up participant IDs in Firestore</span>
    <span class="kd">const</span> <span class="nx">chatRef</span> <span class="o">=</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">firestore</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">chats</span><span class="dl">"</span><span class="p">).</span><span class="nf">doc</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">chatId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chatDoc</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">chatRef</span><span class="p">.</span><span class="nf">get</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">participantUids</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">chatDoc</span><span class="p">.</span><span class="nf">data</span><span class="p">()</span> <span class="o">||</span> <span class="p">{};</span>

    <span class="c1">// Filter out the sender's own UID</span>
    <span class="kd">const</span> <span class="nx">targetUids</span> <span class="o">=</span> <span class="nx">participantUids</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">uid</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">uid</span> <span class="o">!==</span> <span class="nx">senderUid</span><span class="p">);</span>

    <span class="c1">// Collect FCM tokens for all recipients</span>
    <span class="kd">let</span> <span class="nx">tokens</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">uid</span> <span class="k">of</span> <span class="nx">targetUids</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tokenSnapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">firestore</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">users</span><span class="dl">"</span><span class="p">).</span><span class="nf">doc</span><span class="p">(</span><span class="nx">uid</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">fcm_tokens</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">();</span>
      <span class="nx">tokenSnapshot</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">doc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">fcmToken</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">data</span><span class="p">().</span><span class="nx">fcm_token</span><span class="p">;</span>
        <span class="nx">tokens</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">fcmToken</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">No tokens found, skipping push.</span><span class="dl">"</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Construct the notification message</span>
    <span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">notification</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">New Message</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">text</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">You have a new chat message!</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Possibly define custom key-value pairs for deep linking</span>
        <span class="na">chatId</span><span class="p">:</span> <span class="nx">context</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">chatId</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="c1">// Send to all tokens in batches</span>
    <span class="kd">const</span> <span class="nx">batchResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">messaging</span><span class="p">().</span><span class="nf">sendToDevice</span><span class="p">(</span><span class="nx">tokens</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Push notification sent</span><span class="dl">"</span><span class="p">,</span> <span class="nx">batchResponse</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error sending notification:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="scheduling-and-delayed-notifications">Scheduling and Delayed Notifications</h3> <p>If you need delayed messages—for example, automatically reminding a user after 3 days of inactivity— you can store a <code class="language-plaintext highlighter-rouge">scheduled_time</code> field in your database. A separate scheduled function (e.g., a cron-like Pub/Sub job) queries for “to-be-delivered” notifications. Once the time is right, the function sends them out.</p> <hr/> <h2 id="app-side-setup">App-Side Setup</h2> <p>On the mobile side, you typically need to:</p> <ol> <li><strong>Request Permission</strong>: iOS requires prompting the user for notification permissions. On Android 13+, you need <a href="https://developer.android.com/develop/ui/views/notifications#permissions"><code class="language-plaintext highlighter-rouge">POST_NOTIFICATIONS</code></a> permission as well.</li> <li><strong>Establish Notification Channels (Android)</strong>: For high-importance notifications, create channels so your push messages appear with the correct sound/priority.</li> <li><strong>Register for Tokens</strong>: Once the app is up, request the FCM token. If it changes (e.g., user reinstalled the app), re-register the new token on the backend.</li> <li><strong>Foreground Notification Handling</strong>: Decide how you show a message if it arrives while the user is actively using the app. On Android, you can rely on local notifications for that if you want a system tray icon to appear.</li> </ol> <p>Here’s a minimal Kotlin snippet for setting up a notification channel in an Android <code class="language-plaintext highlighter-rouge">Activity</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION</span><span class="p">.</span><span class="nc">SDK_INT</span> <span class="p">&gt;=</span> <span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION_CODES</span><span class="p">.</span><span class="nc">O</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">val</span> <span class="py">channelId</span> <span class="p">=</span> <span class="s">"high_importance_channel"</span>
            <span class="kd">val</span> <span class="py">channelName</span> <span class="p">=</span> <span class="s">"High Importance Notifications"</span>
            <span class="kd">val</span> <span class="py">channelDescription</span> <span class="p">=</span> <span class="s">"Used for urgent messages"</span>
            <span class="kd">val</span> <span class="py">importance</span> <span class="p">=</span> <span class="nc">NotificationManager</span><span class="p">.</span><span class="nc">IMPORTANCE_HIGH</span>
            <span class="kd">val</span> <span class="py">channel</span> <span class="p">=</span> <span class="nc">NotificationChannel</span><span class="p">(</span><span class="n">channelId</span><span class="p">,</span> <span class="n">channelName</span><span class="p">,</span> <span class="n">importance</span><span class="p">).</span><span class="nf">apply</span> <span class="p">{</span>
                <span class="n">description</span> <span class="p">=</span> <span class="n">channelDescription</span>
            <span class="p">}</span>
            <span class="kd">val</span> <span class="py">notificationManager</span> <span class="p">=</span> <span class="nf">getSystemService</span><span class="p">(</span><span class="nc">NotificationManager</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>
            <span class="n">notificationManager</span><span class="o">?.</span><span class="nf">createNotificationChannel</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="c1">// Other onCreate logic, e.g. setContentView(...)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>When it comes to iOS, you’d create a similar channel concept in Xcode by setting up categories or using local notifications in tandem with push. Then register an <code class="language-plaintext highlighter-rouge">UNUserNotificationCenterDelegate</code> to handle how foreground notifications are displayed.</p> <hr/> <h2 id="edge-cases-and-advice">Edge Cases and Advice</h2> <ol> <li><strong>Token Rotation</strong>: Users can lose or regain tokens at any time. Make sure your backend cleans up invalid tokens after each message send.</li> <li><strong>Foreground vs. Background</strong>: In the foreground, you might show custom in-app alerts. In the background, rely on system notifications.</li> <li><strong>Payload Size</strong>: Some push services limit payload to around 4KB. If you must send extra data, place it in your DB and embed only references or IDs in your push payload.</li> <li><strong>Localization</strong>: If your app spans multiple regions, prepare the push text in localized form or dynamically fetch translations from your backend.</li> <li><strong>Scheduled vs. Instant</strong>: Real-time pushes are straightforward, but scheduling them can be more elaborate. Timers or cron tasks in your serverless environment are the typical approach.</li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Push notifications are a crucial part of modern mobile app development. They bridge the gap between user engagement and real-time updates. Over time, I’ve implemented solutions that:</p> <ul> <li>Use serverless triggers (Firebase Functions, etc.) to isolate push logic.</li> <li>Maintain token sets for each user device.</li> <li>Provide flexible channels on Android with <code class="language-plaintext highlighter-rouge">IMPORTANCE_HIGH</code> for critical messages.</li> <li>Support advanced scheduling for any “reminder” use cases.</li> </ul> <p>By combining these strategies, your app can deliver reliable notifications that users find actually useful—boosting your overall user satisfaction and internal efficiency.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="notifications"/><category term="fcm"/><summary type="html"><![CDATA[Techniques for implementing push notifications across iOS and Android, including scheduling, message routing, and handling deep links]]></summary></entry><entry><title type="html">Embedding AI Chat in Your Mobile App</title><link href="https://t-mao.github.io/blog/2024/AI/" rel="alternate" type="text/html" title="Embedding AI Chat in Your Mobile App"/><published>2024-12-19T13:42:00+00:00</published><updated>2024-12-19T13:42:00+00:00</updated><id>https://t-mao.github.io/blog/2024/AI</id><content type="html" xml:base="https://t-mao.github.io/blog/2024/AI/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://c02.purpledshub.com/uploads/sites/41/2023/06/best-ai-chatbots.jpg?w=1029&amp;webp=1" sizes="95vw"/> <img src="https://c02.purpledshub.com/uploads/sites/41/2023/06/best-ai-chatbots.jpg?w=1029&amp;webp=1" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="AI" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>AI-powered chat is fast becoming a core component of modern mobile apps—from interactive help bots to self-service repair assistants. This post explores how you might incorporate a ChatGPT-like system directly in your Flutter-based mobile client, handle input/output flows, and maintain a seamless user experience.</p> <hr/> <h2 id="planning-the-architecture">Planning the Architecture</h2> <ol> <li> <p><strong>Frontend</strong></p> <ul> <li><strong>Flutter UI</strong>: You typically want a scrollable conversation window with user messages on one side, AI responses on the other.</li> <li><strong>Local Chat State</strong>: Use a local list of messages to instantly display user input. When an AI response arrives from the server (or the external AI API), append it to the list.</li> </ul> </li> <li> <p><strong>Backend</strong></p> <ul> <li><strong>API Endpoints</strong>: These forward user messages to the AI service (e.g., OpenAI’s API).</li> <li><strong>Authentication &amp; Rate Limits</strong>: Protect your endpoint from unauthorized usage, especially important if you maintain an enterprise-level or paid usage environment.</li> </ul> </li> <li> <p><strong>AI Integration</strong></p> <ul> <li><strong>API Calls</strong>: Typically an HTTPS POST with a JSON body specifying the user’s prompt, along with system prompts.</li> <li><strong>Prompt Engineering</strong>: A hidden “system prompt” shapes how the AI responds, ensuring it uses the correct style, language, or domain-specific logic.</li> </ul> </li> </ol> <hr/> <h2 id="key-ui-workflow">Key UI Workflow</h2> <p>Below is a simplified Flutter widget that manages the AI chat interface. (Note that I wrote a more extensive version for my real application, but this snippet should illustrate the main logic.)</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">AiChatPage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">AiChatPage</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">AiChatPage</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_AiChatPageState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_AiChatPageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">AiChatPage</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">_messageController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
  <span class="kd">final</span> <span class="n">ScrollController</span> <span class="n">_scrollController</span> <span class="o">=</span> <span class="n">ScrollController</span><span class="p">();</span>

  <span class="c1">/// A local list of conversation messages, each is either from "user" or "assistant".</span>
  <span class="kt">List</span><span class="p">&lt;</span><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;&gt;</span> <span class="n">_chatHistory</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="c1">// Optionally preload a greeting</span>
    <span class="n">_chatHistory</span><span class="o">.</span><span class="na">add</span><span class="p">({</span>
      <span class="s">"role"</span><span class="o">:</span> <span class="s">"assistant"</span><span class="p">,</span>
      <span class="s">"content"</span><span class="o">:</span> <span class="s">"Hi there! I'm your AI assistant. How can I help?"</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">dispose</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">_messageController</span><span class="o">.</span><span class="na">dispose</span><span class="p">();</span>
    <span class="n">_scrollController</span><span class="o">.</span><span class="na">dispose</span><span class="p">();</span>
    <span class="k">super</span><span class="o">.</span><span class="na">dispose</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_sendUserMessage</span><span class="p">(</span><span class="kt">String</span> <span class="n">text</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// 1) Immediately display user’s input</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_chatHistory</span><span class="o">.</span><span class="na">add</span><span class="p">({</span><span class="s">"role"</span><span class="o">:</span> <span class="s">"user"</span><span class="p">,</span> <span class="s">"content"</span><span class="o">:</span> <span class="n">text</span><span class="p">});</span>
    <span class="p">});</span>
    <span class="n">_messageController</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>

    <span class="c1">// 2) Make call to your backend or directly to an AI API</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">final</span> <span class="n">aiResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">_fakeSendToOpenAI</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
      <span class="c1">// 3) Append AI reply</span>
      <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
        <span class="n">_chatHistory</span><span class="o">.</span><span class="na">add</span><span class="p">({</span><span class="s">"role"</span><span class="o">:</span> <span class="s">"assistant"</span><span class="p">,</span> <span class="s">"content"</span><span class="o">:</span> <span class="n">aiResponse</span><span class="p">});</span>
      <span class="p">});</span>
      <span class="c1">// 4) Scroll to bottom</span>
      <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="p">(</span><span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="mi">500</span><span class="p">),</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">_scrollController</span><span class="o">.</span><span class="na">animateTo</span><span class="p">(</span>
          <span class="n">_scrollController</span><span class="o">.</span><span class="na">position</span><span class="o">.</span><span class="na">maxScrollExtent</span><span class="p">,</span>
          <span class="nl">duration:</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="mi">400</span><span class="p">),</span>
          <span class="nl">curve:</span> <span class="n">Curves</span><span class="o">.</span><span class="na">easeOut</span><span class="p">,</span>
        <span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Show error message</span>
      <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
        <span class="n">_chatHistory</span><span class="o">.</span><span class="na">add</span><span class="p">({</span>
          <span class="s">"role"</span><span class="o">:</span> <span class="s">"assistant"</span><span class="p">,</span>
          <span class="s">"content"</span><span class="o">:</span> <span class="s">"Something went wrong. Please try again later."</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Stub method simulating an AI call</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span> <span class="n">_fakeSendToOpenAI</span><span class="p">(</span><span class="kt">String</span> <span class="n">prompt</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="k">await</span> <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="p">(</span><span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">1</span><span class="p">));</span>
    <span class="k">return</span> <span class="s">"Here's my AI-based analysis for: '</span><span class="si">$prompt</span><span class="s">' 🤖"</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">Widget</span> <span class="n">_buildChatBubble</span><span class="p">(</span><span class="kt">String</span> <span class="n">content</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isUser</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Align</span><span class="p">(</span>
      <span class="nl">alignment:</span> <span class="n">isUser</span> <span class="o">?</span> <span class="n">Alignment</span><span class="o">.</span><span class="na">centerRight</span> <span class="o">:</span> <span class="n">Alignment</span><span class="o">.</span><span class="na">centerLeft</span><span class="p">,</span>
      <span class="nl">child:</span> <span class="n">Container</span><span class="p">(</span>
        <span class="nl">margin:</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">symmetric</span><span class="p">(</span><span class="nl">vertical:</span> <span class="mi">6</span><span class="p">,</span> <span class="nl">horizontal:</span> <span class="mi">12</span><span class="p">),</span>
        <span class="nl">padding:</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
        <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
          <span class="nl">color:</span> <span class="n">isUser</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">shade100</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">grey</span><span class="o">.</span><span class="na">shade200</span><span class="p">,</span>
          <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="n">content</span><span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
        <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"AI Chat"</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Expanded</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">ListView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
              <span class="nl">controller:</span> <span class="n">_scrollController</span><span class="p">,</span>
              <span class="nl">itemCount:</span> <span class="n">_chatHistory</span><span class="o">.</span><span class="na">length</span><span class="p">,</span>
              <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">final</span> <span class="n">message</span> <span class="o">=</span> <span class="n">_chatHistory</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
                <span class="kd">final</span> <span class="n">isUser</span> <span class="o">=</span> <span class="n">message</span><span class="p">[</span><span class="s">"role"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"user"</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">_buildChatBubble</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s">"content"</span><span class="p">]</span> <span class="o">??</span> <span class="s">""</span><span class="p">,</span> <span class="n">isUser</span><span class="p">);</span>
              <span class="p">},</span>
            <span class="p">),</span>
          <span class="p">),</span>
          <span class="n">SafeArea</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">Padding</span><span class="p">(</span>
              <span class="nl">padding:</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">symmetric</span><span class="p">(</span><span class="nl">horizontal:</span> <span class="mi">8</span><span class="p">,</span> <span class="nl">vertical:</span> <span class="mi">4</span><span class="p">),</span>
              <span class="nl">child:</span> <span class="n">Row</span><span class="p">(</span>
                <span class="nl">children:</span> <span class="p">[</span>
                  <span class="n">Expanded</span><span class="p">(</span>
                    <span class="nl">child:</span> <span class="n">TextField</span><span class="p">(</span>
                      <span class="nl">controller:</span> <span class="n">_messageController</span><span class="p">,</span>
                      <span class="nl">textInputAction:</span> <span class="n">TextInputAction</span><span class="o">.</span><span class="na">send</span><span class="p">,</span>
                      <span class="nl">onSubmitted:</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_sendUserMessage</span><span class="p">(</span><span class="n">value</span><span class="p">),</span>
                      <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span><span class="nl">hintText:</span> <span class="s">"Type message..."</span><span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">),</span>
                  <span class="n">IconButton</span><span class="p">(</span>
                    <span class="nl">icon:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">send</span><span class="p">),</span>
                    <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
                      <span class="n">_sendUserMessage</span><span class="p">(</span><span class="n">_messageController</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">trim</span><span class="p">());</span>
                    <span class="p">},</span>
                  <span class="p">),</span>
                <span class="p">],</span>
              <span class="p">),</span>
            <span class="p">),</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Notable Considerations</strong>:</p> <ul> <li>We keep <code class="language-plaintext highlighter-rouge">_chatHistory</code> in memory. Large or persistent conversation logs might require local database storage or server-side session tokens.</li> <li><code class="language-plaintext highlighter-rouge">ScrollController</code> to auto-scroll to the bottom upon receiving a new AI response.</li> </ul> <hr/> <h2 id="prompt-engineering">Prompt Engineering</h2> <p>One of the biggest differences between standard REST calls and AI calls is the <strong>prompt</strong>. You may include:</p> <ul> <li>A <strong>system</strong> or <strong>assistant</strong> role message that sets style or domain constraints (e.g., “You are a friendly repair bot, please help the user diagnose issues…”).</li> <li>The <strong>user</strong> message with the actual question or instructions.</li> <li>Additional context or metadata that your AI uses to tailor the reply.</li> </ul> <p>In my production code, I embed a hidden “system prompt” that ensures the chatbot always maintains a consistent style—like a helpful home-appliance troubleshooting bot. This is stored server-side or built into the request body.</p> <hr/> <h2 id="ai-integration-strategy">AI Integration Strategy</h2> <h3 id="option-1-direct-calls-in-the-client">Option 1: Direct Calls in the Client</h3> <p>You can integrate an API key directly in your Flutter code and send requests from the user’s device. However, this approach risks exposing your API key. It’s simpler for development but risky for production.</p> <h3 id="option-2-custom-backend-proxy">Option 2: Custom Backend Proxy</h3> <p>A more secure option is to have your mobile client send messages to <strong>your own backend</strong>. The backend then:</p> <ol> <li>Assembles the prompt (including hidden system text).</li> <li>Calls the AI provider API using your private key.</li> <li>Sends back the AI’s response to the client.</li> </ol> <p>This approach offers more control (e.g., rate limiting, monitoring usage, adjusting system prompts) while keeping your keys private.</p> <hr/> <h2 id="post-processing-ai-replies">Post-Processing AI Replies</h2> <p>AI models sometimes return partial or poorly formatted content. In my code, for instance, I do extra steps:</p> <ul> <li><strong>Markdown Stripping</strong>: If the model returns code blocks or bold text, you can parse or remove them before display.</li> <li><strong>Filtering</strong>: Redact user-sensitive content if needed.</li> <li><strong>Truncation</strong>: If the model is too verbose, you can cut off extra tokens or lines.</li> </ul> <p>I also add logic for “role: system” vs. “role: user” vs. “role: assistant” to reflect the conversation state (e.g., color-coded messages).</p> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Embedding an AI chat within a mobile app demands thoughtful planning: you must handle local conversation states, secure your API keys, define robust system prompts, and gracefully manage user interactions. The payoff is an app with dynamic, context-aware assistance—whether for tech support, triaging repairs, or just providing an engaging user experience. Once you start hooking up an AI model, you’ll see immediate benefits in user satisfaction and discover new ways to streamline features like advanced Q&amp;A, troubleshooting flows, or product recommendation dialogs.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="ai"/><category term="chat"/><summary type="html"><![CDATA[An overview of integrating AI-driven conversation features inside a mobile client]]></summary></entry><entry><title type="html">Automatically Keeping Users Logged In on Mobile</title><link href="https://t-mao.github.io/blog/2024/Keeping-Users-Logged-In/" rel="alternate" type="text/html" title="Automatically Keeping Users Logged In on Mobile"/><published>2024-12-05T16:00:00+00:00</published><updated>2024-12-05T16:00:00+00:00</updated><id>https://t-mao.github.io/blog/2024/Keeping-Users-Logged-In</id><content type="html" xml:base="https://t-mao.github.io/blog/2024/Keeping-Users-Logged-In/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://rublon.com/wp-content/uploads/2023/08/MFA-login-for-privileged-access-1024x584-480.webp 480w,https://rublon.com/wp-content/uploads/2023/08/MFA-login-for-privileged-access-1024x584-800.webp 800w,https://rublon.com/wp-content/uploads/2023/08/MFA-login-for-privileged-access-1024x584-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://rublon.com/wp-content/uploads/2023/08/MFA-login-for-privileged-access-1024x584.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Keeping Users Logged In" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Modern mobile applications often require persistent user authentication. In other words, once the user logs in, they should remain authenticated across app restarts—without needing to re-enter credentials each time. Below, I’ll discuss how I build an “auto-login” feature, including some best practices around tokens, local storage, and secure checks.</p> <hr/> <h2 id="the-business-logic">The Business Logic</h2> <h3 id="token-based-authentication">Token-Based Authentication</h3> <p>When a user logs in, the server returns an authentication token (e.g., a JWT or a session token). Typically:</p> <ol> <li><strong>Login</strong>: User submits email/password to a secure API endpoint.</li> <li><strong>Token Issuance</strong>: Server responds with a short-lived token and (in some cases) a refresh token.</li> <li><strong>Storage</strong>: The app persists these credentials in local storage (e.g., Keychain on iOS, Keystore on Android, or a library such as <code class="language-plaintext highlighter-rouge">flutter_secure_storage</code> in Flutter).</li> <li><strong>Auto-Login</strong>: On each app launch, the application reads these tokens from storage and checks validity, possibly refreshing them if needed.</li> </ol> <p>If the tokens are valid, we skip the sign-in screen; otherwise, the app requires new credentials.</p> <h3 id="architectural-overview">Architectural Overview</h3> <ul> <li><strong>Network Layer</strong>: Responsible for injecting the stored token into every outgoing request (e.g., using an interceptor).</li> <li><strong>State Manager</strong>: Tracks if the user is logged in. If tokens are missing or expired, we prompt for login.</li> <li><strong>Token Renewal</strong>: Optionally handle silent token refresh behind the scenes if the server supports that.</li> </ul> <p>One important detail is to <strong>never</strong> hardcode your secret keys in the client, and always use SSL/TLS to prevent man-in-the-middle attacks.</p> <hr/> <h2 id="example-code-snippet-flutter-dart">Example Code Snippet (Flutter-Dart)</h2> <p>Below is a <strong>condensed</strong> snippet showing the typical flow: reading an existing token, calling an API to check if it’s valid, and storing user info in your model. This is adapted from an internal codebase I wrote (and I’ve expanded or refined it to illustrate best practices). The actual production version is more extensive.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:shared_preferences/shared_preferences.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'my_auth_api.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">AuthService</span> <span class="p">{</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">checkAutoLogin</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">prefs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">getInstance</span><span class="p">();</span>
    <span class="kd">final</span> <span class="n">storedToken</span> <span class="o">=</span> <span class="n">prefs</span><span class="o">.</span><span class="na">getString</span><span class="p">(</span><span class="s">'app_token'</span><span class="p">)</span> <span class="o">??</span> <span class="s">''</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">storedToken</span><span class="o">.</span><span class="na">isEmpty</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// no token found</span>
    <span class="p">}</span>

    <span class="c1">// Attempt to verify or refresh the token</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kt">bool</span> <span class="n">valid</span> <span class="o">=</span> <span class="k">await</span> <span class="n">MyAuthApi</span><span class="o">.</span><span class="na">checkIsLogin</span><span class="p">(</span><span class="n">storedToken</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// token is invalid =&gt; force re-login</span>
        <span class="k">await</span> <span class="n">prefs</span><span class="o">.</span><span class="na">remove</span><span class="p">(</span><span class="s">'app_token'</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// fetch user info to keep things updated</span>
        <span class="kd">final</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="k">await</span> <span class="n">MyAuthApi</span><span class="o">.</span><span class="na">getUserInfo</span><span class="p">(</span><span class="n">storedToken</span><span class="p">);</span>
        <span class="c1">// store user info in memory, e.g., global singleton or provider</span>
        <span class="c1">// ...</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// in case of network error or server error</span>
      <span class="k">await</span> <span class="n">prefs</span><span class="o">.</span><span class="na">remove</span><span class="p">(</span><span class="s">'app_token'</span><span class="p">);</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ol> <li><strong>SharedPreferences</strong>: This snippet uses <code class="language-plaintext highlighter-rouge">SharedPreferences</code> for simplicity, but in production, you might prefer an encrypted store for security.</li> <li><strong>checkIsLogin</strong>: A server call to validate the token or determine if the user is effectively logged in.</li> <li><strong>User Info</strong>: If valid, we retrieve user metadata (like name, avatar, roles) and store it in memory (or in a global data model).</li> </ol> <p>By hooking <code class="language-plaintext highlighter-rouge">checkAutoLogin()</code> into your app’s initialization phase, you can automatically guide the user to either their home screen or a login screen.</p> <hr/> <h2 id="handling-expired-tokens">Handling Expired Tokens</h2> <p>If the server sets short-lived tokens, you typically use a <strong>refresh token</strong> or re-prompt for credentials. A common pattern is:</p> <ul> <li>On every request, if the token is expired, the client tries to exchange the refresh token for a new access token (completely invisible to the user).</li> <li>If the refresh token itself has expired, you redirect to login.</li> </ul> <hr/> <h2 id="security-precautions">Security Precautions</h2> <ul> <li><strong>Use Secure Storage</strong>: On iOS, Keychain is recommended; on Android, the Keystore. Flutter wrappers like <code class="language-plaintext highlighter-rouge">flutter_secure_storage</code> can help.</li> <li><strong>Rotate Tokens</strong>: Invalidate tokens server-side after a reasonable lifespan.</li> <li><strong>Logout</strong>: Provide a reliable logout flow that clears tokens from local storage.</li> <li><strong>SSL/TLS</strong>: Always use HTTPS to prevent interception of token traffic.</li> </ul> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Automatic login significantly enhances user experience by skipping repetitive credential prompts. The implementation focuses on <strong>safely storing tokens</strong>, <strong>verifying them on app launch</strong>, and <strong>refreshing</strong> them in the background if needed. By carefully combining secure local storage with a robust server-side authentication flow, you can deliver a streamlined experience without sacrificing security.</p> <p>In my own projects, I’ve integrated these steps into dedicated methods, ensuring a consistent approach for all user-facing screens. The principle is universal: persist tokens securely, validate them gracefully, and degrade to manual login only if absolutely necessary.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="security"/><category term="authentication"/><summary type="html"><![CDATA[A closer look at handling secure, persistent user authentication within mobile apps]]></summary></entry><entry><title type="html">Efficient Team Collaboration for Flutter Projects - Version Control and Code Reviews</title><link href="https://t-mao.github.io/blog/2024/Team-Collaboration/" rel="alternate" type="text/html" title="Efficient Team Collaboration for Flutter Projects - Version Control and Code Reviews"/><published>2024-11-16T10:52:00+00:00</published><updated>2024-11-16T10:52:00+00:00</updated><id>https://t-mao.github.io/blog/2024/Team-Collaboration</id><content type="html" xml:base="https://t-mao.github.io/blog/2024/Team-Collaboration/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.edco.com/images/uploaded/whyshouldyouencourageteamcollaborationintheworkplace-480.webp 480w,https://www.edco.com/images/uploaded/whyshouldyouencourageteamcollaborationintheworkplace-800.webp 800w,https://www.edco.com/images/uploaded/whyshouldyouencourageteamcollaborationintheworkplace-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.edco.com/images/uploaded/whyshouldyouencourageteamcollaborationintheworkplace.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Team Collaboration" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When working on a Flutter project with multiple teammates—especially novices or interns—<strong>version control</strong> strategies and <strong>code review</strong> processes can make or break your team’s efficiency. As an app developer with experience managing chaotic scenarios (like incomplete merges or tangled PRs), I’ve seen how a well-structured Git workflow can keep a team aligned, ensure consistent code quality, and ultimately deliver stable builds. Below, I outline how I combine <strong>Git Flow</strong>, <strong>code review best practices</strong>, and <strong>CI/CD</strong> to streamline development and <strong>publish Flutter apps</strong> seamlessly.</p> <h2 id="why-this-matters">Why This Matters</h2> <ul> <li><strong>Prevent Merge Hell</strong>: In a hectic environment (especially with newer devs on board), a consistent branching strategy helps everyone contribute safely without stepping on each other’s toes.</li> <li><strong>Ensure Code Quality</strong>: Thorough code reviews with clear guidelines (e.g., style conventions, commit messages, PR checks) keep the codebase robust and maintainable.</li> <li><strong>Automated Testing &amp; CI</strong>: A well-structured CI/CD pipeline runs tests on every commit/PR to catch regressions early and swiftly.</li> </ul> <h2 id="1-git-flow-branching">1. Git Flow Branching</h2> <p>I’ve used the <strong>Git Flow</strong> model to ensure that new features, hotfixes, and releases remain well-organized:</p> <ol> <li><strong>Main (<code class="language-plaintext highlighter-rouge">master</code> or <code class="language-plaintext highlighter-rouge">main</code>) Branch</strong>: Reflects production-ready code. Only merges from <code class="language-plaintext highlighter-rouge">release</code> branches or hotfix branches flow back into <code class="language-plaintext highlighter-rouge">main</code>.</li> <li><strong>Develop Branch</strong>: Acts as the integration branch for features. New features branch off from here and merge back into <code class="language-plaintext highlighter-rouge">develop</code> when completed.</li> <li><strong>Feature Branches</strong>: Each developer (including interns) starts a branch from <code class="language-plaintext highlighter-rouge">develop</code>, implementing a single feature or bugfix. The branch name might follow a naming convention, for example: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feature/user-profile-refactor
fix/dashboard-crash
chore/update-deps
</code></pre></div> </div> </li> <li><strong>Release Branch</strong>: When the code in <code class="language-plaintext highlighter-rouge">develop</code> is stable enough, create a release branch (e.g. <code class="language-plaintext highlighter-rouge">release/1.2.0</code>). This branch is for final polishing, bugfixes, or version bumping before merging into <code class="language-plaintext highlighter-rouge">main</code>.</li> <li><strong>Hotfix Branch</strong>: If urgent production bugs surface, spin off a hotfix branch from <code class="language-plaintext highlighter-rouge">main</code>, fix the issue, and merge back into both <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">develop</code>.</li> </ol> <p><strong>Key Tip:</strong> Encourage consistent naming patterns (<code class="language-plaintext highlighter-rouge">feature/…</code>, <code class="language-plaintext highlighter-rouge">hotfix/…</code>, etc.) so everyone recognizes each branch’s purpose.</p> <p><br/></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Example flow</span>
<span class="c"># 1) Switch to develop branch</span>
git checkout develop

<span class="c"># 2) Create a new feature branch</span>
git checkout <span class="nt">-b</span> feature/flutter-migrate

<span class="c"># ... code ...</span>
<span class="c"># 3) Commit changes</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"feat: migrate flutter version to 3.0"</span>

<span class="c"># 4) Push</span>
git push origin feature/flutter-migrate

<span class="c"># 5) Create a merge request into develop &amp; do code review</span>
</code></pre></div></div> <p><br/></p> <h2 id="2-code-review-best-practices">2. Code Review Best Practices</h2> <h3 id="21-mergepull-requests-prs">2.1 Merge/Pull Requests (PRs)</h3> <ul> <li> <p><strong>Small, Focused PRs</strong><br/> Encourage interns and teammates to work in small increments. Smaller PRs are easier to review, test, and revert if needed.</p> </li> <li> <p><strong>Proper Commit Messages</strong><br/> Use a consistent style (e.g., <a href="https://www.conventionalcommits.org/">Conventional Commits</a>). Examples:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat: implement push notification service
fix: handle null pointer in user profile
chore: upgrade dependencies
</code></pre></div> </div> </li> <li> <p><strong>Self-Review Before Submitting</strong><br/> Encourage devs to do a quick review of their own changes (format code, remove debugging prints) before requesting a review from others.</p> </li> <li> <p><strong>Minimal Reviewer Confusion</strong><br/> Attach screenshots for UI changes. Add references to related tickets. This helps reviewers quickly see the context.</p> </li> </ul> <h3 id="22-review-checklist">2.2 Review Checklist</h3> <p>For each PR:</p> <ol> <li> <p><strong>Code Style &amp; Lint</strong><br/> Ensure the code is formatted with <code class="language-plaintext highlighter-rouge">dart format</code> or a linter (<code class="language-plaintext highlighter-rouge">analysis_options.yaml</code>). This keeps the codebase consistent.</p> </li> <li> <p><strong>Tests</strong><br/> Check if there are relevant tests. In Flutter, ensure widget tests or integration tests cover new features.</p> </li> <li> <p><strong>Performance</strong><br/> Look for potential inefficiencies (e.g., heavy computations on main thread, large rebuilds in a <code class="language-plaintext highlighter-rouge">build()</code> method).</p> </li> <li> <p><strong>Readability</strong><br/> Code comments, naming, and structure: can a new developer understand it?</p> </li> <li> <p><strong>No Secrets</strong><br/> Ensure no API keys, tokens, or private data are committed. Environment variables belong in <code class="language-plaintext highlighter-rouge">.env</code> or a secrets manager.</p> </li> </ol> <p><strong>Tip:</strong> Automate some checks (e.g., code format, coverage thresholds) in your CI pipeline so they can’t be bypassed accidentally.</p> <p><br/></p> <h2 id="3-cicd-pipeline-overview">3. CI/CD Pipeline Overview</h2> <h3 id="31-continuous-integration-ci">3.1 Continuous Integration (CI)</h3> <p><strong>Goal</strong>: On every push or PR, your pipeline should:</p> <ol> <li><strong>Fetch Dependencies</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flutter pub get
</code></pre></div> </div> </li> <li><strong>Run Analysis &amp; Tests</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flutter analyze
flutter test
</code></pre></div> </div> </li> <li> <p><strong>Static Code Checks</strong><br/> Use <code class="language-plaintext highlighter-rouge">dart analyze</code> or <code class="language-plaintext highlighter-rouge">flutter analyze</code> to detect errors, and enforce style guides with custom lint rules.</p> </li> <li><strong>Build Artifacts</strong> (optional)<br/> For large teams, you may want a “dev” or “QA” build of your Flutter app automatically generated after each commit, so testers can pick it up quickly.</li> </ol> <p><strong>Tip</strong>: Tools like <strong>GitHub Actions</strong>, <strong>Bitbucket Pipelines</strong>, or <strong>GitLab CI</strong> can easily run these steps on each PR. For example, a GitHub Actions file might look like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Flutter CI</span>

<span class="na">on</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pull_request</span><span class="pi">,</span> <span class="nv">push</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build-and-test</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Flutter</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">subosito/flutter-action@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">channel</span><span class="pi">:</span> <span class="s2">"</span><span class="s">stable"</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">flutter pub get</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Analyze</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">flutter analyze</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">flutter test --coverage</span>
</code></pre></div></div> <p><br/></p> <h3 id="32-continuous-delivery-cd">3.2 Continuous Delivery (CD)</h3> <p><strong>Goal</strong>: Automate building, signing, and distributing the app to testers or directly to stores.</p> <ol> <li> <p><strong>Version Bump &amp; Changelog</strong><br/> On merges into <code class="language-plaintext highlighter-rouge">main</code>, update version in <code class="language-plaintext highlighter-rouge">pubspec.yaml</code>, generate release notes from PR titles, and commit them.</p> </li> <li> <p><strong>Build &amp; Sign</strong></p> <ul> <li><strong>Android</strong>: Use keystore for signing. Tools like <code class="language-plaintext highlighter-rouge">gradle</code> can handle the release flavor automatically.</li> <li><strong>iOS</strong>: Insert provisioning profiles, sign with Apple credentials.</li> </ul> </li> <li> <p><strong>Distribute</strong></p> <ul> <li>Possibly upload to <strong>Firebase App Distribution</strong> or <strong>TestFlight</strong> for QA.</li> <li>On stable releases, push to Google Play or App Store Connect (via Fastlane or CLI commands).</li> </ul> </li> </ol> <p><strong>Tip</strong>: Tools like <strong>fastlane</strong> can handle the “sign, build, upload” steps. A typical approach for iOS might look like:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fastlane ios beta
</code></pre></div></div> <p>While Android might be:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fastlane android beta
</code></pre></div></div> <p>This triggers the build for each platform, signs the APK/IPA, and uploads to your distribution platform automatically.</p> <p><br/></p> <h2 id="conclusion">Conclusion</h2> <p>A well-structured <strong>Git Flow</strong> combined with <strong>thorough code reviews</strong> and <strong>CI/CD</strong> pipelines fosters a developer culture of clarity, quality, and accountability. In my own experience—especially guiding junior devs—I’ve found these steps to be invaluable:</p> <ol> <li><strong>Keep Git Branching Clear</strong>: Devs see exactly where new features vs. hotfixes go.</li> <li><strong>Code Review for Education &amp; Quality</strong>: Catch bugs and mentor interns along the way.</li> <li><strong>Automated Builds &amp; Tests</strong>: Freed from manual QA overhead, the team focuses on shipping stable features.</li> </ol> <p>It’s never too late to standardize your approach. By adopting these strategies, you’ll see fewer merge nightmares, fewer regressions, and a more consistent development rhythm in your Flutter project.</p> <p><br/></p> <hr/> <h4 id="example-of-my-flutter-code-approach-minified-snippet">Example of My Flutter Code Approach (Minified Snippet)</h4> <p>To give a quick sense of how I structure code for clarity, here’s a short excerpt of a Flutter widget that I might use for a simple login form with basic validations. (Shown for demonstration; it’s not from a real production codebase.)</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">LoginPage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">LoginPage</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">_LoginPageState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_LoginPageState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_LoginPageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">LoginPage</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">_formKey</span> <span class="o">=</span> <span class="n">GlobalKey</span><span class="p">&lt;</span><span class="n">FormState</span><span class="p">&gt;();</span>
  <span class="kd">final</span> <span class="n">_emailController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
  <span class="kd">final</span> <span class="n">_passwordController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
  <span class="kt">bool</span> <span class="n">_passwordVisible</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Login"</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">SafeArea</span><span class="p">(</span>
        <span class="nl">child:</span> <span class="n">Form</span><span class="p">(</span>
          <span class="nl">key:</span> <span class="n">_formKey</span><span class="p">,</span>
          <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
            <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mf">16.0</span><span class="p">),</span>
            <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">TextFormField</span><span class="p">(</span>
                <span class="nl">controller:</span> <span class="n">_emailController</span><span class="p">,</span>
                <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
                  <span class="nl">labelText:</span> <span class="s">"Email"</span><span class="p">,</span>
                  <span class="nl">prefixIcon:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">email</span><span class="p">),</span>
                <span class="p">),</span>
                <span class="nl">keyboardType:</span> <span class="n">TextInputType</span><span class="o">.</span><span class="na">emailAddress</span><span class="p">,</span>
                <span class="nl">validator:</span> <span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span>
                    <span class="n">val</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">val</span><span class="o">.</span><span class="na">contains</span><span class="p">(</span><span class="s">'@'</span><span class="p">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"Invalid email"</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="kd">const</span> <span class="n">SizedBox</span><span class="p">(</span><span class="nl">height:</span> <span class="mi">12</span><span class="p">),</span>
              <span class="n">TextFormField</span><span class="p">(</span>
                <span class="nl">controller:</span> <span class="n">_passwordController</span><span class="p">,</span>
                <span class="nl">obscureText:</span> <span class="o">!</span><span class="n">_passwordVisible</span><span class="p">,</span>
                <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span>
                  <span class="nl">labelText:</span> <span class="s">"Password"</span><span class="p">,</span>
                  <span class="nl">prefixIcon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">lock</span><span class="p">),</span>
                  <span class="nl">suffixIcon:</span> <span class="n">IconButton</span><span class="p">(</span>
                    <span class="nl">icon:</span> <span class="n">Icon</span><span class="p">(</span>
                      <span class="n">_passwordVisible</span> <span class="o">?</span> <span class="n">Icons</span><span class="o">.</span><span class="na">visibility_off</span> <span class="o">:</span> <span class="n">Icons</span><span class="o">.</span><span class="na">visibility</span><span class="p">,</span>
                    <span class="p">),</span>
                    <span class="nl">onPressed:</span> <span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
                      <span class="n">_passwordVisible</span> <span class="o">=</span> <span class="o">!</span><span class="n">_passwordVisible</span><span class="p">;</span>
                    <span class="p">}),</span>
                  <span class="p">),</span>
                <span class="p">),</span>
                <span class="nl">validator:</span> <span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">val</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">val</span><span class="o">.</span><span class="na">length</span> <span class="p">&gt;</span><span class="o">=</span> <span class="mi">6</span>
                    <span class="o">?</span> <span class="kc">null</span>
                    <span class="o">:</span> <span class="s">"At least 6 characters required"</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="kd">const</span> <span class="n">SizedBox</span><span class="p">(</span><span class="nl">height:</span> <span class="mi">20</span><span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="p">(</span>
                <span class="nl">onPressed:</span> <span class="n">_onLoginPressed</span><span class="p">,</span>
                <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Login"</span><span class="p">),</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_onLoginPressed</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_formKey</span><span class="o">.</span><span class="na">currentState</span><span class="o">!.</span><span class="na">validate</span><span class="p">())</span> <span class="p">{</span>
      <span class="c1">// TODO: Integrate with your auth service, e.g.:</span>
      <span class="c1">// AuthService.instance.login(_emailController.text, _passwordController.text);</span>

      <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span>
        <span class="kd">const</span> <span class="n">SnackBar</span><span class="p">(</span><span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Logged in successfully!"</span><span class="p">)),</span>
      <span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Even a snippet like this benefits from consistent code styling and small, logical commits—particularly when working with a larger team, you want each diff to remain as transparent and clean as possible.</p> <p><br/></p> <hr/> <p><strong>Thanks for reading!</strong> If you’re about to scale your Flutter app or incorporate interns, don’t underestimate the value of these versioning, review, and CI/CD strategies. It’ll save you from misaligned merges, messy code, and unpredictable releases.</p> <p><br/></p> <hr/> <div style="font-size:0.9rem;color:var(--gray-700);margin-top:1rem;"> <strong>Read More:</strong> <ul> <li> <a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests" target="_blank">GitHub Pull Requests - Official Docs</a> </li> <li> <a href="https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows" target="_blank">Git Workflows in the official Git Book</a> </li> <li> <a href="https://flutter.dev/docs/testing" target="_blank">Flutter Testing - Official Docs</a> </li> <li> <a href="https://conventionalcommits.org" target="_blank">Conventional Commits - Standard for Commit Messages</a> </li> </ul> </div>]]></content><author><name></name></author><category term="mobile-dev"/><category term="flutter"/><category term="collaboration"/><category term="git"/><category term="code-review"/><summary type="html"><![CDATA[A deep dive into Git flow, code reviews, and CI/CD pipelines for Flutter teams]]></summary></entry><entry><title type="html">Bringing Orders, Chat, and Payment Together: A Full-Stack Approach to On-Demand Services</title><link href="https://t-mao.github.io/blog/2024/Full-Stack/" rel="alternate" type="text/html" title="Bringing Orders, Chat, and Payment Together: A Full-Stack Approach to On-Demand Services"/><published>2024-10-23T10:00:00+00:00</published><updated>2024-10-23T10:00:00+00:00</updated><id>https://t-mao.github.io/blog/2024/Full-Stack</id><content type="html" xml:base="https://t-mao.github.io/blog/2024/Full-Stack/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://static.vecteezy.com/system/resources/previews/021/192/395/non_2x/full-stack-development-structure-full-stack-mind-map-programming-coding-developer-website-application-illustration-vector-480.webp 480w,https://static.vecteezy.com/system/resources/previews/021/192/395/non_2x/full-stack-development-structure-full-stack-mind-map-programming-coding-developer-website-application-illustration-vector-800.webp 800w,https://static.vecteezy.com/system/resources/previews/021/192/395/non_2x/full-stack-development-structure-full-stack-mind-map-programming-coding-developer-website-application-illustration-vector-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://static.vecteezy.com/system/resources/previews/021/192/395/non_2x/full-stack-development-structure-full-stack-mind-map-programming-coding-developer-website-application-illustration-vector.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Full-Stack" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="overview">Overview</h2> <p><strong>Key Objective:</strong> Integrate <em>multiple front-end components</em> (mobile apps for Consumers &amp; Technicians) with a <em>robust back-end</em> that orchestrates:</p> <ol> <li><strong>Orders</strong>: Creation, location-based dispatch, acceptance, and status transitions.</li> <li><strong>Real-time Chat</strong>: In-app messaging so consumers can interact with assigned technicians.</li> <li><strong>Stripe</strong>: Payment method binding, pay-in (for consumers), payout (for technicians).</li> <li><strong>Intelligent Order Assignment</strong>: Harness geolocation data + user roles to distribute tasks.</li> <li><strong>Back-Office Moderation</strong>: Provide business owners with an overview of all activities, from orders to final payouts.</li> </ol> <h2 id="architecture-in-a-nutshell">Architecture in a Nutshell</h2> <ol> <li> <p><strong>Front-End Layer</strong>: Two Flutter apps, each with distinct UI flows:</p> <ul> <li><strong>Consumer App</strong>: <ul> <li>Creates orders, attaches photos, sets location, pays via <strong>Stripe</strong>.</li> <li>Chats in real time with assigned technicians.</li> <li>Manages history, ratings, and AI-driven self-troubleshooting.</li> </ul> </li> <li><strong>Technician App</strong>: <ul> <li>Views nearby tasks (within X miles).</li> <li>Accepts or declines jobs.</li> <li>Provides updates—like “Depart Now,” “Begin Service,” “Complete Service.”</li> <li>Collects payment or triggers payout flows (via <strong>Stripe Connect</strong>).</li> <li>Displays work stats: total earnings, tasks completed, average rating.</li> </ul> </li> </ul> </li> <li> <p><strong>Back-End Layer</strong>:</p> <ul> <li><strong>Node.js / Firebase</strong> (Legacy): <ul> <li>Real-time database triggers for location-based queries.</li> <li>FCM push notifications for new tasks/messages.</li> <li>AI chatbot bridging (initial prototypes).</li> </ul> </li> <li><strong>MySQL / Java</strong> (New): <ul> <li>Order/payment logic, with clearer relational structure for tasks, user roles, brand data, logs.</li> <li>Stripe Connect integration for technician payouts.</li> <li>RESTful APIs to unify app communications, store user &amp; order data.</li> </ul> </li> <li><strong>B-end Dashboard</strong> (browser-based): <ul> <li>Designed for merchants &amp; internal staff: manage orders, inspect process logs, view final photos.</li> <li>Mark brand &amp; SKU details (e.g., price, categories), run audits.</li> </ul> </li> </ul> </li> </ol> <h2 id="building-the-core-flows">Building the Core Flows</h2> <h3 id="a-orders-and-location">A. Orders and Location</h3> <p><strong>Flow</strong>:</p> <ol> <li><strong>Creation</strong>: Consumers either self-create (via app) or merchants push orders from a B-end panel.</li> <li><strong>Location</strong>: <ul> <li>Each order includes a lat/long from the consumer’s pinned address.</li> <li>Technician devices broadcast a location update every ~1 minute.</li> </ul> </li> <li><strong>Matching</strong>: <ul> <li>The system calculates which technicians lie within a 50-mile radius.</li> <li>Those technicians see a carousel of “Eligible Orders” + real-time updates as new tasks appear.</li> </ul> </li> <li><strong>Acceptance</strong>: <ul> <li>Once a technician hits “Accept,” the order moves out of the “pool” into that tech’s pipeline.</li> </ul> </li> </ol> <h3 id="b-in-app-chat">B. In-App Chat</h3> <p><strong>Key Features</strong>:</p> <ul> <li><strong>Socket/FCM</strong>: Real-time message passing or notifications.</li> <li><strong>Order ID-based</strong> chat rooms: Consumers only see the chat for their own order; technicians only see chats for assigned tasks.</li> <li><strong>Attachments</strong>: Photos or short videos.</li> <li><strong>Push Alerts</strong>: If someone sends a new message while the other side is offline, FCM triggers a notification.</li> </ul> <h3 id="c-stripe-payment-flow">C. Stripe Payment Flow</h3> <p><strong>Consumers</strong>:</p> <ol> <li><strong>Attach Payment Method</strong> (e.g., credit card).</li> <li><strong>Pay</strong>: On order creation or later (depending on the business logic), the app creates a Stripe PaymentIntent.</li> <li><strong>Confirmation</strong>: Payment success triggers a status change to “Paid.”</li> </ol> <p><strong>Technicians</strong>:</p> <ol> <li><strong>Create Stripe Connect Account</strong>: Onboarding wizard that captures banking info.</li> <li><strong>Delayed Payouts</strong>: Once an order is marked “Complete,” the system schedules a <strong>transfer</strong>.</li> <li><strong>Transfer</strong>: A timed function automatically calls <code class="language-plaintext highlighter-rouge">stripe.transfers.create</code> to deposit the funds into the technician’s bank.</li> </ol> <h3 id="d-ai-powered-self-service">D. AI-Powered Self-Service</h3> <p>Within the consumer app, a “Help with AI” button leads to:</p> <ul> <li><strong>Chat GPT 4</strong> pipeline: <ul> <li>Gathers brand/SKU + user’s textual description.</li> <li>Provides step-by-step troubleshooting steps (like checking for simple wiring issues).</li> <li>Exits to “Technician needed” if the user still can’t fix the issue, generating recommended data for the official repair order.</li> </ul> </li> </ul> <h2 id="implementation-highlights">Implementation Highlights</h2> <ol> <li> <p><strong>Flutter</strong>:</p> <ul> <li>Common code for “authentication, i18n, theming.”</li> <li>Split modules for “orders,” “chat,” “payments,” “AI.”</li> <li>Real-time location with <code class="language-plaintext highlighter-rouge">geolocator</code>, ensuring background updates.</li> </ul> </li> <li> <p><strong>Firebase Functions</strong> (legacy part):</p> <ul> <li>Listens on <code class="language-plaintext highlighter-rouge">orders/{id}</code> changes =&gt; triggers re-calculation for nearby technicians.</li> <li>Push notifications if new messages appear or order statuses change.</li> </ul> </li> <li> <p><strong>MySQL</strong> (new part):</p> <ul> <li>Provides stable user management, multi-relational brand/SKU data.</li> <li>Stripe Connect endpoints to create accounts, attach bank info, handle payouts.</li> <li>Schedules tasks with cron-like logic for delayed transfers or refunds.</li> </ul> </li> <li> <p><strong>Security</strong>:</p> <ul> <li><strong>RSA</strong> + <strong>AES</strong> hybrid encryption for sensitive data.</li> <li>Obfuscates card data (front-end only sees tokens).</li> <li>Enforces role-based checks (consumers can’t see T-end pages, etc.).</li> </ul> </li> <li> <p><strong>B-end System</strong>:</p> <ul> <li>Built with Java + Spring.</li> <li>Allows merchants to create orders, track statuses, see final completion photos.</li> <li>Summaries for each brand/SKU, controlling pricing reference data.</li> </ul> </li> </ol> <h2 id="what-stands-out">What Stands Out</h2> <ul> <li><strong>Unified Flow</strong>: The “one-stop” approach ensures that a user can create an order, chat, pay, and see the entire timeline in a single integrated solution.</li> <li><strong>Technician Empowerment</strong>: T-end app with a geo-based job feed, direct chat, and easy payment settlement fosters autonomy and quicker acceptance.</li> <li><strong>Self-service AI</strong>: Reduces trivial tasks and fosters user trust.</li> <li><strong>Scalability</strong>: Moved from simpler Firebase triggers to a more robust MySQL + microservices approach as user volumes grew.</li> </ul> <h2 id="sample-code-snippet-pseudo-dart">Sample Code Snippet (Pseudo-Dart)</h2> <p>Below is a simplified snippet (slightly stylized) of how the Technician App loads “Nearby Orders” on a refresh:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_fetchNearbyOrders</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="n">setState</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">isLoading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">currentLoc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">getLocation</span><span class="p">();</span>
    <span class="kd">final</span> <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">ApiOrderTechnician</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">fetchNearbyOrders</span><span class="p">({</span>
      <span class="s">'latitude'</span><span class="o">:</span> <span class="n">currentLoc</span><span class="o">.</span><span class="na">lat</span><span class="p">,</span>
      <span class="s">'longitude'</span><span class="o">:</span> <span class="n">currentLoc</span><span class="o">.</span><span class="na">lng</span><span class="p">,</span>
      <span class="s">'searchRadius'</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>  <span class="c1">// miles</span>
      <span class="s">'brandFilter'</span><span class="o">:</span> <span class="n">_brandFilter</span><span class="p">,</span>
      <span class="s">'serviceType'</span><span class="o">:</span> <span class="n">_serviceType</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">nearbyOrders</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">orders</span><span class="p">;</span>
      <span class="n">isLoading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">isLoading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
    <span class="n">showErrorDialog</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="s">'Failed to load nearby orders: </span><span class="si">$e</span><span class="s">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Note</strong>: The actual code integrates authentication tokens, FCM tokens, concurrency solutions, etc.</p> <h2 id="results--reflections">Results &amp; Reflections</h2> <p><strong>Project Gains</strong>:</p> <ul> <li><strong>Cut Manual Dispatch</strong>: Automated matching using location data drastically reduced human overhead.</li> <li><strong>Reduced Support Calls</strong>: The integrated AI + chat system offered immediate, structured support.</li> <li><strong>Better Monetization</strong>: Stripe Connect streamlined payouts and overcame friction in cross-border transactions.</li> </ul> <p><strong>Lessons</strong>:</p> <ul> <li>Balancing a <strong>Firebase</strong> real-time approach with a <strong>MySQL</strong> relational approach requires careful synchronization.</li> <li>Building in <strong>i18n</strong> from day one is easier than retrofitting.</li> <li>The user experience soared by merging order management, location tracking, chat, and payments under one roof.</li> </ul> <hr/> <h2 id="final-thoughts">Final Thoughts</h2> <p>Pulling together orders, chat, and payment in a single <strong>full-stack</strong> ecosystem offers a smoother user journey. If you’re handling on-demand services, bridging location-based tasks, real-time messaging, and a trusted payment platform like <strong>Stripe</strong> can accelerate growth and boost user satisfaction. The key is to keep the architecture modular—so expansions (like adding AI or enterprise-level dashboards) remain straightforward.</p> <p>If you have questions on integrating <strong>Flutter</strong> with advanced back-end logic, or how to embed real-time chat + Stripe payouts, feel free to reach out! Each piece—be it geo queries, i18n, or AI-based workflows—brings its own challenges, but the payoff is an efficient, modern user experience that stands out in today’s crowded market.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="backend-integration"/><category term="flutter"/><category term="payments"/><category term="chat"/><summary type="html"><![CDATA[]]></summary></entry></feed>