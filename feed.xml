<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://t-mao.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://t-mao.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-18T04:06:28+00:00</updated><id>https://t-mao.github.io/feed.xml</id><title type="html">blank</title><subtitle>Tongze Mao&apos;s personal folio website for academics. </subtitle><entry><title type="html">Why I Studied Clinical Depression—and How It Shapes My Work and Leadership</title><link href="https://t-mao.github.io/blog/2025/Certificate-in-Depression/" rel="alternate" type="text/html" title="Why I Studied Clinical Depression—and How It Shapes My Work and Leadership"/><published>2025-06-17T20:45:00+00:00</published><updated>2025-06-17T20:45:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Certificate-in-Depression</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Certificate-in-Depression/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://images.unsplash.com/photo-1497493292307-31c376b6e479?auto=format&amp;fit=crop&amp;w=1200&amp;q=60" sizes="95vw"/> <img src="https://images.unsplash.com/photo-1497493292307-31c376b6e479?auto=format&amp;fit=crop&amp;w=1200&amp;q=60" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Learning Beyond the IDE" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> <p><em>Software is built by people, for people.</em><br/> Understanding what threatens our well-being makes every product—and every team—stronger.</p> </blockquote> <hr/> <h2 id="1--why-i-chose-to-dive-into-clinical-mental-health-training">1 · Why I Chose to Dive Into Clinical Mental-Health Training</h2> <p>Shipping consumer apps is exhilarating, but I’ve watched talented colleagues and end-users wrestle with invisible battles—burnout, anxiety, and depression. I wanted solid, evidence-based knowledge to:</p> <ol> <li><strong>Deepen empathy.</strong> Accurate information on symptoms, risk factors, and treatments helps me be a more supportive teammate and leader.</li> <li><strong>Design responsibly.</strong> Push notifications, color palettes, and onboarding flows impact mood; understanding depression guides safer choices.</li> <li><strong>Promote healthy teams.</strong> Recognizing early warning signs allows me to advocate for humane workloads and psychological safety.</li> </ol> <p>To that end, I completed a <strong>clinical education program on depression</strong> developed by ALLEGRA Learning Solutions, an ANCC-accredited provider.</p> <hr/> <h2 id="2--key-insights-from-the-training">2 · Key Insights From the Training</h2> <h3 id="21-clinical-fundamentals">2.1 Clinical Fundamentals</h3> <table> <thead> <tr> <th>Topic</th> <th>Essential Takeaway</th> </tr> </thead> <tbody> <tr> <td><strong>What Depression Really Is</strong></td> <td>A diagnosable mood disorder that must persist ≥ 2 weeks and cause functional impairment; it is not “just feeling sad.”</td> </tr> <tr> <td><strong>Biological Factors</strong></td> <td>Dysregulation of serotonin, norepinephrine, dopamine, and the HPA axis means stigma and blame have no place in any conversation.</td> </tr> <tr> <td><strong>Psychosocial Risk</strong></td> <td>Social isolation, traumatic events, chronic illness, and drastic life changes markedly increase risk.</td> </tr> <tr> <td><strong>Early Detection</strong></td> <td>Tools such as <strong>PHQ-9</strong> and <strong>ASQ-4</strong> bring rigor and reproducibility to screening, enabling timely intervention.</td> </tr> <tr> <td><strong>Treatment Spectrum</strong></td> <td>Evidence supports combining pharmacology (e.g., SSRIs) with lifestyle and complementary modalities—light therapy, music therapy, exercise.</td> </tr> </tbody> </table> <h3 id="22-perspectives-that-resonate">2.2 Perspectives That Resonate</h3> <ul> <li><strong>Loneliness is a health hazard.</strong> Chronic disconnection raises premature-death risk to the same level as smoking a pack of cigarettes a day.</li> <li><strong>Sleep quality is non-negotiable.</strong> Persistent insomnia multiplies depression risk tenfold.</li> <li><strong>Direct language saves lives.</strong> Asking plainly about suicidal thoughts uncovers risk faster than euphemisms.</li> </ul> <hr/> <h2 id="3--translating-knowledge-into-practice">3 · Translating Knowledge Into Practice</h2> <h3 id="31-human-first-product-decisions">3.1 Human-First Product Decisions</h3> <ul> <li><strong>Inclusive defaults.</strong> The very first build ships with dark-mode, dynamic-type, reduced-motion, and high-contrast palettes—not as “accessibility extras,” but as first-class UX. No feature is considered “done” until it renders legibly in both bright-light and low-light environments.</li> <li><strong>Frugal notifications.</strong> Push cadence follows the <em>least-disruptive viable</em> rule: no badges between 22:00-08:00 local time, opt-in granular topics, and weekly digests that roll up low-priority pings.</li> <li><strong>Session-length nudges.</strong> For content-heavy views (news feeds, forums, endless scrolls) the UI surfaces gentle “time-on-device” reminders at the 20-minute mark, inspired by WHO digital-wellbeing guidelines.</li> <li><strong>Transparent onboarding.</strong> Every permission request (camera, location, HealthKit) explains <em>why</em> and <em>how</em> data is protected, reducing the anxiety spiral that vague pop-ups can trigger.</li> <li><strong>Cognitive-load testing.</strong> During QA we run “peak-stress drills”: low-contrast mode, 30 % battery, poor network. Tasks requiring more than three taps or ten seconds get a design ticket—because frustration is a mental-health bug, too.</li> <li><strong>Ethical metrics.</strong> Retention, DAU/MAU, and session depth are reviewed <strong>alongside</strong> a <em>well-being dashboard</em>: app opens during typical sleep hours, opt-out rates for notifications, and frequency of panic-exit gestures. A spike in any wellbeing metric blocks release the same way a P0 crash would.</li> </ul> <h3 id="32-team-culture--leadership">3.2 Team Culture &amp; Leadership</h3> <ul> <li><strong>Check-ins with intent.</strong> One-on-ones include space to talk about stress and workload.</li> <li><strong>Sustainable cadence.</strong> No-pager weekends and flexible PTO during crunch times.</li> <li><strong>Psychological safety.</strong> Retrospectives focus on processes, not blame, enabling vulnerability.</li> </ul> <hr/> <h2 id="4--the-formal-recognition">4 · The Formal Recognition</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Tongze_Mao_Certificate_in_Depression_ALLEGRA_2025-480.webp 480w,/assets/img/Tongze_Mao_Certificate_in_Depression_ALLEGRA_2025-800.webp 800w,/assets/img/Tongze_Mao_Certificate_in_Depression_ALLEGRA_2025-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Tongze_Mao_Certificate_in_Depression_ALLEGRA_2025.png" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 600px; " title="ALLEGRA Certificate" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <table> <thead> <tr> <th>Field</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td><strong>Credential</strong></td> <td><em>Certificate in Depression</em></td> </tr> <tr> <td><strong>Issuer</strong></td> <td>ALLEGRA Learning Solutions (ANCC-accredited)</td> </tr> <tr> <td><strong>Issue Date</strong></td> <td>17 Jun 2025</td> </tr> <tr> <td><strong>Credential ID</strong></td> <td>1013-09 ALEGRA CERTIFICATE-v03</td> </tr> </tbody> </table> <hr/> <h2 id="5--looking-ahead">5 · Looking Ahead</h2> <p>My goal is simple: keep building small, thoughtful experiences that lighten anxiety and nurture reflection—for users, teammates, and myself.</p> <h3 id="donetodo--calmer-planning">DoneTodo – Calmer Planning</h3> <p><a href="https://apps.apple.com/us/app/donetodo-task/id6743181289">DoneTodo on the App Store</a> helps people <strong>time-box what they plan to do (<em>Todo</em>) and log what they actually finish (<em>Done</em>)</strong>. Seeing a real-time balance between the two:</p> <ul> <li>lowers “I’m-failing” panic when a task spills over;</li> <li>rewards progress with a visible streak of completed slots;</li> <li>turns daily planning into a quick dopamine boost instead of a guilt trip.</li> </ul> <p>Future tweaks—gentler reminders, encouraging end-of-day summaries—will lean even harder into that <strong>confidence-building loop</strong>.</p> <h3 id="waylater--letters-to-your-future-self">WayLater – Letters to Your Future Self</h3> <p><a href="https://apps.apple.com/us/app/waylater/id6743181268">WayLater</a> lets you <strong>write a message now and “unseal” it months or years later</strong>. Users tell me it:</p> <ul> <li>captures gratitude before routines blur it out;</li> <li>offers a private space to process fears without instant judgment;</li> <li>turns long-term goals into a conversation with oneself, not a checklist.</li> </ul> <p>Next steps include optional mood tags and a mindful “looking-back” guide so every opened letter becomes a mini-reflection exercise.</p> <h3 id="beyond-the-apps">Beyond the Apps</h3> <ul> <li><strong>User focus.</strong> Every new feature asks: <em>Will this reduce anxiety or deepen self-understanding?</em> If not, it waits.</li> <li><strong>Team care.</strong> I’ll keep an eye on colleagues’ workload signals, open space for mental-health chats, and create a warmer workspace—natural light, plant life, and screen-break nudges.</li> <li><strong>Continuous learning.</strong> Short courses on mindfulness, psychological first aid, and trauma-informed design are already on my 2025 reading list—little upgrades that compound over time.</li> </ul> <p>Small iterations, human outcomes—that’s the roadmap.</p> <hr/> <h3 id="final-thoughts">Final Thoughts</h3> <p>Studying clinical depression reshaped how I build products and nurture teams. Technology should uplift, not overwhelm. If you share that vision, let’s connect and create resilient software—and resilient humans—together.</p>]]></content><author><name></name></author><category term="career-growth"/><category term="professional-development"/><category term="mental-health"/><category term="leadership"/><category term="lifelong-learning"/><summary type="html"><![CDATA[A developer’s reflection on completing a clinical training in depression, the key knowledge gained, and the human-first mindset I’m bringing to future projects.]]></summary></entry><entry><title type="html">Shipping Bug‑Free iOS Apps With a Lean SDET Strategy</title><link href="https://t-mao.github.io/blog/2025/Mobile-SDET-Strategy-for-iOS-Apps/" rel="alternate" type="text/html" title="Shipping Bug‑Free iOS Apps With a Lean SDET Strategy"/><published>2025-04-21T09:00:00+00:00</published><updated>2025-04-21T09:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Mobile%E2%80%91SDET-Strategy%E2%80%91for%E2%80%91iOS%E2%80%91Apps</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Mobile-SDET-Strategy-for-iOS-Apps/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://miro.medium.com/v2/resize:fit:1200/1*yyUuN3qEJQLdRQBbtfqklg-480.webp 480w,https://miro.medium.com/v2/resize:fit:1200/1*yyUuN3qEJQLdRQBbtfqklg-800.webp 800w,https://miro.medium.com/v2/resize:fit:1200/1*yyUuN3qEJQLdRQBbtfqklg-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://miro.medium.com/v2/resize:fit:1200/1*yyUuN3qEJQLdRQBbtfqklg.jpeg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="SDET" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> <p><em>An SDET is not “QA with a cooler title”.</em><br/> An SDET owns the <strong>code that ships</strong> <em>and</em> the <strong>code that proves it works</strong>—continuously, deterministically, and cheaply.<br/> This post dissects the exact tool‑chain I use in production.</p> </blockquote> <hr/> <h2 id="1the-mobilefirst-test-pyramid">1 · The Mobile‑First Test Pyramid</h2> <table> <thead> <tr> <th style="text-align: left">Layer</th> <th style="text-align: left">Scope</th> <th style="text-align: left">Primary Tech</th> <th style="text-align: right">90ᵗʰ‑pct Run‑time</th> <th style="text-align: right">Blast Radius</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Unit</td> <td style="text-align: left">pure logic / reducers</td> <td style="text-align: left"><strong>XCTest</strong></td> <td style="text-align: right">40 ms</td> <td style="text-align: right">refactor</td> </tr> <tr> <td style="text-align: left">Component</td> <td style="text-align: left">SwiftUI layout</td> <td style="text-align: left">ViewInspector + point‑free snapshot</td> <td style="text-align: right">250 ms</td> <td style="text-align: right">PR block</td> </tr> <tr> <td style="text-align: left">Contract</td> <td style="text-align: left">REST/GraphQL</td> <td style="text-align: left">Pact‑Swift</td> <td style="text-align: right">1 s</td> <td style="text-align: right">integration</td> </tr> <tr> <td style="text-align: left">E2E</td> <td style="text-align: left">binary on sim/real</td> <td style="text-align: left"><strong>Appium 2 + pytest</strong></td> <td style="text-align: right">4–7 s</td> <td style="text-align: right">release</td> </tr> <tr> <td style="text-align: left">Chaos</td> <td style="text-align: left">rotation, low‑mem</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">simctl</code>, XCUITest hooks</td> <td style="text-align: right">10 s</td> <td style="text-align: right">hot‑fix</td> </tr> </tbody> </table> <p>Key design decision: <strong>no business logic in the view layer</strong>.<br/> Every tap routes through a single Swift <em>reducer</em> (<code class="language-plaintext highlighter-rouge">handle(token:)</code>).<br/> Result: six‑second green bar for ~300 unit assertions.</p> <hr/> <h2 id="2unit-tests--math--pixels">2 · Unit Tests – Math &gt; Pixels</h2> <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutating</span> <span class="kd">func</span> <span class="nf">handle</span><span class="p">(</span><span class="n">_</span> <span class="nv">token</span><span class="p">:</span> <span class="kt">Token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">token</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">digit</span><span class="p">(</span><span class="k">let</span> <span class="nv">d</span><span class="p">):</span>      <span class="nf">accumulate</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">op</span><span class="p">(</span><span class="k">let</span> <span class="nv">op</span><span class="p">):</span>        <span class="nf">pushOperator</span><span class="p">(</span><span class="n">op</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">equals</span><span class="p">:</span>            <span class="nf">solve</span><span class="p">()</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">percent</span><span class="p">:</span>           <span class="nf">percentify</span><span class="p">()</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">sign</span><span class="p">:</span>              <span class="nf">toggleSign</span><span class="p">()</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">backspace</span><span class="p">:</span>         <span class="nf">backspace</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">test_order_of_operations</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">calc</span> <span class="o">=</span> <span class="kt">Calculator</span><span class="p">()</span>
    <span class="p">[</span><span class="s">"2"</span><span class="p">,</span> <span class="s">"+"</span><span class="p">,</span> <span class="s">"3"</span><span class="p">,</span> <span class="s">"×"</span><span class="p">,</span> <span class="s">"4"</span><span class="p">,</span> <span class="s">"="</span><span class="p">]</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="kt">Token</span><span class="o">.</span><span class="kd">init</span><span class="p">)</span><span class="o">.</span><span class="nf">forEach</span><span class="p">(</span><span class="n">calc</span><span class="o">.</span><span class="n">handle</span><span class="p">)</span>
    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">calc</span><span class="o">.</span><span class="n">display</span><span class="p">,</span> <span class="s">"14"</span><span class="p">)</span>   <span class="c1">// precedence preserved</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>Arithmetic uses <strong><code class="language-plaintext highlighter-rouge">Decimal</code></strong>, not <code class="language-plaintext highlighter-rouge">Double</code>; no IEEE‑754 traps.</li> <li><code class="language-plaintext highlighter-rouge">justCalculated</code> is a <em>state flag</em>, toggled strictly inside the reducer—never from SwiftUI gestures.</li> </ul> <hr/> <h2 id="3ui-automation--python-loves-swift">3 · UI Automation – Python Loves Swift</h2> <h3 id="31sessionscoped-driver">3.1 Session‑Scoped Driver</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@pytest.fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">driver</span><span class="p">():</span>
    <span class="n">caps</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">platformName</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">iOS</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">automationName</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">XCUITest</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">deviceName</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">iPhone 15 Pro Max</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">platformVersion</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">17.5</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">app</span><span class="sh">"</span><span class="p">:</span> <span class="n">BUILD_ARTIFACT</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">newCommandTimeout</span><span class="sh">"</span><span class="p">:</span> <span class="mi">300</span>
    <span class="p">}</span>
    <span class="n">drv</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">Remote</span><span class="p">(</span><span class="sh">"</span><span class="s">http://127.0.0.1:4723</span><span class="sh">"</span><span class="p">,</span> <span class="n">caps</span><span class="p">)</span>
    <span class="k">yield</span> <span class="n">drv</span>
    <span class="n">drv</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>
</code></pre></div></div> <p>Reuse the same simulator session for the whole suite—saves ~25 s on a 50‑case run.</p> <h3 id="32datadriven-scenarios">3.2 Data‑Driven Scenarios</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="sh">"</span><span class="s">seq, expected</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span>
    <span class="p">([</span><span class="sh">"</span><span class="s">5</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">%</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">5</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">%</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">0.75</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">([</span><span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">⌫</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">⌫</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">⌫</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">⌫</span><span class="sh">"</span><span class="p">],</span>     <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">),</span>        <span class="c1"># brutal backspaces
</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">test_sequences</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">expected</span><span class="p">):</span>
    <span class="nf">clear_all</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">:</span> <span class="nf">tap</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">display</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected</span>
</code></pre></div></div> <p>One additional edge case = one extra tuple. 92 E2E cases, still readable.</p> <hr/> <h2 id="4accessibility-ids--the-contract-you-forgottowrite">4 · Accessibility IDs – The Contract You Forgot to Write</h2> <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Text</span><span class="p">(</span><span class="n">expression</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="nv">display</span>
     <span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">expression</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">display</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">accessibilityIdentifier</span><span class="p">(</span><span class="s">"Display"</span><span class="p">)</span>
</code></pre></div></div> <ul> <li><strong>Testing</strong> – Appium anchors on <code class="language-plaintext highlighter-rouge">"Display"</code>, zero XPath.</li> <li><strong>Accessibility</strong> – VoiceOver inherits the same identifier.</li> <li><strong>Refactors</strong> – swap the whole UI, tests stay green.</li> </ul> <hr/> <h2 id="5ci--35s-pull-request-150s-nightly">5 · CI – 35 s Pull Request, 150 s Nightly</h2> <table> <thead> <tr> <th style="text-align: left">Stage</th> <th style="text-align: left">Command</th> <th style="text-align: right">Time</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Build &amp; Lint</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">xcodebuild -quiet</code> + SwiftLint</td> <td style="text-align: right">12 s</td> </tr> <tr> <td style="text-align: left">Unit / Component</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">swift test --parallel</code></td> <td style="text-align: right">6 s</td> </tr> <tr> <td style="text-align: left">Contract</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">pact-broker verify</code></td> <td style="text-align: right">7 s</td> </tr> <tr> <td style="text-align: left">Smoke E2E</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">pytest tests/smoke</code></td> <td style="text-align: right">10 s</td> </tr> <tr> <td style="text-align: left">Nightly Blitz</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">pytest -n auto --reruns 2</code></td> <td style="text-align: right">150 s</td> </tr> </tbody> </table> <p>Flaky spec? CI quarantines after three consecutive reds—mean‑time‑to‑green &lt; 24 h.</p> <hr/> <h2 id="6mutation-testing--trust-but-verify">6 · Mutation Testing – Trust, but Verify</h2> <p>Running Stryker‑SwiftMutation on reducers surfaces <em>false‑positive</em> unit tests—the ones that never fail because they never assert:</p> <ul> <li>killed mutants ≥ 85 % ⇒ tests are honestly exercising logic</li> <li>each surviving mutant becomes <strong>a new TDD card</strong> in Jira</li> </ul> <hr/> <h2 id="7portable-playbooks">7 · Portable Playbooks</h2> <table> <thead> <tr> <th style="text-align: left">Concern</th> <th style="text-align: left">iOS</th> <th style="text-align: left">Android</th> <th style="text-align: left">Server</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Unit</td> <td style="text-align: left"><strong>XCTest</strong></td> <td style="text-align: left">JUnit + Robolectric</td> <td style="text-align: left">pytest‑cov</td> </tr> <tr> <td style="text-align: left">Contract</td> <td style="text-align: left">Pact‑Swift</td> <td style="text-align: left">Pact‑KMP</td> <td style="text-align: left">Pact Broker</td> </tr> <tr> <td style="text-align: left">UI</td> <td style="text-align: left"><strong>Appium 2</strong> (XCUI)</td> <td style="text-align: left">Appium 2 (UIAutomator2)</td> <td style="text-align: left">—</td> </tr> <tr> <td style="text-align: left">Chaos</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">simctl</code></td> <td style="text-align: left">Firebase Test Lab faults</td> <td style="text-align: left">Toxiproxy</td> </tr> <tr> <td style="text-align: left">Reporting</td> <td style="text-align: left">Allure‑Swift</td> <td style="text-align: left">Allure</td> <td style="text-align: left">Allure</td> </tr> </tbody> </table> <p>Same mental model, three stacks—on‑boarding a new SDET takes one sprint, not a quarter.</p> <hr/> <h2 id="8outcome-snapshot-solo-implementation">8 · Outcome Snapshot (Solo Implementation)</h2> <table> <thead> <tr> <th style="text-align: left">Metric</th> <th style="text-align: right">Before</th> <th style="text-align: right">After</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Unit assertions</td> <td style="text-align: right">0</td> <td style="text-align: right"><strong>312</strong></td> </tr> <tr> <td style="text-align: left">UI cases</td> <td style="text-align: right">0</td> <td style="text-align: right"><strong>92</strong></td> </tr> <tr> <td style="text-align: left">PR feedback loop</td> <td style="text-align: right">15 min manual QA</td> <td style="text-align: right"><strong>&lt; 90 s</strong></td> </tr> <tr> <td style="text-align: left">Production crashes (90 d)</td> <td style="text-align: right">—</td> <td style="text-align: right"><strong>0</strong></td> </tr> <tr> <td style="text-align: left">Interview hit‑rate</td> <td style="text-align: right">n/a</td> <td style="text-align: right">4 on‑sites scheduled</td> </tr> </tbody> </table> <hr/> <h2 id="9whats-next">9 · What’s Next</h2> <ol> <li><strong>Analytics contract tests</strong> – every UI event validated against Amplitude schema.</li> <li><strong>On‑device fuzzing</strong> – random rotations / locale switches via XCTest.</li> <li><strong>Real‑device farm</strong> – iOS 17 + 18 smoke on physical hardware.</li> </ol>]]></content><author><name></name></author><category term="quality-engineering"/><category term="ios"/><category term="swiftui"/><category term="appium"/><category term="pytest"/><category term="sdet"/><summary type="html"><![CDATA[A deep dive into the mobile‑first test pyramid, Appium + pytest pipelines, and why accessibility is the best API you never documented.]]></summary></entry><entry><title type="html">Beyond the Buzzwords — A Field Manual for Functional, Integration, Smoke and Regression Testing</title><link href="https://t-mao.github.io/blog/2025/SoftwareTesting/" rel="alternate" type="text/html" title="Beyond the Buzzwords — A Field Manual for Functional, Integration, Smoke and Regression Testing"/><published>2025-04-11T09:00:00+00:00</published><updated>2025-04-11T09:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/SoftwareTesting</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/SoftwareTesting/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://img.freepik.com/premium-vector/software-test-innovation-digital-global-technology-website-development-explore-future-online-program_654623-1460-480.webp 480w,https://img.freepik.com/premium-vector/software-test-innovation-digital-global-technology-website-development-explore-future-online-program_654623-1460-800.webp 800w,https://img.freepik.com/premium-vector/software-test-innovation-digital-global-technology-website-development-explore-future-online-program_654623-1460-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://img.freepik.com/premium-vector/software-test-innovation-digital-global-technology-website-development-explore-future-online-program_654623-1460.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Software Testing" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> <p><em>“Quality is a design parameter, not a phase.”</em><br/> This article dissects four pillars every SDET leans on—<strong>Functional, Integration, Smoke, Regression</strong>—and shows where they live in a pipeline, how they fail, and how to keep them cheap.</p> </blockquote> <hr/> <h2 id="0why-another-glossary">0 · Why Another Glossary?</h2> <p>Because most definitions are either <em>too academic</em> (“black‑box verification of an externally visible behaviour…”) or <em>too shallow</em> (“does the page load?”).<br/> Below you’ll find the <em>working</em> definitions my teams and I have converged on after shipping several B2C mobile apps and microservice backends.</p> <hr/> <h2 id="1functional-tests">1 · Functional Tests</h2> <h3 id="validate-a-single-feature-in-isolationui-optional"><em>Validate a single feature in isolation—UI optional</em></h3> <table> <thead> <tr> <th style="text-align: left">Axis</th> <th style="text-align: left">Detail</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Scope</strong></td> <td style="text-align: left">One user story / acceptance criterion</td> </tr> <tr> <td style="text-align: left"><strong>Dependencies</strong></td> <td style="text-align: left">Mocked or stubbed (network, auth, payments…)</td> </tr> <tr> <td style="text-align: left"><strong>Runtime</strong></td> <td style="text-align: left">Target <strong>&lt; 500 ms</strong> each, &lt; 4 min suite</td> </tr> <tr> <td style="text-align: left"><strong>Tooling</strong></td> <td style="text-align: left"><em>Mobile:</em> XCUITest / Espresso / Appium<br/><em>Backend:</em> pytest‑requests, supertest, REST‑assured</td> </tr> </tbody> </table> <h3 id="11example--ios-swiftui-viewmodel">1.1 Example — iOS SwiftUI ViewModel</h3> <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">CartViewModelTests</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">test_addItem_updates_total</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">repo</span> <span class="o">=</span> <span class="kt">FakeCatalogRepository</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">vm</span>   <span class="o">=</span> <span class="kt">CartViewModel</span><span class="p">(</span><span class="nv">catalog</span><span class="p">:</span> <span class="n">repo</span><span class="p">)</span>

        <span class="n">vm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="nv">itemID</span><span class="p">:</span> <span class="s">"capuccino"</span><span class="p">,</span> <span class="nv">quantity</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>

        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">total</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">)</span>    <span class="c1">// local currency, tax‑free</span>
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">repo</span><span class="o">.</span><span class="n">hitCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// assert single repo call</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><em>The repository is a <strong>fake</strong> — no SQLite, no CoreData, no HTTP. That keeps the test deterministic and 6 × faster than touching real storage.</em></p> <h3 id="12when-functional-tests-fail">1.2 When Functional Tests Fail</h3> <ul> <li><strong>Spec drift</strong> — PM changed acceptance criteria but BDD/Gherkin not updated.</li> <li><strong>UI refactor</strong> — UI test locators coupled to class names rather than semantic IDs.</li> </ul> <p><strong>Guardrail</strong>: enforce <em>semantic</em> accessibility identifiers (<code class="language-plaintext highlighter-rouge">"CartTotalLabel"</code>, not <code class="language-plaintext highlighter-rouge">"label3"</code>).</p> <hr/> <h2 id="2integration-tests">2 · Integration Tests</h2> <h3 id="prove-that-contracts-between-two-real-components-hold"><em>Prove that contracts between two real components hold</em></h3> <table> <thead> <tr> <th style="text-align: left">Axis</th> <th style="text-align: left">Detail</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Scope</strong></td> <td style="text-align: left">API ↔ Service, Service ↔ DB, Publisher ↔ Subscriber</td> </tr> <tr> <td style="text-align: left"><strong>Dependencies</strong></td> <td style="text-align: left">Real on both ends, mock everything beyond</td> </tr> <tr> <td style="text-align: left"><strong>Runtime</strong></td> <td style="text-align: left">1–10 s each, &lt; 10 min suite</td> </tr> <tr> <td style="text-align: left"><strong>Tooling</strong></td> <td style="text-align: left">Pact, TestContainers, Docker‑Compose, WireMock, grpcurl</td> </tr> </tbody> </table> <h3 id="21example--swift-consumer-pact-test">2.1 Example — Swift Consumer Pact Test</h3> <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@PactTest</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="s">"PricingService"</span><span class="p">,</span> <span class="nv">provider</span><span class="p">:</span> <span class="s">"pricing-api"</span><span class="p">)</span>
<span class="kd">func</span> <span class="nf">test_price_contract</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="nf">given</span><span class="p">(</span><span class="s">"SKU capuccino exists"</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">uponReceiving</span><span class="p">(</span><span class="s">"Price lookup"</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">path</span><span class="p">(</span><span class="s">"/v1/prices/capuccino"</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">method</span><span class="p">(</span><span class="s">"GET"</span><span class="p">)</span>
    <span class="n">willRespondWith</span> <span class="p">{</span>
        <span class="nf">status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="nf">json</span><span class="p">([</span>
            <span class="s">"sku"</span><span class="p">:</span> <span class="s">"capuccino"</span><span class="p">,</span>
            <span class="s">"price"</span><span class="p">:</span> <span class="mf">3.5</span><span class="p">,</span>
            <span class="s">"currency"</span><span class="p">:</span> <span class="s">"USD"</span>
        <span class="p">])</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">client</span> <span class="o">=</span> <span class="kt">PricingClient</span><span class="p">(</span><span class="nv">base</span><span class="p">:</span> <span class="n">mockServer</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">price</span>  <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">client</span><span class="o">.</span><span class="nf">price</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="s">"capuccino"</span><span class="p">)</span>
    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">price</span><span class="o">.</span><span class="n">amount</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>When the <strong>provider</strong> publishes its own verification, the Pact Broker guarantees you never ship a schema mismatch.</p> <h3 id="22integration-antipatterns">2.2 Integration Anti‑Patterns</h3> <table> <thead> <tr> <th style="text-align: left">Smell</th> <th style="text-align: left">Fix</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><em>Database‑required tests mutate prod data</em></td> <td style="text-align: left">Spin DB in Docker, run migrations on launch (TestContainers).</td> </tr> <tr> <td style="text-align: left"><em>Network flake from public QA env</em></td> <td style="text-align: left">WireMock record‑replay, run provider verification in pipeline instead.</td> </tr> </tbody> </table> <hr/> <h2 id="3smoke-tests">3 · Smoke Tests</h2> <h3 id="binary-confidence-checkno-business-logic-just-does-it-launch"><em>Binary confidence check—no business logic, just “does it launch?”</em></h3> <table> <thead> <tr> <th style="text-align: left">Axis</th> <th style="text-align: left">Detail</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Scope</strong></td> <td style="text-align: left">Health‑check endpoints, app start‑up, critical login flow</td> </tr> <tr> <td style="text-align: left"><strong>Dependencies</strong></td> <td style="text-align: left">All real—including infra</td> </tr> <tr> <td style="text-align: left"><strong>Runtime</strong></td> <td style="text-align: left">&lt; 120 s total</td> </tr> <tr> <td style="text-align: left"><strong>Tooling</strong></td> <td style="text-align: left">Appium (device + sim), curl, k6 smoke profile, Lighthouse</td> </tr> </tbody> </table> <h3 id="31typical-mobile-smoke-suite-github-actions">3.1 Typical Mobile Smoke Suite (GitHub Actions)</h3> <table> <thead> <tr> <th style="text-align: left">Step</th> <th style="text-align: left">Command</th> <th style="text-align: center">Duration</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Provision simulator</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">xcrun simctl boot "iPhone 15"</code></td> <td style="text-align: center">8 s</td> </tr> <tr> <td style="text-align: left">Install IPA</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">xcrun simctl install booted build/App.ipa</code></td> <td style="text-align: center">3 s</td> </tr> <tr> <td style="text-align: left">Launch check</td> <td style="text-align: left">Appium script taps splash until home visible</td> <td style="text-align: center">12 s</td> </tr> <tr> <td style="text-align: left">Backend ping</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">curl https://api.stage.example.com/health</code></td> <td style="text-align: center">0.1 s</td> </tr> </tbody> </table> <p><strong>Rollback rule</strong>: any red in this job aborts the deploy; no flaky retries.</p> <hr/> <h2 id="4regression-tests">4 · Regression Tests</h2> <h3 id="codified-bug-historykeep-the-zombies-down"><em>Codified bug history—keep the zombies down</em></h3> <blockquote> <p><strong>Regression ≠ layer</strong>. It’s a <strong>label</strong> attached to tests that reproduce previous defects.</p> </blockquote> <table> <thead> <tr> <th style="text-align: left">Axis</th> <th style="text-align: left">Detail</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Scope</strong></td> <td style="text-align: left">The minimal path that used to break</td> </tr> <tr> <td style="text-align: left"><strong>Dependencies</strong></td> <td style="text-align: left">Same as the original failure context</td> </tr> <tr> <td style="text-align: left"><strong>Runtime</strong></td> <td style="text-align: left">Irrelevant; runs on feature branches modifying the file path</td> </tr> <tr> <td style="text-align: left"><strong>Tooling</strong></td> <td style="text-align: left">Whatever layer originally missed the bug — unit, functional, integration</td> </tr> </tbody> </table> <h3 id="41git-hygiene">4.1 Git Hygiene</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pytest.ini</span>
<span class="o">[</span>pytest]
markers <span class="o">=</span>
    regression: previously reported defects
</code></pre></div></div> <ul> <li>On hot‑fix PRs, add <code class="language-plaintext highlighter-rouge">@pytest.mark.regression</code> to the new test.</li> <li>Nightly job ‑‑runs <code class="language-plaintext highlighter-rouge">pytest -m regression</code> first; if that suite goes green the full matrix follows.</li> </ul> <h3 id="42metrics-to-watch">4.2 Metrics to Watch</h3> <table> <thead> <tr> <th style="text-align: left">KPI</th> <th style="text-align: center">Healthy</th> <th style="text-align: left">Action if unhealthy</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Regression coverage</strong> (unique historical Jira IDs / total bugs)</td> <td style="text-align: center">≥ 90 %</td> <td style="text-align: left">Post‑mortem: mandate test in DoD</td> </tr> <tr> <td style="text-align: left"><strong>Age of failing regression</strong></td> <td style="text-align: center">0 days</td> <td style="text-align: left">CI gate + auto‑revert commit</td> </tr> <tr> <td style="text-align: left"><strong>Regression flake rate</strong></td> <td style="text-align: center">&lt; 1 %</td> <td style="text-align: left">Stabilise or quarantine</td> </tr> </tbody> </table> <hr/> <h2 id="5putting-it-all-together">5 · Putting It All Together</h2> <h3 id="51pipeline-blueprint-mobilebackend">5.1 Pipeline Blueprint (mobile + backend)</h3> <pre><code class="language-mermaid">graph TD
    A[Dev Commit]
    A --&gt; B(Unit + Static Analysis)
    B --&gt; C(Functional Tag‑Select)
    C --&gt;|&lt;60 s| D(GitHub Review)
    D --&gt; E(Stage Deploy)
    E --&gt; F(Smoke Suite)
    E --&gt; G(Integration Contracts)
    G --&gt; H(Nightly Full Regression)
    F --&gt;|green| I(Prod Deploy Canary)
    I --&gt; J(Full Smoke on Real Devices)
</code></pre> <p>Every test type lives <strong>once</strong>, has a clear <em>gate</em> responsibility, and a hardened <em>time budget</em>.</p> <h3 id="52costconfidence-matrix">5.2 Cost ✕ Confidence Matrix</h3> <table> <thead> <tr> <th style="text-align: left">Layer</th> <th style="text-align: center">Failure Cost</th> <th style="text-align: center">Execution Cost</th> <th style="text-align: center">Confidence / min</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Unit</td> <td style="text-align: center">Low</td> <td style="text-align: center">Very Low</td> <td style="text-align: center"><strong>Highest</strong></td> </tr> <tr> <td style="text-align: left">Functional</td> <td style="text-align: center">Medium</td> <td style="text-align: center">Low</td> <td style="text-align: center">High</td> </tr> <tr> <td style="text-align: left">Integration</td> <td style="text-align: center">High</td> <td style="text-align: center">Medium</td> <td style="text-align: center">Medium</td> </tr> <tr> <td style="text-align: left">Smoke</td> <td style="text-align: center">Critical</td> <td style="text-align: center">Very Low</td> <td style="text-align: center">High</td> </tr> <tr> <td style="text-align: left">Regression</td> <td style="text-align: center">Historical</td> <td style="text-align: center">Varies</td> <td style="text-align: center">Priceless</td> </tr> </tbody> </table> <p>When deadlines loom, you cut from the <em>right‑hand columns</em>, never the left.</p> <hr/> <h2 id="6advanced-patterns-for-those-who-already-have-the-basics">6 · Advanced Patterns (for Those Who Already Have the Basics)</h2> <ol> <li><strong>Mutation Testing</strong> – run <em>stryker‑swift</em>, <em>pitest</em>, or <em>mutmut</em> nightly; mutants caught by functional tests reveal dead assertions.</li> <li><strong>Contract Diff Alerts</strong> – Git hook that fails PR if OpenAPI or Expo config changes without a matching pact update.</li> <li><strong>Test Selection by Affected Paths</strong> – run regression subset where <code class="language-plaintext highlighter-rouge">git diff</code> intersects the call‑graph; slashes PR runtime by 70 %.</li> <li><strong>Chaos in Canary</strong> – inject 30 % packet loss during smoke; if the app still loads, the UX team wins cookies.</li> <li><strong>Shadow Production</strong> – clone prod traffic to a dev flight build; treat unexpected 5xx as integration failures in real time.</li> </ol> <hr/> <h2 id="7common-pitfalls-and-cheap-fixes">7 · Common Pitfalls (And Cheap Fixes)</h2> <table> <thead> <tr> <th style="text-align: left">Pitfall</th> <th style="text-align: left">Why It Hurts</th> <th style="text-align: left">Mitigation</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>Over‑mocking</strong> in functional tests hides serialization bugs</td> <td style="text-align: left">Object misspells field, prod returns 422</td> <td style="text-align: left">Add JSON schema validation in integration layer</td> </tr> <tr> <td style="text-align: left"><strong>Un‑tagged</strong> regression tests</td> <td style="text-align: left">Hard to isolate during hot‑fix</td> <td style="text-align: left">Enforce <code class="language-plaintext highlighter-rouge">@regression</code> marker in PR template</td> </tr> <tr> <td style="text-align: left"><strong>Smoke suite grows</strong> into full E2E</td> <td style="text-align: left">Pipeline slows, teams bypass it</td> <td style="text-align: left">120‑second guardrail scripts fail build if exceeded</td> </tr> <tr> <td style="text-align: left"><strong>DB resets</strong> on every integration run</td> <td style="text-align: left">3 × run‑time</td> <td style="text-align: left">Wrap tests in one TestContainer, rollback via transaction</td> </tr> <tr> <td style="text-align: left"><strong>Flaky accessibility IDs</strong> driven by UI text</td> <td style="text-align: left">Localization breaks locators</td> <td style="text-align: left">Use <em>semantic</em> IDs; assert existence in unit tests</td> </tr> </tbody> </table> <hr/> <h2 id="8cheatsheet-for-interview-whiteboards">8 · Cheat‑Sheet for Interview Whiteboards</h2> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Layer        Boundary            Mocks?   Trigger      Budget   Failure Action
-----------  ------------------  -------  -----------  -------  -------------------
Unit         Single class/file   All      PR           &lt; 30 s   fix before merge
Functional   Feature slice       External PR &amp; Nightly &lt; 4  m   fix / revert PR
Integration  Two real services   None     Nightly      &lt; 10 m   block release
Smoke        Full stack, narrow  None     Deploy       &lt; 2  m   auto‑rollback
Regression   Historical bug      Context  Branch‑/Night Varies  hot‑fix must pass
</code></pre></div></div> <p>Memorise the middle column; recruiters love boundary talk.</p> <hr/> <h2 id="9key-takeaways">9 · Key Takeaways</h2> <ul> <li><strong>Test type = risk vector</strong> – choose the layer that kills the costliest uncertainty first.</li> <li><strong>Labels, not silos</strong> – “regression” and “smoke” cross‑cut layers; don’t duplicate code, duplicate intent.</li> <li><strong>Time budgets</strong> keep CI honest; every extra second steals throughput from your team.</li> <li><strong>Accessibility IDs</strong> pay double—stable locators for automation, inclusive UX for users.</li> </ul>]]></content><author><name></name></author><category term="quality-engineering"/><category term="testing"/><category term="sdet"/><category term="mobile"/><category term="ci"/><category term="qa"/><category term="quality‑engineering"/><summary type="html"><![CDATA[An in‑depth, code‑backed taxonomy of core test layers, with battle‑tested heuristics for mobile and backend pipelines.]]></summary></entry><entry><title type="html">Future Career Planning &amp;amp; Summary - Reflecting on SupTech, What’s My Next Step?</title><link href="https://t-mao.github.io/blog/2025/Planning/" rel="alternate" type="text/html" title="Future Career Planning &amp;amp; Summary - Reflecting on SupTech, What’s My Next Step?"/><published>2025-02-26T12:00:00+00:00</published><updated>2025-02-26T12:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Planning</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Planning/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://static.vecteezy.com/system/resources/previews/007/226/790/non_2x/career-planning-word-concepts-banner-self-assessment-education-program-presentation-website-isolated-lettering-typography-idea-with-linear-icon-outline-illustration-vector-480.webp 480w,https://static.vecteezy.com/system/resources/previews/007/226/790/non_2x/career-planning-word-concepts-banner-self-assessment-education-program-presentation-website-isolated-lettering-typography-idea-with-linear-icon-outline-illustration-vector-800.webp 800w,https://static.vecteezy.com/system/resources/previews/007/226/790/non_2x/career-planning-word-concepts-banner-self-assessment-education-program-presentation-website-isolated-lettering-typography-idea-with-linear-icon-outline-illustration-vector-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://static.vecteezy.com/system/resources/previews/007/226/790/non_2x/career-planning-word-concepts-banner-self-assessment-education-program-presentation-website-isolated-lettering-typography-idea-with-linear-icon-outline-illustration-vector.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Planning" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="introduction">Introduction</h2> <p>At SupTech, I played a dual role as both an app developer and ad-hoc project manager, constructing <strong>two</strong> cross-platform mobile applications (<em>Consumer</em> and <em>Technician</em>) from scratch. Beyond the codebase, I took on tasks ranging from UI/UX design, AI integrations, backend bridging, to seemingly unrelated chores like handling HR tasks, scheduling business errands, and assisting with high-level product decisions.</p> <p>This broad involvement taught me two critical lessons:</p> <ol> <li><strong>Technical Mastery &amp; Adaptability</strong><br/> Handling front-end, backend integrations, AI, and advanced mobile functionalities not only showcased my coding capabilities but forced me to <strong>rapidly learn</strong> new technologies and architectural decisions.</li> <li><strong>Project Management &amp; Leadership</strong><br/> Building the apps from zero demanded strong communication, stakeholder alignment, and iterative agile planning. I ended up spearheading scope documentation, release notes, and cross-department communications.</li> </ol> <p>In this post, I’ll outline:</p> <ul> <li><strong>My Achievements</strong> at SupTech</li> <li><strong>Lessons Learned</strong>: Tech &amp; Management</li> <li><strong>Future Directions</strong>: Deeper specialization, bigger tech challenges, or new environment?</li> <li><strong>Personal Brand</strong>: How to transform my experiences into an impressive portfolio</li> </ul> <hr/> <h2 id="suptech-a-quick-recap">SupTech: A Quick Recap</h2> <h3 id="end-to-end-app-development">End-to-End App Development</h3> <p><strong>Consumer App</strong> for customers and <strong>Technician App</strong> for service providers, both built with <strong>Flutter</strong> and integrated with a new MySQL/Java backend. These apps serve a unified pipeline:</p> <ul> <li><strong>Real-time location tracking</strong>, geospatial queries</li> <li><strong>AI-based fault diagnosis</strong> (AI Repair) using GPT-like LLM</li> <li><strong>Stripe</strong> for secure payments and scheduled disbursements</li> <li>Localization in English &amp; Chinese</li> <li>UI/UX with creative design patterns and code-sharing</li> </ul> <h3 id="ai-integration-gpt-based-repair-chat">AI Integration: GPT-based Repair Chat</h3> <p>I integrated a ChatGPT-like AI chatbot to help users self-diagnose common issues. The GPT integration gave customers a guided Q&amp;A flow:</p> <ul> <li><strong>Interactive debugging</strong>: Step-by-step cause identification</li> <li><strong>Self-service solutions</strong> with recommended parts &amp; instructions</li> <li>Seamless fallback to technician dispatch if the user decides to request a pro service</li> </ul> <h3 id="project-management--more">Project Management &amp; More</h3> <p>From writing product requirement documents (PRD) and drawing mind maps to daily standups and sprint retros, I led scope clarifications and architecture decisions. Meanwhile, I found myself tackling administrative tasks like shipping company packages, reorganizing HR schedules, or even tutoring the boss’s kids—situations typical of a lean startup environment.</p> <hr/> <h2 id="lessons-learned">Lessons Learned</h2> <ol> <li> <p><strong>Full-Stack Mobile Expertise</strong><br/> In building iOS/Android apps with Flutter, hooking into Node/Firebase first, then bridging to MySQL/Java:</p> <ul> <li>Mastered cross-platform app dev in <strong>Flutter</strong> with advanced state management (Riverpod/Provider).</li> <li><strong>AI</strong> integration (OpenAI GPT-like LLM).</li> <li>Payment with <strong>Stripe</strong>: PaymentIntents, Connect accounts, scheduled transfers.</li> <li>Real-time geolocation using geospatial queries, push notifications via FCM.</li> </ul> </li> <li> <p><strong>Leadership &amp; PM Skills</strong></p> <ul> <li>Owned the entire dev cycle: Requirements → Architecture → Release.</li> <li>Documented tasks, mind maps, and timelines. Acted as the bridging point between dev, design, and stakeholders.</li> <li>Balanced multiple roles under intense deadlines, validated solutions quickly, pivoted as specs changed.</li> </ul> </li> <li> <p><strong>Adaptability &amp; Problem-Solving</strong></p> <ul> <li>Frequent shifting priorities demanded <strong>fast context switching</strong>—one moment coding AI chat flows, the next debugging a location-based service, or stepping into design review calls.</li> <li>Mentored junior devs, set up code reviews, and implemented agile-like sprints.</li> </ul> </li> <li> <p><strong>Personal Growth</strong></p> <ul> <li>Developed advanced debugging under pressure (one-person dev team for months).</li> <li>Gained resilience and communication prowess, bridging business logic with technical feasibility to keep the project on track.</li> </ul> </li> </ol> <hr/> <h2 id="future-directions">Future Directions</h2> <ol> <li> <p><strong>Deeper Specialization vs. Broader Tech</strong></p> <ul> <li><strong>Option A</strong>: Join a high-level app development team or SaaS company, diving deeper into performance optimizations, architectural patterns, or specialized AI-driven features. Possibly iOS (SwiftUI + Combine) or React Native advanced.</li> <li><strong>Option B</strong>: Continue wearing multiple hats at a startup with big tech challenges, focusing on AI integration, large data sets, or building robust cross-platform systems.</li> </ul> </li> <li> <p><strong>Environment &amp; Collaboration</strong></p> <ul> <li>I’m seeking a workplace with <strong>mentorship and code quality</strong> standards, plus a strong engineering culture.</li> <li>Eager for <strong>larger-scale</strong> collaboration: code reviews, TDD, refined CI/CD pipelines, and well-structured product management.</li> </ul> </li> <li> <p><strong>Bigger Tech Challenges</strong></p> <ul> <li>Keen to integrate advanced AI/LLMs, push the boundaries in fields like AR/VR or real-time streaming.</li> <li>Open to tackling large concurrency issues, robust microservice ecosystems, or sophisticated user analytics.</li> </ul> </li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Working at SupTech was both <strong>exhausting</strong> and <strong>transformative</strong>. I proved my ability to architect, implement, and ship real-time AI-driven mobile apps under intense deadlines—while also juggling unplanned operational tasks. This intense experience shaped me into a more <strong>self-sufficient</strong>, detail-oriented developer and manager.</p> <p>As I look ahead to new opportunities, I want to:</p> <ol> <li>Join a <strong>more specialized team</strong> or environment that fosters quality engineering and bigger technical challenges.</li> <li>Bring my unique <strong>full-stack</strong> plus <strong>AI</strong> integration background, enabling robust, cutting-edge apps.</li> <li>Continue building a <strong>personal brand</strong> around advanced app dev, strong problem solving, and leadership.</li> </ol> <p><strong>If you’re seeking a developer</strong> who can tackle complex app problems from scratch, integrate AI, manage cross-functional teams, and handle unexpected tasks with resilience—I’d love to connect and explore what we can build together.</p> <hr/> <h3 id="get-in-touch">Get in Touch</h3> <ul> <li><strong>Email</strong>: <a href="mailto:tongzemao@gmail.com">tongzemao@gmail.com</a></li> </ul> <p>I’m open to discussing opportunities related to <strong>app development</strong>, <strong>AI integration</strong>, or even general <strong>full-stack roles</strong>. Feel free to reach out if my experience aligns with what you’re building. I appreciate you reading through my reflections and look forward to the next big challenge!</p>]]></content><author><name></name></author><category term="experience"/><category term="career"/><category term="growth"/><category term="reflections"/><summary type="html"><![CDATA[This article systematically summarizes my experience at SupTech and the achievements in app development while exploring my future career plans.]]></summary></entry><entry><title type="html">Building a Real-Time Chat Feature</title><link href="https://t-mao.github.io/blog/2025/Chat/" rel="alternate" type="text/html" title="Building a Real-Time Chat Feature"/><published>2025-02-25T22:15:00+00:00</published><updated>2025-02-25T22:15:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Chat</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Chat/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://media.istockphoto.com/id/1300739733/vector/message-bubbles-text-balloon-on-phone-dispaly-vector-design-template-for-messenger-chat.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=5XaPB5sDo9f_hNm1Lg3SjIqockS-Pc94XRVWzVVBnco=" sizes="95vw"/> <img src="https://media.istockphoto.com/id/1300739733/vector/message-bubbles-text-balloon-on-phone-dispaly-vector-design-template-for-messenger-chat.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=5XaPB5sDo9f_hNm1Lg3SjIqockS-Pc94XRVWzVVBnco=" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Chat" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Building a robust, real-time chat system is crucial for many mobile apps, from on-demand service platforms to social communities. In this post, I’ll outline the architecture and code considerations involved in creating a Flutter-based chat feature with message synchronization, backend triggers, and advanced user-interface design.</p> <hr/> <h2 id="high-level-approach">High-Level Approach</h2> <ol> <li><strong>Backend Integration</strong>: I rely on REST APIs or serverless functions (Firebase Functions, AWS Lambdas, etc.) for sending/receiving messages, updating read statuses, and broadcasting system events (like a user leaving, or the system acknowledging a payment).</li> <li><strong>Local State &amp; UI</strong>: On the client side, Flutter apps use <code class="language-plaintext highlighter-rouge">StreamBuilder</code>, <code class="language-plaintext highlighter-rouge">ListView</code>, or custom polling to keep a local record of conversation history. When new messages arrive, they’re appended to the local list, and the view updates in real time.</li> <li><strong>Permissions &amp; Validation</strong>: Ensure each user only accesses messages relevant to their order or context. Some apps also rely on role-based or ID-based verification to handle certain logic (e.g., “technicians” vs. “customers”).</li> </ol> <hr/> <h2 id="basic-architecture">Basic Architecture</h2> <p>The chat data model typically includes:</p> <ul> <li><strong>Message</strong>: Contains <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">senderId</code>, <code class="language-plaintext highlighter-rouge">text</code>, <code class="language-plaintext highlighter-rouge">imageUrl</code> (if any), <code class="language-plaintext highlighter-rouge">timestamp</code>, <code class="language-plaintext highlighter-rouge">messageType</code> (e.g., normal vs. system).</li> <li><strong>Conversation</strong> (optional): Tracks participants, unread counts, etc.</li> <li><strong>Server</strong>: Receives new messages through an HTTP endpoint or direct Firestore writes, then broadcasts them to all relevant participants.</li> </ul> <p>For real-time notification, you can use push notifications or background fetch logic. However, many situations also employ short polling if the user is already in the chat screen—this can sometimes simplify concurrency or offline cases.</p> <hr/> <h2 id="flutter-ui-example">Flutter UI Example</h2> <p>Below is a condensed snippet illustrating how I might manage message state, handle text+image inputs, and display messages in conversation bubbles.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'dart:typed_data'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">id</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">senderId</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">text</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">String</span><span class="o">?</span> <span class="n">imageUrl</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">int</span> <span class="n">timestamp</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">bool</span> <span class="n">isSystemMessage</span><span class="p">;</span>

  <span class="n">ChatMessage</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">senderId</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
    <span class="k">this</span><span class="o">.</span><span class="na">imageUrl</span><span class="p">,</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">timestamp</span><span class="p">,</span>
    <span class="k">this</span><span class="o">.</span><span class="na">isSystemMessage</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">ChatPage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">conversationId</span><span class="p">;</span>
  <span class="kd">const</span> <span class="n">ChatPage</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">conversationId</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">ChatPage</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_ChatPageState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_ChatPageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">ChatPage</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">_messageController</span> <span class="o">=</span> <span class="n">TextEditingController</span><span class="p">();</span>
  <span class="kt">List</span><span class="p">&lt;</span><span class="n">ChatMessage</span><span class="p">&gt;</span> <span class="n">_messages</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kt">bool</span> <span class="n">_isUploading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="n">Uint8List</span><span class="o">?</span> <span class="n">_pendingImageBytes</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="n">_fetchMessages</span><span class="p">();</span> <span class="c1">// initial fetch</span>
    <span class="c1">// Optionally set up a periodic polling or streaming subscription</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">_fetchMessages</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Call backend or DB to load existing messages</span>
    <span class="kd">final</span> <span class="n">fetchedMessages</span> <span class="o">=</span> <span class="k">await</span> <span class="n">_mockFetchMessagesFromServer</span><span class="p">();</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_messages</span> <span class="o">=</span> <span class="n">fetchedMessages</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">List</span><span class="p">&lt;</span><span class="n">ChatMessage</span><span class="p">&gt;&gt;</span> <span class="n">_mockFetchMessagesFromServer</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Replace with your actual logic, e.g.:</span>
    <span class="k">await</span> <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="p">(</span><span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="mi">500</span><span class="p">));</span>
    <span class="k">return</span> <span class="p">[</span>
      <span class="n">ChatMessage</span><span class="p">(</span>
        <span class="nl">id:</span> <span class="s">'m1'</span><span class="p">,</span>
        <span class="nl">senderId:</span> <span class="s">'customer123'</span><span class="p">,</span>
        <span class="nl">text:</span> <span class="s">'Hi, I have a question about my order.'</span><span class="p">,</span>
        <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span> <span class="o">-</span> <span class="mi">60000</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="n">ChatMessage</span><span class="p">(</span>
        <span class="nl">id:</span> <span class="s">'m2'</span><span class="p">,</span>
        <span class="nl">senderId:</span> <span class="s">'system'</span><span class="p">,</span>
        <span class="nl">text:</span> <span class="s">'System event: The technician is en route.'</span><span class="p">,</span>
        <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span> <span class="o">-</span> <span class="mi">30000</span><span class="p">,</span>
        <span class="nl">isSystemMessage:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">];</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_sendMessage</span><span class="p">({</span><span class="kt">String</span><span class="o">?</span> <span class="n">text</span><span class="p">,</span> <span class="kt">String</span><span class="o">?</span> <span class="n">imageUrl</span><span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// Make sure we have content</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">text</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">imageUrl</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">imageUrl</span><span class="o">.</span><span class="na">isEmpty</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Construct a local message</span>
    <span class="kd">final</span> <span class="n">newMsg</span> <span class="o">=</span> <span class="n">ChatMessage</span><span class="p">(</span>
      <span class="nl">id:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span>
      <span class="nl">senderId:</span> <span class="s">'technician456'</span><span class="p">,</span>
      <span class="nl">text:</span> <span class="n">text</span> <span class="o">??</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">imageUrl:</span> <span class="n">imageUrl</span><span class="p">,</span>
      <span class="nl">timestamp:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">()</span><span class="o">.</span><span class="na">millisecondsSinceEpoch</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Update local UI</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_messages</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">newMsg</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Optionally call backend to persist</span>
    <span class="c1">// e.g., await MyAPI.sendChatMessage(widget.conversationId, newMsg);</span>
  <span class="p">}</span>

  <span class="n">Widget</span> <span class="n">_buildMessageBubble</span><span class="p">(</span><span class="n">ChatMessage</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">isSystemMessage</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// system bubble</span>
      <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
        <span class="nl">margin:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">symmetric</span><span class="p">(</span><span class="nl">vertical:</span> <span class="mi">8</span><span class="p">),</span>
        <span class="nl">alignment:</span> <span class="n">Alignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
        <span class="nl">child:</span> <span class="n">Container</span><span class="p">(</span>
          <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
          <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">grey</span><span class="o">.</span><span class="na">shade200</span><span class="p">,</span>
            <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
          <span class="p">),</span>
          <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span>
            <span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
            <span class="nl">textAlign:</span> <span class="n">TextAlign</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">style:</span> <span class="kd">const</span> <span class="n">TextStyle</span><span class="p">(</span><span class="nl">fontStyle:</span> <span class="n">FontStyle</span><span class="o">.</span><span class="na">italic</span><span class="p">),</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">final</span> <span class="kt">bool</span> <span class="n">isMine</span> <span class="o">=</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">senderId</span> <span class="o">==</span> <span class="s">'technician456'</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">margin:</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">fromLTRB</span><span class="p">(</span><span class="n">isMine</span> <span class="o">?</span> <span class="mi">60</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">isMine</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
      <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
      <span class="nl">decoration:</span> <span class="n">BoxDecoration</span><span class="p">(</span>
        <span class="nl">color:</span> <span class="n">isMine</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">shade100</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="o">.</span><span class="na">shade100</span><span class="p">,</span>
        <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
        <span class="nl">crossAxisAlignment:</span>
            <span class="n">isMine</span> <span class="o">?</span> <span class="n">CrossAxisAlignment</span><span class="o">.</span><span class="na">end</span> <span class="o">:</span> <span class="n">CrossAxisAlignment</span><span class="o">.</span><span class="na">start</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="p">)</span>
            <span class="n">Text</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="p">),</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span><span class="o">!.</span><span class="na">isNotEmpty</span><span class="p">)</span>
            <span class="n">Padding</span><span class="p">(</span>
              <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">only</span><span class="p">(</span><span class="nl">top:</span> <span class="mi">8</span><span class="p">),</span>
              <span class="nl">child:</span> <span class="n">Image</span><span class="o">.</span><span class="na">network</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="na">imageUrl</span><span class="o">!</span><span class="p">),</span>
            <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
        <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Conversation #</span><span class="si">${widget.conversationId}</span><span class="s">'</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Expanded</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">ListView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
              <span class="nl">itemCount:</span> <span class="n">_messages</span><span class="o">.</span><span class="na">length</span><span class="p">,</span>
              <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_buildMessageBubble</span><span class="p">(</span><span class="n">_messages</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span>
            <span class="p">),</span>
          <span class="p">),</span>
          <span class="n">_buildTextComposer</span><span class="p">(),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Widget</span> <span class="n">_buildTextComposer</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">SafeArea</span><span class="p">(</span>
      <span class="nl">child:</span> <span class="n">Row</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">IconButton</span><span class="p">(</span>
            <span class="nl">icon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">add_photo_alternate</span><span class="p">),</span>
            <span class="nl">onPressed:</span> <span class="n">_onSelectImage</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Expanded</span><span class="p">(</span>
            <span class="nl">child:</span> <span class="n">TextField</span><span class="p">(</span>
              <span class="nl">controller:</span> <span class="n">_messageController</span><span class="p">,</span>
              <span class="nl">decoration:</span> <span class="kd">const</span> <span class="n">InputDecoration</span><span class="p">(</span>
                <span class="nl">hintText:</span> <span class="s">'Type your message...'</span><span class="p">,</span>
              <span class="p">),</span>
            <span class="p">),</span>
          <span class="p">),</span>
          <span class="n">IconButton</span><span class="p">(</span>
            <span class="nl">icon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">send</span><span class="p">),</span>
            <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
              <span class="kd">final</span> <span class="n">text</span> <span class="o">=</span> <span class="n">_messageController</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">trim</span><span class="p">();</span>
              <span class="n">_messageController</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
              <span class="n">_sendMessage</span><span class="p">(</span><span class="nl">text:</span> <span class="n">text</span><span class="p">);</span>
            <span class="p">},</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Pseudocode for image picking</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_onSelectImage</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// final selectedFile = await pickImage(); // implement picking</span>
    <span class="c1">// _isUploading = true; setState(() {});</span>
    <span class="c1">// final uploadedUrl = await MyAPI.uploadFile(selectedFile);</span>
    <span class="c1">// _isUploading = false; setState(() {});</span>
    <span class="c1">// _sendMessage(imageUrl: uploadedUrl);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="key-observations">Key Observations</h3> <ul> <li>The code uses a local <code class="language-plaintext highlighter-rouge">_messages</code> list for immediate UI updates.</li> <li>Actual network calls (e.g., to a REST endpoint or Firestore) happen in an async function. This ensures the UI remains responsive.</li> <li>System messages (like “technician is on the way”) are displayed differently than normal user messages.</li> </ul> <hr/> <h2 id="handling-advanced-scenarios">Handling Advanced Scenarios</h2> <ul> <li><strong>Unread Indicators</strong>: If multiple screens or partial user sessions are involved, track <code class="language-plaintext highlighter-rouge">lastSeenMessageTime</code> on the server. In my apps, I typically store each user’s last-read timestamp in a database and then highlight any newer messages.</li> <li><strong>Delivery Receipts</strong>: If you need full reliability (like “delivered” or “read” confirmations), design a small queue to push read acknowledgements back to the server.</li> <li><strong>Push Notifications</strong>: Typically used if a user is outside the app. On new messages, a backend function triggers a push, and the mobile OS (Android/iOS) displays it. Tapping the notification deep-links into the chat screen.</li> </ul> <hr/> <h2 id="concluding-thoughts">Concluding Thoughts</h2> <p>Building a chat feature requires careful orchestration between the frontend, backend, and push notification system. By focusing on clarity of message structures, implementing robust synchronization (pull or push), and differentiating user/system flows in the UI, you’ll create a messaging experience that feels immediate and stable. Whether you’re working on a simple 1-on-1 chat or a large multi-participant system, these core principles remain the same.</p> <p>If done right, a real-time chat not only boosts user engagement but also enables advanced features—such as in-chat payments, scheduling, and shared media—making your mobile app far more valuable in the eyes of both users.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="chat"/><category term="messaging"/><summary type="html"><![CDATA[An in-depth look at real-time chat implementation for mobile apps]]></summary></entry><entry><title type="html">Harnessing Google Maps for Real-Time Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Google-Maps/" rel="alternate" type="text/html" title="Harnessing Google Maps for Real-Time Mobile Apps"/><published>2025-02-20T09:30:00+00:00</published><updated>2025-02-20T09:30:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Google-Maps</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Google-Maps/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-480.webp 480w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-800.webp 800w,https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://t3.ftcdn.net/jpg/02/80/13/30/360_F_280133039_IusHV9kCGFKrpIhd73AscKXyGLsz7iAG.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Google Maps" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building modern mobile applications, integrating location-based features can be a powerful differentiator. Whether you’re matching users to geographically nearby services, providing turn-by-turn directions, or displaying on-demand tasks in real time, there’s no shortage of use cases for <strong>Google Maps</strong>. As an app developer, I’ve personally designed production-level integrations around Google Maps—covering everything from real-time location updates to geospatial queries and push notifications.</p> <p>Below, I’ll share an overview of how I structure these systems, including the geolocation logic, the custom markers for side-by-side listings, and how these tie into serverless backends. While I can’t show you every bit of private production code, I can highlight key patterns and share pseudocode that I’ve refined in real projects.</p> <hr/> <h2 id="why-use-google-maps">Why Use Google Maps?</h2> <ol> <li><strong>Rich Features</strong>: Google Maps provides built-in map layers, traffic data, Street View, and more.</li> <li><strong>Developer Ecosystem</strong>: The <a href="https://developers.google.com/maps/documentation/places/web-service/overview">Places API</a>, auto-complete, geocoding, distance matrix, and many auxiliary endpoints let you expand beyond simple maps.</li> <li><strong>Global Reach</strong>: Support for dozens of locales and robust handling of edge cases around lat/lng formats.</li> <li><strong>Flutter &amp; Native SDKs</strong>: Whether you’re using Flutter, React Native, or native iOS/Android, Google Maps tends to have well-tested integrations.</li> <li><strong>Extensive Documentation</strong>: Tutorials, forums, and example code abound, reducing friction for advanced customizations.</li> </ol> <hr/> <h2 id="architectural-overview">Architectural Overview</h2> <p>In my production apps, the Google Maps piece is part of a broader architecture:</p> <ol> <li> <p><strong>Backend</strong> (Firebase Functions or Node.js microservices)</p> <ul> <li>Manages user data and location data.</li> <li>Performs geospatial queries (e.g., “find tasks within X miles of the user”).</li> <li>Schedules push notifications or watchers if certain distances or thresholds are crossed.</li> </ul> </li> <li> <p><strong>Mobile App</strong> (Flutter in my case)</p> <ul> <li>Displays interactive maps to the user.</li> <li>Subscribes to the device’s real-time location and streams it to the backend if needed.</li> <li>Renders dynamic markers, sometimes with custom icons or labels indicating cost/availability.</li> </ul> </li> <li> <p><strong>Location Services</strong></p> <ul> <li>Often uses the phone’s native geolocation.</li> <li>Optionally stores latitude and longitude to Firestore for real-time updates.</li> <li>In certain workflows, a background service (like a geofencing service) posts location updates to the server at intervals or upon significant movement.</li> </ul> </li> </ol> <hr/> <h2 id="implementation-flutter-map-integration">Implementation: Flutter Map Integration</h2> <p>Below is a simplified snippet—reflecting the approach I personally coded in Flutter. I rely on the <a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a> plugin for map rendering, combining it with location or geolocator plugins for device position. Then, I orchestrate Firestore reads to show relevant tasks or data points.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:google_maps_flutter/google_maps_flutter.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:geolocator/geolocator.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">NearbyJobsMap</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">NearbyJobsMap</span><span class="p">({</span><span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">key:</span> <span class="n">key</span><span class="p">);</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_NearbyJobsMapState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_NearbyJobsMapState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">NearbyJobsMap</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kd">late</span> <span class="n">GoogleMapController</span> <span class="n">_mapController</span><span class="p">;</span>
  <span class="kd">final</span> <span class="kt">Set</span><span class="p">&lt;</span><span class="n">Marker</span><span class="p">&gt;</span> <span class="n">_markers</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="n">Position</span><span class="o">?</span> <span class="n">_currentPosition</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">initState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">initState</span><span class="p">();</span>
    <span class="n">_fetchCurrentLocation</span><span class="p">();</span>
    <span class="n">_loadMarkersFromServer</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_fetchCurrentLocation</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">isServiceEnabled</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">isLocationServiceEnabled</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isServiceEnabled</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Prompt user to enable GPS</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">LocationPermission</span> <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">checkPermission</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">denied</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">requestPermission</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">deniedForever</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Properly handle the case when user denies location forever</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">final</span> <span class="n">position</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="p">(</span>
      <span class="nl">desiredAccuracy:</span> <span class="n">LocationAccuracy</span><span class="o">.</span><span class="na">high</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_currentPosition</span> <span class="o">=</span> <span class="n">position</span><span class="p">);</span>
    <span class="c1">// Optionally, update server with the user's current position</span>
    <span class="c1">// e.g. MyServerAPI.updatePosition(position.latitude, position.longitude);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">_loadMarkersFromServer</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="c1">// In practice, you'd call your own API or read from Firestore:</span>
    <span class="c1">// final tasks = await MyServerAPI.fetchNearbyTasks();</span>
    <span class="c1">// tasks.forEach((task) {</span>
    <span class="c1">//   _markers.add(_createMarker(task.lat, task.lng, task.id));</span>
    <span class="c1">// });</span>
    <span class="c1">// setState(() {});</span>

    <span class="c1">// For demonstration, just add a dummy marker:</span>
    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="n">_markers</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">Marker</span><span class="p">(</span>
        <span class="nl">markerId:</span> <span class="kd">const</span> <span class="n">MarkerId</span><span class="p">(</span><span class="s">"testMarker"</span><span class="p">),</span>
        <span class="nl">position:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">),</span> <span class="c1">// SF</span>
        <span class="nl">infoWindow:</span> <span class="kd">const</span> <span class="n">InfoWindow</span><span class="p">(</span><span class="nl">title:</span> <span class="s">"Dummy Task"</span><span class="p">,</span> <span class="nl">snippet:</span> <span class="s">"Tap for details"</span><span class="p">),</span>
        <span class="nl">onTap:</span> <span class="p">()</span> <span class="p">{</span>
          <span class="c1">// Possibly navigate to details</span>
        <span class="p">},</span>
      <span class="p">));</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">startLatLng</span> <span class="o">=</span> <span class="n">_currentPosition</span> <span class="o">!=</span> <span class="kc">null</span>
        <span class="o">?</span> <span class="n">LatLng</span><span class="p">(</span><span class="n">_currentPosition</span><span class="o">!.</span><span class="na">latitude</span><span class="p">,</span> <span class="n">_currentPosition</span><span class="o">!.</span><span class="na">longitude</span><span class="p">)</span>
        <span class="o">:</span> <span class="kd">const</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.7749</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.4194</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Nearby Jobs Map"</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">GoogleMap</span><span class="p">(</span>
        <span class="nl">onMapCreated:</span> <span class="p">(</span><span class="n">controller</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_mapController</span> <span class="o">=</span> <span class="n">controller</span><span class="p">,</span>
        <span class="nl">initialCameraPosition:</span> <span class="n">CameraPosition</span><span class="p">(</span>
          <span class="nl">target:</span> <span class="n">startLatLng</span><span class="p">,</span>
          <span class="nl">zoom:</span> <span class="mf">13.0</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="nl">markers:</span> <span class="n">_markers</span><span class="p">,</span>
        <span class="nl">myLocationEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">myLocationButtonEnabled:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nl">zoomControlsEnabled:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="points-to-note">Points to Note</h3> <ul> <li><strong>User Permissions</strong>: On iOS, you need to handle <code class="language-plaintext highlighter-rouge">Info.plist</code> usage descriptions. On Android, ensure you ask for runtime permissions on versions &gt; 6.0.</li> <li><strong>Custom Marker Icons</strong>: For advanced UI, I sometimes generate dynamic bitmaps (e.g., showing a price) and convert them to <code class="language-plaintext highlighter-rouge">BitmapDescriptor</code>.</li> <li><strong>Handling Real-time Updates</strong>: <code class="language-plaintext highlighter-rouge">StreamBuilder</code> on Firestore or a custom WebSocket can automatically push new markers or remove them if tasks are completed.</li> <li><strong>Performance</strong>: Watch out for re-rendering too many markers. Consider clustering strategies if you have hundreds or thousands of data points.</li> </ul> <hr/> <h2 id="real-time-location-and-firestore-sync">Real-Time Location and Firestore Sync</h2> <p>In one of my apps, technicians needed to see newly posted tasks within a certain radius in near real time. My flow:</p> <ol> <li><strong>Technician Streams Position</strong>: The phone’s location updates are periodically posted to the backend.</li> <li><strong>Backend Recomputes</strong>: A cloud function or Node service looks up tasks within the distance threshold, then updates a “nearby_orders” array in Firestore for that technician.</li> <li><strong>Frontend Receives Snapshot</strong>: The phone uses a Firestore snapshot listener on that “nearby_orders” array. The map is updated accordingly.</li> </ol> <p>This approach has proven robust in production, though it means you must carefully handle updates: too-frequent location streaming can be costly on battery and data usage.</p> <hr/> <h2 id="auto-complete-and-geocoding">Auto-Complete and Geocoding</h2> <p>For location searching, I often use the <a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete">Places API Autocomplete</a>. My typical pattern:</p> <ul> <li><strong>User types</strong> an address or search query.</li> <li><strong>Call Autocomplete</strong> endpoint to fetch suggestions, then build a small dropdown.</li> <li>On selection, <strong>Geocode</strong> the place to get lat/lng, update the map camera, and optionally store that as the user’s desired location.</li> </ul> <p>Most map SDKs or the Flutter plugin community has direct solutions for this, but you can also manually integrate the REST endpoints or an official iOS/Android library if you need finer control.</p> <hr/> <h2 id="error-handling-and-edge-cases">Error Handling and Edge Cases</h2> <ol> <li><strong>GPS Disabled</strong>: Prompt the user to enable location services.</li> <li><strong>Permissions Denied</strong>: Provide a helpful flow. Possibly degrade gracefully with a default location or “map not available.”</li> <li><strong>Low Accuracy</strong>: If you need turn-by-turn precision, watch for accuracy disclaimers or calibrate the best accuracy level.</li> <li><strong>Scaling</strong>: Don’t attempt to place thousands of markers naively. Implement clustering or server-side bounding queries.</li> </ol> <hr/> <h2 id="personal-experience--key-takeaways">Personal Experience &amp; Key Takeaways</h2> <ul> <li><strong>Production Hardening</strong>: In real apps, user location can occasionally fail or come through with stale data. Build robust fallback logic.</li> <li><strong>Platform Nuances</strong>: On Android, background location requires extra permission logic. On iOS, partial or “approximate” location can hamper your radius queries.</li> <li><strong>Tight Coupling with Firestore</strong>: If you store lat/lng directly in Firestore for real-time sync, plan your reads so you don’t spam the user’s bandwidth with constant snapshot updates.</li> <li><strong>Push Notifications</strong>: Tying push notifications to location events (e.g., “a new job posted near you”) requires a server or cloud function approach. I’ve personally coded a system that runs every few minutes, checks for new tasks within X miles of each available tech, and sends an FCM notification.</li> </ul> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Integrating Google Maps into a mobile app opens up an entire class of location-centric features—whether you’re listing available jobs, searching for services near a user, or simply displaying a user’s current route. In my own production code, I rely on a combination of:</p> <ul> <li><strong>Flutter</strong> for a clean cross-platform map UI.</li> <li><strong>Geolocator</strong> for advanced permissions and real-time location streams.</li> <li><strong>Firestore</strong> or custom server logic for tasks, push notifications, and geospatial queries.</li> </ul> <p>The result is a responsive, real-time solution that seamlessly updates as new tasks appear or user positions change. If you’re building (or planning to build) an app that depends on map functionality, Google Maps is an excellent place to start—and with the right architecture, you can deliver an experience that feels almost magically relevant and immediate to your users.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="location"/><category term="google-maps"/><summary type="html"><![CDATA[An inside look at how I built location-based features in my production apps using Google Maps]]></summary></entry><entry><title type="html">Integrating Stripe Payments in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Stripe-Payments/" rel="alternate" type="text/html" title="Integrating Stripe Payments in Mobile Apps"/><published>2025-02-16T12:00:00+00:00</published><updated>2025-02-16T12:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Stripe-Payments</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Stripe-Payments/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-480.webp 480w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-800.webp 800w,https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.digitalcommerce360.com/wp-content/uploads/2023/04/shutterstock_1936083859.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Stripe Payments" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Handling secure payments and payouts is a critical component of many modern apps, especially those offering paid services or marketplaces. One robust solution for this domain is <a href="https://stripe.com/">Stripe</a>. Below I’ll walk through advanced use cases such as setting up PaymentIntents, ephemeral keys, connected accounts, and some behind-the-scenes tasks with Firebase Cloud Functions—all of which I have personally coded in production for my projects.</p> <h2 id="why-use-stripe">Why Use Stripe?</h2> <ol> <li><strong>Security:</strong> Stripe offers top-tier PCI compliance and thorough documentation.</li> <li><strong>Global Support:</strong> It handles multiple currencies and languages, simplifying worldwide deployment.</li> <li><strong>Feature Breadth:</strong> Beyond simple charges, it supports advanced flows—like PaymentIntents, subscription management, Apple/Google Pay, connected accounts for payouts, etc.</li> <li><strong>Developer-friendly:</strong> Clean REST APIs, webhooks, and official SDKs for popular platforms.</li> </ol> <h2 id="high-level-architecture">High-Level Architecture</h2> <p>My production systems typically revolve around these elements:</p> <ol> <li> <p><strong>Backend (e.g., Node.js, Firebase Functions, or custom server)</strong></p> <ul> <li>Securely stores Stripe API keys.</li> <li>Creates ephemeral keys, PaymentIntents, and handles card confirmations or verification flows.</li> <li>Manages connected accounts for multi-sided marketplaces (if your business includes payouts to external sellers).</li> <li>Often includes scheduling modules to handle delayed transfers or refunds.</li> </ul> </li> <li> <p><strong>Client-Side (Mobile App)</strong></p> <ul> <li>Initiates payment flows using ephemeral keys from the backend.</li> <li>Displays payment sheets or minimal UI for card input.</li> <li>Optionally integrates Google Pay or Apple Pay for frictionless checkout.</li> <li>Subscribes to real-time push notifications for status updates.</li> </ul> </li> </ol> <h3 id="a-note-on-push-notifications">A Note on Push Notifications</h3> <p>In my case, I also integrated FCM tokens and push-notification logic so that users and technicians receive timely payment or order updates. A specialized scheduling function scans Firestore for scheduled notifications, then sends them at the correct time. While this may not be strictly related to Stripe, it’s an essential part of delivering a cohesive mobile commerce experience.</p> <h2 id="payment-flow-in-a-nutshell">Payment Flow in a Nutshell</h2> <p>A typical in-app payment flow might look like this:</p> <ol> <li><strong>User Chooses Product</strong>: The user selects a product or a service in your app.</li> <li><strong>Backend Request</strong>: The mobile client calls your backend with product details (price, currency, etc.).</li> <li><strong>Server Creates PaymentIntent</strong>: The server uses the Stripe API to create a PaymentIntent with the desired amount and currency.</li> <li><strong>Ephemeral Key Generation</strong>: The server also retrieves or creates a Stripe <code class="language-plaintext highlighter-rouge">Customer</code> and returns an EphemeralKey for the client’s current session.</li> <li><strong>Display Payment UI</strong>: Your app either uses Stripe’s native Payment Sheet or a custom card entry form.</li> <li><strong>Confirm Payment</strong>: The user enters payment details, Stripe processes them, and you receive a callback or webhook confirming success.</li> </ol> <h3 id="example-pseudocode-for-payment-creation">Example Pseudocode for Payment Creation</h3> <p>Below is a small snippet that reflects the approach I coded. On my backend, I store secrets as environment variables and then set up ephemeral keys accordingly:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">stripe</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">stripe</span><span class="dl">"</span><span class="p">)(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">STRIPE_SECRET_KEY</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">createPaymentIntent</span><span class="p">({</span> <span class="nx">amount</span><span class="p">,</span> <span class="nx">currency</span><span class="p">,</span> <span class="nx">customerId</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// Validate amounts and currency server-side</span>
  <span class="kd">const</span> <span class="nx">paymentIntent</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">paymentIntents</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
    <span class="na">amount</span><span class="p">:</span> <span class="nx">amount</span><span class="p">,</span> <span class="c1">// e.g., 999 for $9.99</span>
    <span class="na">currency</span><span class="p">:</span> <span class="nx">currency</span><span class="p">,</span> <span class="c1">// e.g., 'usd'</span>
    <span class="na">customer</span><span class="p">:</span> <span class="nx">customerId</span><span class="p">,</span> <span class="c1">// existing or newly created customer</span>
    <span class="na">payment_method_types</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="p">],</span>
    <span class="c1">// Additional configuration if needed</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">paymentIntent</span><span class="p">.</span><span class="nx">client_secret</span><span class="p">;</span> <span class="c1">// pass to the mobile app</span>
<span class="p">}</span>
</code></pre></div></div> <p>I typically wrap this in a Firebase Function or similar cloud function to securely interface with the mobile client. My real implementation also incorporates ephemeral key generation to allow dynamic updates to PaymentIntents from the client side, plus a few checks to ensure consistent currency and correct environment usage (test vs. production).</p> <h2 id="payouts-with-connected-accounts">Payouts with Connected Accounts</h2> <p>One advanced scenario is paying out to third parties—common in multi-vendor marketplaces or gig-economy apps. Stripe’s <a href="https://stripe.com/connect">Connect</a> flow allows you to:</p> <ol> <li>Create a <strong>connected account</strong> for each seller/technician.</li> <li>Collect payments from end customers.</li> <li>Programmatically distribute earnings to connected accounts.</li> </ol> <h3 id="example-flow">Example Flow</h3> <ul> <li><strong>User Orders a Service</strong>: Payment goes into your platform’s Stripe account.</li> <li><strong>Service Completed</strong>: The code calls <code class="language-plaintext highlighter-rouge">stripe.transfers.create()</code> or schedules future transfers to the connected account.</li> <li><strong>Notification</strong>: The user and service provider receive updates on transaction statuses.</li> </ul> <p>I wrote a back-end routine that:</p> <ol> <li>Confirms a PaymentIntent is successful.</li> <li>Looks up the relevant connected account.</li> <li>Schedules or processes a transfer to that connected account—sometimes with a short delay, giving me time for validation.</li> </ol> <p>A <em>simplified</em> version:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">stripe</span><span class="p">.</span><span class="nx">transfers</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
  <span class="na">amount</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span> <span class="c1">// e.g., 2000 = $20.00</span>
  <span class="na">currency</span><span class="p">:</span> <span class="dl">"</span><span class="s2">usd</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">destination</span><span class="p">:</span> <span class="dl">"</span><span class="s2">acct_12345XYZ</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// The connected account ID</span>
<span class="p">});</span>
</code></pre></div></div> <p>Behind the scenes, it’s crucial to handle potential transfer failures, partial refunds, and edge cases like insufficient platform balance or incomplete KYC for the connected account. In my own code, I sometimes store these transfers in Firestore and run a scheduled function (Pub/Sub trigger) to finalize them once the funds fully settle.</p> <h2 id="implementation-nuances">Implementation Nuances</h2> <ol> <li><strong>Sensitive API Keys</strong>: Keep them strictly on the server side. Do not embed secret keys in mobile code.</li> <li><strong>Ephemeral Keys</strong>: They are short-lived. Renew them if a user session is extended or re-authenticated.</li> <li><strong>Webhooks</strong>: Stripe can push real-time event notifications (e.g., <code class="language-plaintext highlighter-rouge">payment_intent.succeeded</code>, <code class="language-plaintext highlighter-rouge">payment_intent.payment_failed</code>). Make sure to securely handle these events in your backend for accurate status updates.</li> <li><strong>Testing</strong>: Stripe’s sandbox environment with test card numbers is extremely helpful. Properly integrate test keys first, then pivot to live keys when you’re ready.</li> <li><strong>Multi-Environment Strategy</strong>: I maintain separate function entry points for test vs. production flows, ensuring that test transactions never pollute the real environment.</li> </ol> <h3 id="interfacing-with-firebase-and-flutter">Interfacing with Firebase and Flutter</h3> <p>On the Flutter side, I rely on the <code class="language-plaintext highlighter-rouge">flutter_stripe</code> plugin to present the payment sheet or a custom card field. Meanwhile, my Firebase Functions handle ephemeral key creation, PaymentIntent creation, and additional push logic. This pattern ensures the app remains lightweight, with all critical secrets and logic secured in the cloud.</p> <h2 id="conclusion">Conclusion</h2> <p>Stripe offers a powerful suite of payment APIs for mobile apps. Through PaymentIntents and ephemeral keys, you can securely accept one-time card payments, manage recurring billing, or even orchestrate multi-party payouts with Connect. The code I wrote for my own applications carefully orchestrates these building blocks—ensuring a frictionless user experience, robust error handling, and a secure payment pipeline.</p> <p>Whether you need a quick “pay now” button or a sophisticated marketplace system, Stripe remains a reliable choice for in-app transactions. By focusing on well-structured backend endpoints, ephemeral key generation, and thoughtful error handling, you can confidently deploy production-grade payment solutions. My own additions—like scheduling push notifications and building advanced logic for delayed payouts—further showcase how integrating Stripe can be extended to meet real-world business complexities. If you’re building a mobile commerce or gig-economy platform, Stripe is definitely worth a serious look.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="payments"/><category term="stripe"/><summary type="html"><![CDATA[A practical look at adding secure in-app payments and payouts with Stripe]]></summary></entry><entry><title type="html">Streamlining Network Calls with a Custom DioInstance</title><link href="https://t-mao.github.io/blog/2025/Network-Calls/" rel="alternate" type="text/html" title="Streamlining Network Calls with a Custom DioInstance"/><published>2025-02-12T10:00:00+00:00</published><updated>2025-02-12T10:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Network-Calls</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Network-Calls/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-480.webp 480w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-800.webp 800w,https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://bizimages.withfloats.com/tile/66fbce0df93376ef9cc55c3e.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Network Calls" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When building mobile apps, reliable HTTP networking is paramount. In the Dart/Flutter ecosystem, <a href="https://pub.dev/packages/dio">Dio</a> stands out as a robust library for HTTP requests. While you can quickly fire off GETs and POSTs with default configs, more complex applications benefit from a unified, reusable Dio instance (commonly referred to as <code class="language-plaintext highlighter-rouge">DioInstance</code>).</p> <p>I’ve personally coded and refined a custom <code class="language-plaintext highlighter-rouge">DioInstance</code> solution to handle everything from request logging and dynamic headers to file uploads. Below is an overview of the architectural choices that have proven invaluable for large-scale apps.</p> <hr/> <h2 id="why-a-single-dioinstance">Why a Single DioInstance?</h2> <p>Most production apps rely on consistent request configurations (headers, timeouts, interceptors, etc.). Creating a single shared <code class="language-plaintext highlighter-rouge">DioInstance</code> with these policies ensures:</p> <ol> <li><strong>Centralized Configuration:</strong> Modify base URL, timeouts, or content types in one place.</li> <li><strong>Global Interceptors:</strong> Cleanly integrate logic for logging, authentication tokens, or custom error handling.</li> <li><strong>Maintainability:</strong> Extending or changing behavior is straightforward—no need to replicate logic across multiple files.</li> </ol> <hr/> <h2 id="core-features">Core Features</h2> <p>In my own work, I structured the code to tackle several real-world concerns:</p> <ol> <li> <p><strong>Initialization &amp; Safety Checks</strong></p> <ul> <li>Enforce a single initialization step, so any subsequent method calls can rely on guaranteed defaults (like timeouts or base URLs).</li> <li>Throw meaningful exceptions if someone forgets to initialize.</li> </ul> </li> <li> <p><strong>HTTP Methods</strong></p> <ul> <li>Provide a set of convenience functions, e.g., <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">post()</code>, and <code class="language-plaintext highlighter-rouge">upload()</code>, each using custom options and interceptors under the hood.</li> <li>Support query parameters, form data, JSON bodies, or multipart uploads with minimal friction.</li> </ul> </li> <li> <p><strong>Interceptors</strong></p> <ul> <li><strong>Header/Token Interceptor</strong>: Attaches custom headers like tokens, language codes, or other user-specific fields.</li> <li><strong>Logging Interceptor</strong>: Prints requests/responses or sends them to a dedicated logger. This drastically simplifies debugging network issues.</li> <li><strong>Response Interceptor</strong>: Allows for uniform success/error handling. For instance, you can parse a known <code class="language-plaintext highlighter-rouge">code</code> field in the response JSON and throw an exception if it isn’t <code class="language-plaintext highlighter-rouge">200</code>.</li> </ul> </li> <li> <p><strong>File Upload</strong></p> <ul> <li>Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> with the local file path.</li> <li>Allows a universal code path for multi-file or single-file uploads.</li> </ul> </li> <li> <p><strong>Base URL Switching</strong></p> <ul> <li>Handy for toggling between dev, staging, and production servers without rewriting code.</li> </ul> </li> </ol> <hr/> <h2 id="a-condensed-example">A Condensed Example</h2> <p>Here’s an abbreviated version of my approach, demonstrating the main ideas:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:io'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:dio/dio.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">DioInstance</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="n">DioInstance</span><span class="o">?</span> <span class="n">_instance</span><span class="p">;</span>
  <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span> <span class="c1">// Private constructor</span>

  <span class="c1">// Public accessor for the singleton</span>
  <span class="kd">static</span> <span class="n">DioInstance</span> <span class="n">getInstance</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">_instance</span> <span class="o">??=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">_internal</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_instance</span><span class="o">!</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">late</span> <span class="n">Dio</span> <span class="n">_dio</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">initDio</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">baseUrl</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">connectTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">receiveTimeout</span><span class="p">,</span>
    <span class="n">Duration</span><span class="o">?</span> <span class="n">sendTimeout</span><span class="p">,</span>
    <span class="n">ResponseType</span> <span class="n">responseType</span> <span class="o">=</span> <span class="n">ResponseType</span><span class="o">.</span><span class="na">json</span><span class="p">,</span>
  <span class="p">})</span> <span class="p">{</span>
    <span class="n">_dio</span> <span class="o">=</span> <span class="n">Dio</span><span class="p">(</span><span class="n">BaseOptions</span><span class="p">(</span>
      <span class="nl">baseUrl:</span> <span class="n">baseUrl</span><span class="p">,</span>
      <span class="nl">connectTimeout:</span> <span class="n">connectTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">receiveTimeout:</span> <span class="n">receiveTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">sendTimeout:</span> <span class="n">sendTimeout</span> <span class="o">??</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">30</span><span class="p">),</span>
      <span class="nl">responseType:</span> <span class="n">responseType</span><span class="p">,</span>
    <span class="p">));</span>

    <span class="c1">// Custom interceptors (header, logging, response shaping)</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">interceptors</span><span class="o">.</span><span class="na">addAll</span><span class="p">([</span>
      <span class="n">_buildTokenInterceptor</span><span class="p">(),</span>
      <span class="n">_buildLogInterceptor</span><span class="p">(),</span>
      <span class="n">_buildResponseInterceptor</span><span class="p">(),</span>
    <span class="p">]);</span>

    <span class="n">_initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// GET method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="kd">get</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">get</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// POST method</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">post</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">dynamic</span> <span class="n">data</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">data</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span><span class="p">,</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// File upload</span>
  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Response</span><span class="p">&gt;</span> <span class="n">upload</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">path</span><span class="p">,</span>
    <span class="kd">required</span> <span class="n">File</span> <span class="n">file</span><span class="p">,</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">queryParams</span><span class="p">,</span>
    <span class="n">Options</span><span class="o">?</span> <span class="n">options</span><span class="p">,</span>
    <span class="n">CancelToken</span><span class="o">?</span> <span class="n">cancelToken</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>

    <span class="kd">final</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span><span class="o">.</span><span class="na">last</span><span class="p">;</span>
    <span class="kd">final</span> <span class="n">formData</span> <span class="o">=</span> <span class="n">FormData</span><span class="o">.</span><span class="na">fromMap</span><span class="p">({</span>
      <span class="s">'file'</span><span class="o">:</span> <span class="k">await</span> <span class="n">MultipartFile</span><span class="o">.</span><span class="na">fromFile</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="p">,</span> <span class="nl">filename:</span> <span class="n">fileName</span><span class="p">),</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="n">_dio</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
      <span class="n">path</span><span class="p">,</span>
      <span class="nl">data:</span> <span class="n">formData</span><span class="p">,</span>
      <span class="nl">queryParameters:</span> <span class="n">queryParams</span><span class="p">,</span>
      <span class="nl">options:</span> <span class="n">options</span> <span class="o">??</span>
          <span class="n">Options</span><span class="p">(</span><span class="nl">contentType:</span> <span class="n">Headers</span><span class="o">.</span><span class="na">formUrlEncodedContentType</span><span class="p">),</span>
      <span class="nl">cancelToken:</span> <span class="n">cancelToken</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Example: change base URL on the fly</span>
  <span class="kt">void</span> <span class="n">changeBaseUrl</span><span class="p">(</span><span class="kt">String</span> <span class="n">newBaseUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_checkInitialized</span><span class="p">();</span>
    <span class="n">_dio</span><span class="o">.</span><span class="na">options</span><span class="o">.</span><span class="na">baseUrl</span> <span class="o">=</span> <span class="n">newBaseUrl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// --- Interceptors below ---</span>
  <span class="n">Interceptor</span> <span class="n">_buildTokenInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Insert token or language header here</span>
        <span class="c1">// options.headers["Authorization"] = "Bearer &lt;token&gt;";</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildLogInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onRequest:</span> <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&gt;&gt; [Dio] Request: </span><span class="si">${options.method}</span><span class="s"> </span><span class="si">${options.uri}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"&lt;&lt; [Dio] Response [</span><span class="si">${response.statusCode}</span><span class="s">]: </span><span class="si">${response.data}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nl">onError:</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"!! [Dio] Error: </span><span class="si">${err.error}</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Interceptor</span> <span class="n">_buildResponseInterceptor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InterceptorsWrapper</span><span class="p">(</span>
      <span class="nl">onResponse:</span> <span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Example logic: parse for known "code" field</span>
        <span class="kd">final</span> <span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">data</span><span class="o">?</span><span class="p">[</span><span class="s">'code'</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">next</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">reject</span><span class="p">(</span>
            <span class="n">DioException</span><span class="p">(</span>
              <span class="nl">requestOptions:</span> <span class="n">response</span><span class="o">.</span><span class="na">requestOptions</span><span class="p">,</span>
              <span class="nl">message:</span> <span class="s">"Response error code: </span><span class="si">$code</span><span class="s">"</span><span class="p">,</span>
            <span class="p">),</span>
          <span class="p">);</span>
        <span class="p">}</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">_checkInitialized</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_initialized</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="n">StateError</span><span class="p">(</span><span class="s">"DioInstance not initialized. Call initDio() first."</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="highlights">Highlights</h3> <ul> <li><strong>Singleton Pattern</strong>: Prevents accidental creation of multiple <code class="language-plaintext highlighter-rouge">Dio</code> objects with mismatched settings.</li> <li><strong>Interceptors</strong>: A chain-based approach that injects tokens, logs, and interprets responses.</li> <li><strong>Structured File Upload</strong>: Simplifies constructing <code class="language-plaintext highlighter-rouge">FormData</code> so you don’t need to repeat this logic in every feature module.</li> </ul> <hr/> <h2 id="real-world-usage">Real-World Usage</h2> <p>Once initialized, the same object can handle any number of requests:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Step 1: One-time init</span>
<span class="kd">final</span> <span class="n">dioManager</span> <span class="o">=</span> <span class="n">DioInstance</span><span class="o">.</span><span class="na">getInstance</span><span class="p">();</span>
<span class="n">dioManager</span><span class="o">.</span><span class="na">initDio</span><span class="p">(</span><span class="nl">baseUrl:</span> <span class="s">"https://api.myapp.com"</span><span class="p">);</span>

<span class="c1">// Step 2: GET example</span>
<span class="kd">final</span> <span class="n">listResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">get</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/items"</span><span class="p">,</span> <span class="nl">queryParams:</span> <span class="p">{</span><span class="s">"page"</span><span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
<span class="n">print</span><span class="p">(</span><span class="s">"Item list: </span><span class="si">${listResponse.data}</span><span class="s">"</span><span class="p">);</span>

<span class="c1">// Step 3: POST example</span>
<span class="kd">final</span> <span class="n">loginResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">post</span><span class="p">(</span>
  <span class="nl">path:</span> <span class="s">"/login"</span><span class="p">,</span>
  <span class="nl">data:</span> <span class="p">{</span><span class="s">"username"</span><span class="o">:</span> <span class="s">"jane"</span><span class="p">,</span> <span class="s">"password"</span><span class="o">:</span> <span class="s">"123456"</span><span class="p">},</span>
<span class="p">);</span>

<span class="c1">// Step 4: Upload example</span>
<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="s">"/some/path/to/image.jpg"</span><span class="p">);</span>
<span class="k">await</span> <span class="n">dioManager</span><span class="o">.</span><span class="na">upload</span><span class="p">(</span><span class="nl">path:</span> <span class="s">"/upload/avatar"</span><span class="p">,</span> <span class="nl">file:</span> <span class="n">file</span><span class="p">);</span>
</code></pre></div></div> <p>No matter the HTTP method, everything goes through the same interceptors, ensuring consistent logs, header injection, and error handling.</p> <hr/> <h2 id="common-pitfalls">Common Pitfalls</h2> <ol> <li><strong>Omitting <code class="language-plaintext highlighter-rouge">initDio()</code></strong>: Always ensure your app calls it at startup, or you’ll risk exceptions from uninitialized objects.</li> <li><strong>Forgetting to Add Interceptors</strong>: Missed interceptors means losing global logging or token logic—your logs become silent, and your server might not get correct authentication headers.</li> <li><strong>Excessive Per-Call Options</strong>: Overriding too many fields each time (like <code class="language-plaintext highlighter-rouge">baseUrl</code>, timeouts, or contentType) leads to confusion. Keep them in the main initialization if possible.</li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>A well-structured <code class="language-plaintext highlighter-rouge">DioInstance</code> is a force multiplier in any serious mobile project. By centralizing initialization, interceptors, and request methods, you gain more consistent code, simpler debugging, and a clear separation of concerns. The snippet above is pulled directly from code I’ve developed and iterated on for real-world apps, demonstrating how a single network class can handle everything from JSON-based requests to file transfers.</p> <p>Whether you’re building a small personal app or a large-scale production system, customizing your own <code class="language-plaintext highlighter-rouge">DioInstance</code> ensures your network layer remains cohesive, maintainable, and easy to extend.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="http"/><category term="networking"/><summary type="html"><![CDATA[A deep dive into building a refined Dio setup for mobile apps]]></summary></entry><entry><title type="html">Harnessing RSA Encryption in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/RSA-Encryption/" rel="alternate" type="text/html" title="Harnessing RSA Encryption in Mobile Apps"/><published>2025-02-05T09:00:00+00:00</published><updated>2025-02-05T09:00:00+00:00</updated><id>https://t-mao.github.io/blog/2025/RSA-Encryption</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/RSA-Encryption/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-480.webp 480w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-800.webp 800w,https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://cheapsslsecurity.com/blog/wp-content/uploads/2022/06/rsa-algorithm-feature.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="RSA" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As modern applications handle increasingly sensitive data, robust security measures become paramount. One common, time-tested approach to safeguarding data is RSA encryption. Within the context of mobile app development, RSA proves invaluable for securing user credentials, passwords, or any piece of confidential data that traverses potentially insecure networks.</p> <h2 id="rsa-overview">RSA Overview</h2> <p>RSA (Rivest–Shamir–Adleman) is an asymmetric cryptographic algorithm. Instead of relying on one shared key (as in symmetric encryption), it uses a pair of keys:</p> <ul> <li><strong>Public Key:</strong> Used for encryption. Typically shared with anyone who needs to send encrypted data.</li> <li><strong>Private Key:</strong> Used for decryption. Kept absolutely secure and never shared.</li> </ul> <p>The essential advantage in app development is that you can freely distribute your public key in your mobile application to encrypt user-submitted data (e.g., password fields during registration), while the private key (on your server or a secure service) safely decrypts incoming messages.</p> <h2 id="key-points-for-mobile-developers">Key Points for Mobile Developers</h2> <ol> <li><strong>Key Storage:</strong> The public key can be embedded into the app or fetched from a secure endpoint. The private key must remain on a secure server or hardware security module (HSM).</li> <li><strong>Performance Considerations:</strong> RSA encryption is computationally heavier than symmetric algorithms (like AES). Typically, developers use RSA to transmit session keys or sensitive short strings (like credentials), then switch to faster symmetric encryption for ongoing data exchange.</li> <li><strong>Security Best Practices:</strong> Always validate certificate chains, use well-maintained cryptographic libraries, keep libraries up-to-date, and follow platform security guidelines (e.g., Android Keystore, iOS Keychain).</li> </ol> <h2 id="practical-implementation">Practical Implementation</h2> <p>Below is a Dart-based example I developed focusing on an RSA-based encryption utility (<code class="language-plaintext highlighter-rouge">RsaEncrypt</code>). This snippet demonstrates encrypting plaintext (a password, for instance) using a public key. Once encrypted, the resulting ciphertext can safely traverse the network to the backend, where only the corresponding private key can decrypt it.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:developer'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:app_utils/utils/environments.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:encrypt/encrypt.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:pointycastle/asymmetric/api.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">RsaEncrypt</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kt">String</span> <span class="n">encryptString</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">plainText</span><span class="p">})</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔐 Starting RSA encryption...'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">publicKey</span> <span class="o">=</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="n">Environments</span><span class="o">.</span><span class="na">getPublicKeyString</span><span class="p">());</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔑 Public key parsed successfully'</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">encryptedText</span> <span class="o">=</span> <span class="n">Encrypter</span><span class="p">(</span><span class="n">RSA</span><span class="p">(</span><span class="nl">publicKey:</span> <span class="n">publicKey</span><span class="p">))</span><span class="o">.</span><span class="na">encrypt</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">'🔒 Encryption complete'</span><span class="p">);</span>

    <span class="c1">// Debug prints</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Plaintext End_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext_________________"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"______________Ciphertext End_________________"</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">encryptedText</span><span class="o">.</span><span class="na">base64</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">/// Parse a public key from PEM format</span>
  <span class="kd">static</span> <span class="n">RSAPublicKey</span> <span class="n">_parsePublicKeyFromPem</span><span class="p">(</span><span class="kt">String</span> <span class="n">pemString</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">RSAKeyParser</span><span class="p">();</span>
    <span class="kd">final</span> <span class="n">key</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="n">pemString</span><span class="o">.</span><span class="na">trim</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">key</span> <span class="k">as</span> <span class="n">RSAPublicKey</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="example-flow-in-a-registration-screen">Example Flow in a Registration Screen</h3> <p>In one of my mobile apps, I integrated RSA into the user registration form. During the final “Create Account” step:</p> <ol> <li><strong>Extract User Input</strong>: Collect the email, password, and other sensitive fields from text controllers.</li> <li><strong>Encrypt with RSA</strong>: Call the <code class="language-plaintext highlighter-rouge">encryptString()</code> method before sending them out to the API.</li> <li><strong>Transmit</strong>: Post the encrypted ciphertext to the server via HTTPS.</li> <li><strong>Server Decryption</strong>: The server (holding the private key) decrypts the data and proceeds with user creation.</li> </ol> <p>Below is a simplified excerpt of a Flutter widget illustrating how RSA encryption might slot into a password-handling flow:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Simplified snippet from CreateAccountPageWidget</span>
<span class="kt">String</span> <span class="n">encryptedPassword</span> <span class="o">=</span> <span class="n">RsaEncrypt</span><span class="o">.</span><span class="na">encryptString</span><span class="p">(</span>
  <span class="nl">plainText:</span> <span class="n">_model</span><span class="o">.</span><span class="na">passwordTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
<span class="p">);</span>

<span class="c1">// Send to server using an authenticated endpoint</span>
<span class="kd">final</span> <span class="n">userRegisterData</span> <span class="o">=</span> <span class="k">await</span> <span class="n">ApiAuth</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">userRegister</span><span class="p">(</span>
  <span class="nl">email:</span> <span class="n">_model</span><span class="o">.</span><span class="na">emailTextController</span><span class="o">.</span><span class="na">text</span><span class="p">,</span>
  <span class="nl">password:</span> <span class="n">encryptedPassword</span><span class="p">,</span>
  <span class="c1">// ...</span>
<span class="p">);</span>
</code></pre></div></div> <p>Using RSA for this crucial step helps ensure that a user’s password or other sensitive information is never sent as raw plaintext. While HTTPS adds transport-layer security, layering RSA can add an additional control or help meet certain compliance scenarios where end-to-end encryption is mandated.</p> <h2 id="additional-tips">Additional Tips</h2> <ol> <li><strong>Use Trusted Libraries</strong>: Handling cryptography manually is risky. Established libraries such as <code class="language-plaintext highlighter-rouge">encrypt</code> (Dart), OpenSSL (C/C++), or platform-specific APIs (Android’s <code class="language-plaintext highlighter-rouge">Cipher</code>, iOS’s <code class="language-plaintext highlighter-rouge">SecKey</code>) reduce risk and handle behind-the-scenes complexities.</li> <li><strong>Size Limitations</strong>: RSA encrypts data in chunks. Keep the plaintext size relatively small or implement a hybrid approach (RSA to protect an AES key, then AES for bulk encryption).</li> <li><strong>Logging</strong>: Notice the debug logs above—though useful for development, they must be removed or redacted in production environments to avoid leaking sensitive info.</li> </ol> <h2 id="conclusion">Conclusion</h2> <p>Implementing RSA in your mobile application can raise the security bar significantly, especially for user onboarding flows, login credentials, and other delicate transactions. My approach involves carefully parsing a PEM-encoded public key, encrypting short strings client-side, and ensuring the corresponding decryption is handled by a protected private key on the backend.</p> <p>In app development contexts, adopting robust cryptographic primitives like RSA indicates a refined understanding of security—something potential employers and clients appreciate. Coupled with efficient coding patterns and best-practice key management, this method protects user information against prying eyes throughout the data’s journey.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="security"/><category term="cryptography"/><summary type="html"><![CDATA[A closer look at RSA cryptography and its practical implementation in app development]]></summary></entry><entry><title type="html">Leveraging Push Notifications in Mobile Apps</title><link href="https://t-mao.github.io/blog/2025/Push-Notifications/" rel="alternate" type="text/html" title="Leveraging Push Notifications in Mobile Apps"/><published>2025-01-06T17:45:00+00:00</published><updated>2025-01-06T17:45:00+00:00</updated><id>https://t-mao.github.io/blog/2025/Push-Notifications</id><content type="html" xml:base="https://t-mao.github.io/blog/2025/Push-Notifications/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-480.webp 480w,https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-800.webp 800w,https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="https://www.heymarket.com/wp-content/uploads/2021/09/What-Are-Push-Notifications.jpg" class="rounded z-depth-1" width="100%" height="auto" style=" max-width: 800px; " title="Push Notifications" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Push notifications can make or break the user experience in a mobile application. They handle everything from real-time updates (such as incoming messages in a chat) to sophisticated scheduling (like nudging users to revisit an order that has gone idle). Over the years, I’ve built robust push notification features in multiple production applications, ensuring reliability and a seamless user experience.</p> <p>Below, I’ll outline the typical architectural pieces I consider when implementing push notifications in both iOS and Android environments—using a serverless backend, custom message channels, and at times advanced scheduling logic.</p> <hr/> <h2 id="why-push-notifications-matter">Why Push Notifications Matter</h2> <ul> <li><strong>Real-Time Engagement</strong>: If you run any form of commerce or on-demand service, push alerts keep users informed the moment a new request or status update hits.</li> <li><strong>Increased Conversion</strong>: Well-targeted notifications can drive users back to your app, boosting usage and retention.</li> <li><strong>Operational Efficiency</strong>: For internal apps (such as technician or driver apps), push notifications can inform staff of new tasks, ensuring minimal response time.</li> </ul> <hr/> <h2 id="backend-and-cloud-function-triggers">Backend and Cloud Function Triggers</h2> <p>My typical implementation uses a serverless architecture (e.g., Firebase Functions or AWS Lambda) to handle the following steps:</p> <ol> <li><strong>Message Creation</strong>: A new chat message or system event triggers a write to a database collection (e.g., Firestore).</li> <li><strong>Function Trigger</strong>: A function runs automatically on database updates. That function: <ul> <li>Parses the newly inserted data.</li> <li>Determines the correct recipients (e.g., user vs. admin vs. staff).</li> <li>Sends push messages only to relevant device tokens.</li> </ul> </li> <li><strong>Token Management</strong>: Each user may have multiple FCM tokens, one for each device. My code ensures tokens are stored and pruned if they become invalid.</li> </ol> <p>Below is a simplified version of a Node.js Cloud Function that sends out a message whenever a user submits a new chat message. This code pattern can be generalized for other events:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">functions</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">firebase-functions</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">firebase-admin</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">admin</span><span class="p">.</span><span class="nf">initializeApp</span><span class="p">();</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">notifyOnNewChatMessage</span> <span class="o">=</span> <span class="nx">functions</span><span class="p">.</span><span class="nx">firestore</span><span class="p">.</span><span class="nf">document</span><span class="p">(</span><span class="dl">"</span><span class="s2">chats/{chatId}/messages/{messageId}</span><span class="dl">"</span><span class="p">).</span><span class="nf">onCreate</span><span class="p">(</span><span class="k">async </span><span class="p">(</span><span class="nx">snapshot</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">messageData</span> <span class="o">=</span> <span class="nx">snapshot</span><span class="p">.</span><span class="nf">data</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">senderUid</span> <span class="o">=</span> <span class="nx">messageData</span><span class="p">.</span><span class="nx">senderUid</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">messageData</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>

    <span class="c1">// Retrieve the conversation details or intended recipient</span>
    <span class="c1">// For example, look up participant IDs in Firestore</span>
    <span class="kd">const</span> <span class="nx">chatRef</span> <span class="o">=</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">firestore</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">chats</span><span class="dl">"</span><span class="p">).</span><span class="nf">doc</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">chatId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chatDoc</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">chatRef</span><span class="p">.</span><span class="nf">get</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">participantUids</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">chatDoc</span><span class="p">.</span><span class="nf">data</span><span class="p">()</span> <span class="o">||</span> <span class="p">{};</span>

    <span class="c1">// Filter out the sender's own UID</span>
    <span class="kd">const</span> <span class="nx">targetUids</span> <span class="o">=</span> <span class="nx">participantUids</span><span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">uid</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">uid</span> <span class="o">!==</span> <span class="nx">senderUid</span><span class="p">);</span>

    <span class="c1">// Collect FCM tokens for all recipients</span>
    <span class="kd">let</span> <span class="nx">tokens</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">uid</span> <span class="k">of</span> <span class="nx">targetUids</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tokenSnapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">firestore</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">users</span><span class="dl">"</span><span class="p">).</span><span class="nf">doc</span><span class="p">(</span><span class="nx">uid</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">fcm_tokens</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">();</span>
      <span class="nx">tokenSnapshot</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">doc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">fcmToken</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">data</span><span class="p">().</span><span class="nx">fcm_token</span><span class="p">;</span>
        <span class="nx">tokens</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">fcmToken</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">No tokens found, skipping push.</span><span class="dl">"</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Construct the notification message</span>
    <span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">notification</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">New Message</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">text</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">You have a new chat message!</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Possibly define custom key-value pairs for deep linking</span>
        <span class="na">chatId</span><span class="p">:</span> <span class="nx">context</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">chatId</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="c1">// Send to all tokens in batches</span>
    <span class="kd">const</span> <span class="nx">batchResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">admin</span><span class="p">.</span><span class="nf">messaging</span><span class="p">().</span><span class="nf">sendToDevice</span><span class="p">(</span><span class="nx">tokens</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Push notification sent</span><span class="dl">"</span><span class="p">,</span> <span class="nx">batchResponse</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error sending notification:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="scheduling-and-delayed-notifications">Scheduling and Delayed Notifications</h3> <p>If you need delayed messages—for example, automatically reminding a user after 3 days of inactivity— you can store a <code class="language-plaintext highlighter-rouge">scheduled_time</code> field in your database. A separate scheduled function (e.g., a cron-like Pub/Sub job) queries for “to-be-delivered” notifications. Once the time is right, the function sends them out.</p> <hr/> <h2 id="app-side-setup">App-Side Setup</h2> <p>On the mobile side, you typically need to:</p> <ol> <li><strong>Request Permission</strong>: iOS requires prompting the user for notification permissions. On Android 13+, you need <a href="https://developer.android.com/develop/ui/views/notifications#permissions"><code class="language-plaintext highlighter-rouge">POST_NOTIFICATIONS</code></a> permission as well.</li> <li><strong>Establish Notification Channels (Android)</strong>: For high-importance notifications, create channels so your push messages appear with the correct sound/priority.</li> <li><strong>Register for Tokens</strong>: Once the app is up, request the FCM token. If it changes (e.g., user reinstalled the app), re-register the new token on the backend.</li> <li><strong>Foreground Notification Handling</strong>: Decide how you show a message if it arrives while the user is actively using the app. On Android, you can rely on local notifications for that if you want a system tray icon to appear.</li> </ol> <p>Here’s a minimal Kotlin snippet for setting up a notification channel in an Android <code class="language-plaintext highlighter-rouge">Activity</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION</span><span class="p">.</span><span class="nc">SDK_INT</span> <span class="p">&gt;=</span> <span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION_CODES</span><span class="p">.</span><span class="nc">O</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">val</span> <span class="py">channelId</span> <span class="p">=</span> <span class="s">"high_importance_channel"</span>
            <span class="kd">val</span> <span class="py">channelName</span> <span class="p">=</span> <span class="s">"High Importance Notifications"</span>
            <span class="kd">val</span> <span class="py">channelDescription</span> <span class="p">=</span> <span class="s">"Used for urgent messages"</span>
            <span class="kd">val</span> <span class="py">importance</span> <span class="p">=</span> <span class="nc">NotificationManager</span><span class="p">.</span><span class="nc">IMPORTANCE_HIGH</span>
            <span class="kd">val</span> <span class="py">channel</span> <span class="p">=</span> <span class="nc">NotificationChannel</span><span class="p">(</span><span class="n">channelId</span><span class="p">,</span> <span class="n">channelName</span><span class="p">,</span> <span class="n">importance</span><span class="p">).</span><span class="nf">apply</span> <span class="p">{</span>
                <span class="n">description</span> <span class="p">=</span> <span class="n">channelDescription</span>
            <span class="p">}</span>
            <span class="kd">val</span> <span class="py">notificationManager</span> <span class="p">=</span> <span class="nf">getSystemService</span><span class="p">(</span><span class="nc">NotificationManager</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>
            <span class="n">notificationManager</span><span class="o">?.</span><span class="nf">createNotificationChannel</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="c1">// Other onCreate logic, e.g. setContentView(...)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>When it comes to iOS, you’d create a similar channel concept in Xcode by setting up categories or using local notifications in tandem with push. Then register an <code class="language-plaintext highlighter-rouge">UNUserNotificationCenterDelegate</code> to handle how foreground notifications are displayed.</p> <hr/> <h2 id="edge-cases-and-advice">Edge Cases and Advice</h2> <ol> <li><strong>Token Rotation</strong>: Users can lose or regain tokens at any time. Make sure your backend cleans up invalid tokens after each message send.</li> <li><strong>Foreground vs. Background</strong>: In the foreground, you might show custom in-app alerts. In the background, rely on system notifications.</li> <li><strong>Payload Size</strong>: Some push services limit payload to around 4KB. If you must send extra data, place it in your DB and embed only references or IDs in your push payload.</li> <li><strong>Localization</strong>: If your app spans multiple regions, prepare the push text in localized form or dynamically fetch translations from your backend.</li> <li><strong>Scheduled vs. Instant</strong>: Real-time pushes are straightforward, but scheduling them can be more elaborate. Timers or cron tasks in your serverless environment are the typical approach.</li> </ol> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Push notifications are a crucial part of modern mobile app development. They bridge the gap between user engagement and real-time updates. Over time, I’ve implemented solutions that:</p> <ul> <li>Use serverless triggers (Firebase Functions, etc.) to isolate push logic.</li> <li>Maintain token sets for each user device.</li> <li>Provide flexible channels on Android with <code class="language-plaintext highlighter-rouge">IMPORTANCE_HIGH</code> for critical messages.</li> <li>Support advanced scheduling for any “reminder” use cases.</li> </ul> <p>By combining these strategies, your app can deliver reliable notifications that users find actually useful—boosting your overall user satisfaction and internal efficiency.</p>]]></content><author><name></name></author><category term="mobile-dev"/><category term="mobile"/><category term="flutter"/><category term="notifications"/><category term="fcm"/><summary type="html"><![CDATA[Techniques for implementing push notifications across iOS and Android, including scheduling, message routing, and handling deep links]]></summary></entry></feed>